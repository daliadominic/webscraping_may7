descr
"I do a lot of work with image processing and need to test cameras / imagers. I am going to create a scalable test platform.. Read up about this project on . I do a lot of work with image processing and need to test cameras / imagers. I am going to create a scalable test platform.. . We have looked at creating image processing solutions previously which used image sensors which used a parallel interface or cameras which used HDMI interfaces. . One common interface for image sensors is MIPI, so let's take a look at how we can build an image processing design on the Zybo Z7 which is capable of using both HDMI input and the MIPI camera interface.. I also want to lay the ground work to be able to create an image processing system that allows me to quickly and easily test cameras and sensors. As such a future upgrade to this project will be to support a parallel Pmod camera as well.  . We will then be able to select between which imager we wish to use for out algorithm. This has the added advantage that with pin out on the Zybo MIPI connector has been aligned with other commonly used maker cameras for example the Pi Cameras. We will look at how we can use the Pi camera in another project. . MIPI is the commonly used abbreviation for the Mobile Industry Processor Interface. This is an interface which is designed for uni-directional data transfer at high bandwidths using a number of high speed serial lanes.. MIPI has a number of different layers just like the OSI model, for this application we will be using the MIPI DPhy for the physical layer and MIPI Camera Serial Interface issue 2 (CSI-2) for the protocol which transfers the image data. . If you want to know more about MIPI have a look at this previous installment of the MicroZed Chronicles on MIPI. The Zybo Z7 interfaces with a MIPI camera using a Flat Flexible Cable (FFC) with a pin out as below. Using this interface we can use up to two MIPI lanes for image transfer. Configuration of the imager is provided using a I2C connection, while there are two GPIO provided. . These GPIOs provide different fucntionality depending upon what camera we are connected too. In the case of the PCam we only need to use GPIO on pin 11 this drives the power up signal to the imager.. In some applications we may need to provide a clock however, for the PCam we do not need too as the PCam board contains its own 12 MHz oscillator.. The actual pin out is as below. . As the Zynq 7000 does not have DPhy capable IO, the designers of the Zybo Z7 have implemented a Dphy compatible approach which uses an external resistor network to provide the high speed and low speed MIPI interfaces. . . Our FPGA design is going to have two video inputs paths and a common video output path. . Internally our FPGA architecture will use the following blocks from the Digilent Vivado Library.. From the Vivado Library we will be using the following blocks. We also need to configure the Zynq PS to provide the following. When it comes to clocking the AXI Lite network is clocked at 50 Mhz, the AXI Streaming network and the DPhy reference is connected to 200 MHz. While the Dynamic clock generator reference is connected to the 100 MHz clock. . To aid the integration and testing of the interfaces I placed several integrated logic analyzers within the design. Below you can see the initial capture of the MIPI input. . As we have two inputs we need to ensure both input paths work correctly as we desire.. . . Floor plan of the completed design. . Once we have the FPGA design completed we need to write application SW to configure the image processing cores within the FPGA and configure the PCam for the correct operation. . Both cameras HDMI and MIPI will be configured to operate with a 720p resolution. . The application SW therefore needs to perform the following . The largest part of the SW application is in configuration the PCam over the I2C link. The data sheet is quite comprehensive however the first thing we need to do is ensure we can communicate with the PCam. . I do this by reading the register 0x3100 and ensuring the response is 0x78 which is the I2C address of the device. IF I do not receive that value then I declare the camera is not connected, provided the camera is connected the next stage is to initialize the camera and then configure the camera for the mode we desire to operate in. . Once I had worked out what we need to configure in the PCam I created, a simple function which would read through an array and output the configuration data to the PCam. . The software allows me to switch between the different input sources using the AXIS Switch.. When I put all this together and ran the application on my bench it seemed to work pretty well providing me with a flexible platform for future testing of cameras and image sensors. . . . With the software all written we can use both video input formats. We will also be able to see differences in the performance. . I intend to come back to this board in a future MicroZed chronicles blog and add in support for Pmod camera and expand the MIPI camera to work with the PI low light camera. Over the next few weeks and months but at the moment it is good sufficient for the testing I have in mind, and provides a very flexible platform.  . You can find the files associated with this project here:. https://github.com/ATaylorCEngFIET/Hackster. See previous projects here.. More on on Xilinx using FPGA development weekly at MicroZed Chronicles.. . "
"The project I want to share with you today is an Arduino maze game, which became a pocket console as capable as Arduboy!. Read up about this project on . The project I want to share with you today is an Arduino maze game, which became a pocket console as capable as Arduboy!. Welcome to my first tutorial!. The project I want to share with you today is Arduino maze game, which became a pocket console as capable as Arduboy and similar Arduino based consoles. It can be flashed with my (or your) future games thanks to exposed ICSP header.. I had an idea few months ago to build a maze game on Arduino, but without hard-coded set of mazes. It should be able to generate a new maze for each level you are playing, so you never see the same maze again :). Coding this was a bit of a challenge, since Arduino is limited in RAM memory, and then I found few examples how this can be done with simple Bo-Taoshi algorithm.. Code I used as a starting point I took by SANUKI UDON and his project HOW TO MAKE A MAZE GENERATOR USING ATTINY13A. My starting point was with a small breadboard with only 4 buttons connected to move through maze, but later when I decided it should be a game console I added a few more buttons. On larger breadboard you can see 2 more buttons, and later I added a third one to be used as start/pause/menu button. Connecting components as shown in diagram above.. Buttons:. SSD1306 OLED screen:. Buzzer:. A-Maze game source code can be found here: https://github.com/alojzjakob/A-Maze. Open in Arduino IDE and upload to your board or use ISP programmer to program your chip.. I recommend using USBTIny ISP, never had problems with it :) but you can also use ordinary Arduino to program your chip.. In my case I did not use external crystal, so my Atmega328p chip works on internal oscillator which is 8MhZ.. For more info visit this link: https://www.arduino.cc/en/Tutorial/ArduinoToBreadboard.. If you want to make this project permanent, with a nice looking case, here is the simple 3D printable case I designed: https://www.thingiverse.com/thing:2851100. In the pictures above you can see how all components are laid out on the 4x6 prototype PCB.. Most button wiring goes under the battery holders, try to make it as plain as possible, so battery holders can have relatively flush fit above the board with wires inbetween.. I also recommend do other wiring under the screen, since Atmega chip legs are soldered and exposed under the screen. When you are done soldering, put some insulation tape under the screen to prevent shorts etc.. ICSP header is optional, and if you decide not to expose it, it will make your assembly much easier, 6 connections less to take care of, but program the chip first before you solder it, or use 28 pin DIP socket so you can easily remove the chip for programming.. . "
"A pantry which can automatically replenish kitchen items.. Read up about this project on . A pantry which can automatically replenish kitchen items.. Most of the times, when I want to cook something I find some cooking ingredient (onion, garlic, chili etc.) is running low. In some cases I buy wrong item such as garlic instead of onion. When I reach at my kitchen I observe that, I have a plenty of onion but no garlic. How will you feel in such a situation?. To get rid from such situation I built a Smart Pantry which can order automatically    to replenish every ingredients of my pantry with Amazon DRS. Busy life, easy solution!!!. Here, I will show you how I made such hi-tech pantry and I hope you will able to reproduce it as your requirement.. So, let's get started. First I will explain how I prepared my pantry to sense the shortage of any ingredient. I used Force Sensitive Resistor (FSR) to detect the absence of ingredient in a specific box of the pantry. Arduino UNO is used to to read the sensor value.    . I took a 3 compartment kitchen box for my demo project and it can house three different ingredients into it's three separate box. For sensing the shortage of ingredients in a box I am measuring weight of each box with force sensitive resistor. Though FSR is not very accurate for weight measurement but enough for this project for identifying a blank box.. Photos attached above shows how I placed fsr in the box. I placed one fsr below each compartment and tried to put it at the center of the compartment. Using mini drill I made two holes for every sensor to bring out the pin of the sensor out of the box. Then I soldered jumper wire to each pin of the sensors to connect it with Arduino.. Three sensors are used for three separate parts of the box and sensors are placed in the center of each box. . Force sensitive resistor change its value when a force is applied to it. Pressure from a hard surface is not good for FSR and you will not get accurate result. For better output I place a small piece of foam on the bottom of every inner box using double sided tape. Place it in such position that it exactly be on the sensor.. Our pantry is ready!!!. DRS provides connected devices with direct access to Amazon’s powerful retail platform to order any item automatically. With easy-to-use APIs, device manufacturers can take advantage of Amazon's authentication and payment service.. After integrating with Amazon services like Login with Amazon (LWA) and Simple Notification Service (SNS), a simple API call allows a manufacturer to place a product order on behalf of a customer.. Let's get started with DRS.. If you don't have Amazon Developer or AWS (Amazon Web Services) Account then sign up for it.. For creating Amazon Security Profile:. 1. Log into Amazon Developer Portal. 2. After Successful Login to Developer Portal go to ""Login with Amazon"" from Apps & Services tab.. 3. Click on Create a New Security Profile.. 4. Now Click on Web Settings from Manage drop-down. 5. Click on Edit button and then Enter Allowed URL, Allowed Return URLs and Click Save button.. (Note: We will host a html page in a URL and the address of that page would be the return URL. You can set it later).. . 6.  Now, click on General tab and note down the Security Profile ID and Client ID which will be required later.. Amazon Simple Notification Service (Amazon SNS) is a fast, flexible, fully managed push notification service that lets you send individual messages or to fan-out messages to large numbers of recipients. Amazon SNS makes it simple and cost effective to send push notifications to mobile device users, email recipients or even send messages to other distributed services.. For Creating new Amazon Web Services SNS:. 1. Login into Amazon Web Services Console. 2. After Successful login in AWS Account search SNS and click on it.. 3. Click on Create topic button. . 4. A popup for SNS will be displayed. Enter Topic Name and Display name respectively. After writing this click Create Topic button.. 5. Click on Edit Topic Policy from Other Topic Actions. 6. Chose the option of ""Only these AWS users"" and then write AWS Account ID. You can get your AWS Account ID from My Account option. . 7. Now click on Update Policy button.. 8. Note down the SNS Topic ARN(Amazon Resource Number).. 9. Now, click on Create subscription . 10. From the Protocol field select Email and enter your email address in Endpoint field.. 11. Click on request confirmation. An email will be sent to your account.. 12. From the provided link confirm your subscription.. 1. Login to Amazon Developer Portal and go to ""Dash Replenishment Service"" . 2. Click on Begin button. So, it will be redirected to Register with LWA page. Enter your LWA Security Profile ID (which noted earlier) and click next button.. 3. Now Enter your Amazon Web Services SNS ARN (which noted earlier) and click next and Done button.. 4. Now it is the right time to add a device in DRS account. Click on CREATE A DEVICE. . 5. Enter your Device name and click to GENERATE button to generate a Model ID. Then Upload a photo. After that click next button.. 6. Add Slots to your Device. Create as many slots as many you want for your device. Enter Product ASNs to slots. For information of Finding ASNs click on the ""How to find ASNs"" Google. Add items to your slot and submit. . Now you can use the Amazon DRS API in your application. For API and other help of DRS please visit: developer.amazon.com/public/solutions/devices/dash-replenishment-service. . Once we are done with creating all the individual elements, we are now ready to generate the authorization code from the DRS service that will be used to place order by Pantry.. For creating your own product registration page, you may use any of the free hosting platforms available.. Here is web page I have hosted on for register product from customer end to Amazon DRS. You may visit following link: . https://smart-pantry.000webhostapp.com/ . And try to register by providing random serial no.. The html code for the website has been uploaded to code section. . To register your product:. 1. Click on Login with Amazon and click on Okay button.. 2. Choose the product for first slot and than click to next for second slot. 3. Select product for second slot and so on.. 4. Click to Complete Setup to Confirm Details..  5. After successful confirmation you will get an Authorization Code . 6. You will also get an email about the confirmation. . . "
"How to make LAN/Ethernet relay switch using Arduino UNO and ethernet shield ENC28j60.. Read up about this project on . How to make LAN/Ethernet relay switch using Arduino UNO and ethernet shield ENC28j60.. How to make LAN/Ethernet relay switch using Arduino UNO and ethernet shield ENC28j60. This is a simple tutorial, remote control over the LAN. . To control it, I used HTTP and JSON. This electronic circuit can be used as part of a larger system, IoT Internet of things.. See more:  How to make LAN/Ethernet relay switch using Arduino UNO.. Connection ENC28J60 from Arduino UNO.. . This software supports two relays, but it's not a problem to increase their number. IP device is permanently assigned to 192.168.0.101. If you had more devices working on the same network, you'd have to remember about unique IP and MAC addresses. . To turn on the relay, just enter the link in the browser. http://192.168.0.101/sw_on=1, ""1"" is the relay number.  To turn off the relay http://192.168.0.101/sw_off=1. In response we get a JSON relay state {""sw_0"":0 ,""sw_1"":0 }.. . . "
"Cellular backdoor with Hologram Nova on Raspberry Pi flask-ask server-Amazon Alexa controlled.. Read up about this project on . Cellular backdoor with Hologram Nova on Raspberry Pi flask-ask server-Amazon Alexa controlled.. Our previous project with the ARDrone 2.0 helped us learn about a new project. Our current Alexa and Arduino Smart Home Challenge entry introduced us to the skills needed to create a working demo for a voice-controlled drone.. Here is what we came up with:. Below, we outline our process.. To set up the Pi with the necessary software, install flask-ask:. You'll also need the library that controls the ARDrone via WiFi. Clone this repo and run the install.sh script provided.. We created a skill that was linked to a server running off the raspberry pi. Flask is an easy to use python library to serve an application. Using flask-ask, we can configure the server to communicate with our Alexa skill. We use Ngrok to serve the application externally and gives us an https link we'll need for our Alexa skill. Here's a snippet of code for the application. The full app.py script will be attached below.. To run this application, just type:. For this project, we used ngrok to serve the application over https. We used a reserved subdomain name so the link can be consistent with the Amazon Alexa skill configuration. To serve the application, run:. Because the Raspberry Pi joins the ARDrone's WiFi access point, we use the Hologram Nova USB modem as a cellular backdoor enabling Alexa to communicate with the flask-ask server.. We found that the application worked smoothly using hologram nova with a monthly data plan of 250mb. You can set this up using the hologram dashboard and activating a sim card.. Setting up the Alexa skill, navigate to the Amazon developer dashboard and log in. Click on Alexa and get started with Alexa Skill kit. Then create a new skill by clicking Add a new skill. Start completing the tabs on the left following their instructions. . Follow the instructions given by the gui.. Finish filling out the last two tabs until all the check marks are green. Then launch your skill with the beta testing feature. This allows you to host your skill on any echo device before publishing it. Follow the instructions on the email link to install the skill on your Echo device.. To run the entire application, first make sure your drone is on and its wifi connecting is up. On the Raspberry Pi server, connect to your ARDrone's network. In the terminal, connect to Hologram's network running the following command:. Once the blue LED on the Nova is solid and this process has finished, you are on the cellular network. On a separate tab, run the ngrok command we mentioned earlier:. Finally, in another tab, run the application. If the drone's lights are green, you're good to fly. If not, ask Alexa to reset it by saying, ""Alexa, ask MajorTom to reset."" . Now try to command your drone to fly! Say, ""Alexa, ask MajorTom to blast off."". 🎶 I think my spaceship knows which way to go 🎶 . kindbot.io . "
"Sony Spresense Board + NodeMCU + Google Firebase + Android Studio. Read up about this project on . Sony Spresense Board + NodeMCU + Google Firebase + Android Studio. How to create a high quality project Sony Spresense Board & Extension Board has arrived. Thanks for the product and quick delivery. Package photos are below.. . Linux Ubuntu requires the user to be a member of the dialout group. Adding user to dialout groups is executed with the following command in the terminal: . - Log out and log in again to use the new settings. Now you can connect the Spresense board to PC via the USB cable.. 1. Install Spresense Arduino Library. . - The Spresense Arduino Library is now installed.. 2. Install Bootloader. 3. Build your first sketch to verify installation. The code that is update on the Sony Spresense Board is listed in the attachments with name sony_spresense_board.ino. Parts of code for elements are listed in other steps. All the code sections listed in the following steps are used in sony_spresense_board.ino.. When the microphone detects the sound, changes will be read and will be set as mic_data = 1. If there is no change in the sound sensor then the value will be mic_data = 0.. We can see that when the sound is detected, the LED will light up.. - I will connect the speakers to the Sony Spresense board. So I wil be able to make sound warning. Warnings will be saved to SD card as "".mp3"" format. Depending on which sensor is activated, "".mp3"" files will also be activated. This will be in the house.. - This can be seen/heard on video for testing, which is indicated in Step 7.. . - Installing mp3 player:. - player.ino folder is shown below:. Stepper motor in this project serves to rotate security camera. It will constantly rotate the camera. The radius of movement is 60°. Testing stepper motor is shown in the pictures below.. - IN1, IN2, IN3, IN4 are pins for programming the stepper motor. ""d"" is the delay that occurs between commands. ""for"" is used to create an angle that the motor will go in one direction. for the value for (int I = 0; i<150; i++), this is the angle of 90°. The first for the loop achieves that the engine rotates in one direction, while the other for the loop achieves the return to the starting position.. . - If the pir sensor detect motion, the value of the variable pir_data will be 1 (pir_data = 1) and the LED will turn on. If there is no detect motion the value of variable will be 0 (pir_data = 0) and the LED will turn off.. . Distance sensor (Ultrasonic Module HC-SR04) serves the distance sensor to inform the owner of the house via the Android application that someone is outside the door and how far away (meters). Sensor testing is shown in the pictures.. - In the code we see that the distance value is obtained. This distance value is printed using the Serial.print command and the printout is displayed as in the last photo. (Tools > Serial Monitor). -  The codes required to load according to the associated schema below is sony_spresense_board.ino.. . . . Google Firebase serves to store data collected on the NodeMCU and Sony Spresense Board. These datas can be further used on websites, mobile applications and anywhere they can access the Internet. Sign in using your Google Account and follow the steps below.. After login follow the next steps:. Now, we've connected NodeMCU and Google Firebase.. . - The application was created in the android studio. The part that connects the app from Google Firebase from where the sensor data is taken from is shown below.. - The part of the code that is specified is used to display distance data. Part of the code used to retrieve data and converting to int from Google firebase is below.. - If-else is used to decide whether someone is outside or not.. . . "
"Use your Arduino to create a Binary Clock and learn how to read Binary numbers.. Read up about this project on . Use your Arduino to create a Binary Clock and learn how to read Binary numbers.. This clock does not (yet) synchronise with any time server and does not use a real time clock module to stay exactly on time (yet). . It just runs a basic seconds count with a 1000 millisecond delay in the sketch. LEDs are connected to PWM 3 to 19 with a resistor each. . Note that: PWM pins 14 to 19 are the Analog pins 0 to 5.. I will be adding Internet time synchronisation soon. Stay tuned and hit Follow! ;). Enjoy and greetings,. Peter Lunk. . "
"8,000 RPM motor with a guitar pick! Crazy! You will shred faster than any other guitarist!. Read up about this project on . 8,000 RPM motor with a guitar pick! Crazy! You will shred faster than any other guitarist!. Create your own speed pick and stomp back at home with this easy 3D-printed and a simple Arduino project!. "
"This tutorial will show how to install FFmpeg into Raspberry Pi, then stream video to local web which can be access through the computer.. Read up about this project on . This tutorial will show how to install FFmpeg into Raspberry Pi, then stream video to local web which can be access through the computer.. Part list to purchase:. 1. Raspberry Pi 3 https://amzn.to/2VJIOBy. 2. USB camera Logitech https://amzn.to/35w1DMN. Buy electronic component on utsource.net. . The following tutorial will show you how to install FFmpeg onto the Raspberry Pi and stream video to the local web which can be access through computer/phone/tablet.. Note: Model B+ (4-Cores) can do “make -j4” instead of  “make”. This ""make"" command will take 4 hours long 🠚 take a sleep instead of waiting for it!. Input following settings:. Make execute file for easy command:. Input following settings:. Change the mode for file webcam.sh so it can execute, then run it:. After the above command, streaming will be started to local web.. Go to web browser, type address <your-ip-address:8090>/test.mjpg. Note: To stop the camera, press Ctrl+C at terminal, then type command:. As a test, I uploaded this video where you can see clock needle rotate every single second!. In order to run FFmpeg service without typing the command /usr/sbin/webcam.sh, go to /etc/rc.local 🠚 then add command line /usr/sbin/webcam.sh before ""exit 0"". Every time Raspberry starts up, FFmpeg will automatically run without typing code.. "
"This micocontrollers laboratory is designed to speed up projects, and make easy and clean connections.. Read up about this project on . This micocontrollers laboratory is designed to speed up projects, and make easy and clean connections.. An easy way for practice  with microcontrollers (sorry I dont speak English).. Elements:. . . . . . . Star Wars Melody Player, shows buzzer and dancing LED also each component in detail. . . . more info about sprumn analyzer follow this link . Thank you!. "
"When the 3.5mm audio is plugged in, it disconnects internal speaker. This project takes control of the behavior of the speaker.. Read up about this project on . When the 3.5mm audio is plugged in, it disconnects internal speaker. This project takes control of the behavior of the speaker.. WARNING! DO AT YOUR OWN PERIL, THIS WILL DEFINITELY VOID THE WARRANTY FOR THE ECHO DOT AND MIGHT BRICK THE DEVICE. On the other hand your loss is limited to $30, that's what Amazon is charging now for the device, and you are working with low currents, so no electric shock risk :-). I did brick the Echo, so do what I say but don't do what I do :-) Nevertheless, got a new one and completed the project, now being more careful with soldering (must have shorted something previously). See the video below. At the end I added the description of the solution as well (with the code). At $30 the Echo Dot is a steal as a music streamer, as it has an 3.5mm audio jack (as well as Bluetooth, if that's what you prefer). The internal speaker is good for only command-response stuff, I wouldn't self-inflict listening music on it. The challenge is that when the 3.5mm jack is plugged in it silences the internal speaker; unless you have an always-on amplifier you'd end up missing Alexa responses. The typical use case in my opinion (and my case) is an amplifier that's used for various inputs (music streaming, record player but could be TV, CD, etc) and that I switch into stand-by when not used. As such there is no guarantee that when you talk to Alexa the amplifier would be both on and connected to the right input; with the internal speaker silenced always when the 3.5mm plugged in it is a lottery to hear the responses.. The Echo Dot is using a 3.5mm connector that disconnects two pair of pins when the jack plugged in. The solution is relatively simple: run cables to those pin pairs and decide when to activate the internal speaker. There are various options that can be pursued, depending on your configuration and sophistication:. Taking apart the Dot is actually not that difficult. But things will never be the same again afterwards; there is a sticky rubber pad that you can put back but it will show has been removed (though this is at the bottom of the device so not visible at all). Also, there is some drilling, soldering, cutting involved. And as I warned at the beginning, this involves working with delicate electronics, so you always risk to brick the device. Now that you have been warned.... Gently remove the rubber pad at the bottom. Pry it delicately and it will peel off.. Once the rubber mat removed there is still a transparent foil glued to the bottom. In order to access the screws I simply drilled holes through that foil. Using a Torx screwdriver, remove the screws. Delicately open the device.. Now comes the tricky part. The pins for the 3.5mm connector are very small so be very careful. The cables need to be soldered to the the pins marked 1-4 in the photo above. If you short pins 1&2 and 3&4, the internal speaker will be on, even if a 3.5mm jack is plugged in. As I described in the ""My Solution"" section, there are various options how and when to turn on/off the internal speaker.. Same view with the cables soldered.. In order to get the cables out there are few modifications that are necessary.. Firstly, the internal skeleton is of something that looks like a magnesium alloy (BTW quite remarkable for a device at this price point). It is necessary to remove a little underneath where the connector sits to let the cables out. I used a Dremel but whatever works.. Next there is a need to cut on opening in the plastic enclosure to let the cables out.. Just to make sure the cable stays firmly I put a little glue, and an isolation on top. Eventually, assemble it altogether. I'm using a Sunfounder 2 Channel 5V relay. . Connected as follows (relay -> Photon), please note that the jumper RY-VCC/VCC MUST be removed in this configuration:. Then with Alexa connect what I marked as 1&2 to J1 1&2 and 3&4 to J2 1&2 (these are normally closed, so even if power down, the internal speaker would be active).. I'm not documenting here the Photon part, is part of a serial controller described here https://www.hackster.io/saka/automate-bluesound-s-node-with-amplifier-and-alexa-control-3fbc9e.. Additionally, I'm using the amplifier 12V trigger. This ensures that when e.g. the amplifier is switched off manually, it resets Alexa to the internal speaker.. . . . "
"This omni-directional robot will detect your face, track you and then close in on his prey. Autonomously.. Read up about this project on . This omni-directional robot will detect your face, track you and then close in on his prey. Autonomously.. My initial submission to the ""Hackster Terminate the competition"" competition was to create a robot that seeked out humans but unlike those in the terminator universe it did not go around killing people, instead it used it's powers for good. . This omni-directional robot will find you, detect you, home in on you and compliment you!. One requirement that I specified to myself is that I would ensure that it could be made without having to build any of the electronics yourself. Every part inside of this robot can be purchased from eBay, plugged together using freely available tutorials and they should work. The case will then be 3D printable so you can either print it yourself or get it made on 3D Hubs. I think this project meets this goal and I will now guide you through the steps of building your own Hunter Flatterer Robot. So let us start with a system diagram that shows all the parts of the robot and how they plug together. We will be referencing this throughout the build and checking it off as we go along.. Don't be too daunted by this diagram if you have never used motors before. It basically boils down to Four main parts:. The next four sections will mirror this list and guide you through setting up each part.. So you've got yourself a battery, what next?. The above diagram shows how to connect up all the components for power, if you follow the wiring in the schematic this is the real life representation. . I could explain this, but it's better to just follow the tutorial I did: http://www.instructables.com/id/Arduino-Modules-L298N-Dual-H-Bridge-Motor-Controll.. So now you've wired everything up, you have blue lights flashing everywhere and no blue smoke so you're good to go. Let's get on to making this bad boy work.. When I designed this I decided I wanted two things to happen, it look cool & it shows off the Ci20 as well as possible. I mean this is the point of the competition right?. I designed this robot to be completely 3D printable and the designs are all available below. Basically at this point go and print yourself the top, bottom & wheels. If you don't have access to a 3D Printer you can check out www.3dhubs.com to get someone to print it for you! You can check out the designs below. Here's a pretty render I did of the design to make sure that the ci20 was going to fit and be in pride of place. Once you've got it all printed you can glue all the parts in as above (or use masking tape if you're not feeling two confident. You will need an M4 bolt to hold in the motors.. The CI20 is the boss, the brains of the operation. Without it the robot will flounder. So what does it do?. Well the ci20 is going to use OpenCV to detect your face and then send appropriate commands over serial to the Arduino to get the motors going in the right direction.. Step 1: Install OpenCV. Like I've said throughout this guide, I wasn't trying to reinvent the apple-cart. I'm trying to build something that you can do at home and extend on with relative ease. So to install OpenCV go and follow this tutorial:. It talks you through step-by-step of getting OpenCV up and running.. Step 2: Run the code. The Face Tracking code will need compiling and running, run this command on the file on the Ci20.. The binary file to be created: FaceTracking: main.cpp > Source file: FaceTracking.cpp. Easy right?. After flashing the Arduino with the code in the attachments below. Plug the Arduino into the USB port on the CI20 and run your recently created FaceTracker. You will see a camera feed pop up (Oh yeah, plug in the webcam) and if you stick your face in the middle the wheels on the robot should start making it drive forward!. Now due to time constraints I didn't quite get it to do anything else, so here's a challenge for anyone that has got this far. There are two things you can add to make this bot super awesome:. Add a set of speakers and some sound files so that when the face is large enough on the screen it plays a sound file to the person. "
"Portable lighting station synchronized with music, with the Infineon CoolMOS C7 MOSFET.. Read up about this project on . Portable lighting station synchronized with music, with the Infineon CoolMOS C7 MOSFET.. Portable lighting station synchronized with music.. Always use technology to improve the world, if you are a black hat or gray hat hacker please abstain at this point......... or at least leave your respects to make me feel less guilty XP.. Nowadays for an organizer or independent musician, events, reunions and parties may not follow the traditional way of arriving, playing and leaving. Fans today require a higher level of entertainment, which led to organizers having to buy expensive lighting and sound control systems to achieve the level needed for the fans' show.. This type of lighting systems have a complex and expensive system of controls to handle each of the lights, most of the time it is necessary to set up a light show beforehand for each of the songs, increasing even more the costs.. Here are some similar products in the market, which are of very low quality:. None of the products available in the market sell for less than 40 dollars. They only allows the control of low power elements such as LED's, but if we really want to control high power elements we need a circuit that is capable of it without risking the controller, in this case an Arduino. . The purpose of the circuit is to switch from a digital signal of 0-5 V DC to a control signal of 120 V AC.. In the first stage of the circuit we have an Infineon 600VCoolMOS C7 MOSFET, which will allow us to control the optocoupler demanding the minimum current to the Arduino board, because the optocoupler requires at least 5 volts at 36mA to be able to drive. This is very close to the limit of the current that the Arduino board can supply, however the 600VCoolMOS only requires a signal of 5 volts at 60uA, thus showing an excessive improvement in the consumption that it requires from the board.. This consumption is extremely important because it gives us the possibility of being able to literally use any controller to perform this task due to its low consumption, thus not requiring more expensive drivers that can supply said power in their ports.. The MOSFET's operation is to ground the optocoupler diode, once this is activated it allows the flow of energy through the DIAC and this in turn allows the passage of current in the TRIAC connected to the lamp and igniting it in the process.. The other great advantage of using the MOSFET is the ease of increasing the number of drivers as in Image 1 or using more powerful drivers as in Image 2 without changing the design of the main circuit.. Different results in different boards: . Another solution to this project would have been to use relays, which have the function of performing this same task but mechanically, by generating a ""Click"" on each switch. The problem with this type of component is that if we use dimerizable lights or the switching frequency was larger, the relay could not perform this task, which the mosfet, optocoupler and triac can easily do.. For this project it is possible to make individual modules to be able to expand the number of bulbs or high voltage devices connected to the Arduino or to any other board. . You can also make a complete module for 4 AC outputs this in order to integrate the entire system on one PCB, both files are in the ""PBC Files"" folder in the Github or in the footer of the project.. To develop this circuit, we first tested each of the stages were carried out to demonstrate its effectiveness, the first circuit to be tested was the control of the bulbs by means of a button and safety gloves due to high voltage. (Please if you are to replicate the experiment use any safety measures possible, playing with live current is not wise).. For the second circuit since the Lamp control works well, a platform with LEDs was made to see how the Arduino controlled the lights to the rhythm of the music, the code is in the ""Arduino Code"" folder, the code is thoroughly commented.. Once we saw that the lights control worked, we connected all the components of the whole circuit in a protoboard, to control the 4 lights and connected it to the Arduino.. As you can see this was done in steps to manage safety, I repeat it is dangerous managing live 120V AC power so take any precautions into consideration.. With the circuit running, we decided to make control modules like the one shown in the image to not depend on any cable failing in the breadboard.. The board was made based on the one that is in the folder ""PCB Files"" however since we did not have transfer paper we had to make the vias with a sharpie. It is a permanenr marker so when you dip the plate in ferric chloride it survives, this process is the classic one for making homemade PCBs. You can get to know more about this process in the following link:. https://www.hackster.io/Junezriyaz/how-to-make-pcb-using-marker-531087. After making three aditional PCB's, we decided to put the entire circuit in a box, covering it and with 4 identical lamps so that this was a more aesthetic product and easy to transport.. And we are done! With this we have finished the light synchronization system for electrical elements (120 or 220 volts).. This project was carried out in order to demonstrate that the control of lights through microcontrollers can be efficient and cheap, since current systems at a much lower quality are sold at excessive prices and therefore not available to all.. And to showcase a creative and seldom seen approach to use the CoolMOS C7 MOSFETs provided by Infineon. All the information about the technology used, and direct references are in our wiki:. Wiki: https://github.com/altaga/MOSMusic-MM-/wiki. . "
"MAX86150 puts ECG and SPO2 on a single chip, opening new opportunities for calculation of pulse transit time and indirect blood pressure.. Read up about this project on . MAX86150 puts ECG and SPO2 on a single chip, opening new opportunities for calculation of pulse transit time and indirect blood pressure.. Measuring blood pressure traditionally involves a nurse or the doctor placing an inflatable handcuff to somewhere above your elbow, asking you to breathe in and out. They then use a stethoscope to understand the timing of the measure. If you happen to have one of those digital Blood pressure meters at your home, you already know the poor accuracy.  This is by no means a continuous or consistent measure of blood pressure !. Cuff less BP measurement  has always been a challenge. There are a wide variety of studies where several methods were developed for cuff-free BP measurement and one among them which showed great potential is PTT or Pulse Transit Time, which acts as an indicator of Blood Pressure. Pulse Transit Time in simple words is the time taken by a pulse wave to propagate from heart to the point where reading is taken, in our case the finger tip.. Maxim Integrated recently released the MAX86150, a biopotential sensor which gives both Photoplethysmogram (PPG) and Electrocardiogram (ECG) simultaneously sampled.  According to clinical studies, we can measure PTT(Pulse Transmit Time) which is a measure of our blood pressure using ECG and PPG waveforms.. At ProtoCentral, we are passionate about pushing the boundaries of DIY and affordable health. So we made a breakout board of this little sensor, which can be connected to any micro-controller using a simple I2C interface with easy-to-use ECG pads on which you can record ECG from your fingers.. You can plug in this breakout board just like how you plug in I2C devices to an Arduino Uno using jumper wires or use QWIIC connectors for a quick connection !. Arduino connect to  BreakoutBoard. 5V                           VCC. GND                        GND. A4                            SDA. A5                            SCL. You can get our Arduino libraries for the MAX86150 here or you can install it from the Arduino IDE's libraries page. Once installed, check out our examples:. . You can either use the Arduino IDE's built-in serial plotter utility or use something like ProtoCentral OpenView to look at the ECG and PPG waveforms.. This functionality is not currently built into the current version of our Arduino library, but will be in the future. Meanwhile, we used Python to calculate the PTT peak and foot intervals of each segment of ECG-PPG that is measured simultaneously by the MAX86150 breakout board. . Below is quick run through of the code.. . For each R peak detected, we discovered the following trench and peak of the processed PPG signal. The time intervals are obtained using the sampling frequency. . PTT is often inversly proportional to BP. Though there are several limitations of using PTT to measure ecg, this board opens a platform to work on those limitations. . Note: There is still work to be done to accurately calculate PTT intervals, watch this space for updates on this project. . "
"Electroplate conductive materials using an Arduino Uno and a relay.. Read up about this project on . Electroplate conductive materials using an Arduino Uno and a relay.. Electroplating is a process that uses an electric current to reduce dissolved metal cations so that they form a thin coherent metal coating on an electrode.. Reasons for electroplating: . This system will use a bucket with an electrolyte solution made of copper sulfate as well as copper pipe to plate metal objects. . I made my electrolyte solution by mixing copper sulfate and distilled water. The ratio of copper sulfate to water will determine how conductive the electrolyte is, and you should vary this ratio depending on your desired plating speed. The more conductive the solution, the faster the plating process will occur. I'm starting off with a ratio of 1 oz of copper sulfate to 2 cups of distilled water. . Once we have our electrolyte solution, we will need to set up the copper pipe and aquarium pump. I designed some clips in Tinkercad to hold the copper pipe along the side of the bucket and 3D-printed them on my Anet A8. I then inserted a tube from the aquarium pump through the copper pipe to the bottom of the solution. This will help agitate the electrolyte solution during the plating process. I also 3D-printed a mount to suspend the cathode in the center of the bath.. . The Arduino Uno is used along with a relay to toggle the power to electrolyte solution. The Uno will turn on the power for 10 seconds and then leave it off for 1 second. These values can be adjusted in the sketch as desired. . I have a simple button switch to enable/disable the plating process. . . I'm using a 4s lipo battery along with a buck converter to regulate the voltage because I don't have a bench power supply. I plan to test plating at different voltages to see what works best for my setup.. . . I started off by plating some coins. These were done at around 3 volts and were pulling around 600mA during the plating process. I plated each coin for about five to ten minutes and was surprised by how fast they plated.. . It works! But plating coins has been done many times before. So I ordered some conductive paint and started painting some 3D prints.. . First attempt was this wolf ring, which wasn't the best print but worked great as a first test.. The ring wasn't plating as fast as the coins because I didn't apply enough coats of the conductive paint. I plated this ring for about 4 hours. . Then I tried some more 3D prints but this time I applied an excessive amount of paint hoping that it would make the prints more conductive. . The prints are much harder to plate and it seems I still need to test some different settings to fine tune the process. . . . . It looks like I still need to test some different settings on the system but overall I'm very pleased with the results. . I hope you enjoyed this intro to electroplating and encourage you to give it a shot.. I would like to thank Elegoo for sponsoring this project. They sent out their Super Starter Kit which came with everything you need to get started hacking on Arduino projects. I used the following items from the starter kit:  Arduino Uno, prototyping hat, breadboard, relay, resistors, leds, button switch and jumper wires. . Get your kit today and start making!. https://www.amazon.com/EL-KIT-003-Project-Starter-Tutorial-Arduino/dp/B01D8KOZF4. "
"This is the 2nd tutorial on my ESP32 learning journey. Here, an OLED shows time and captured data by DHT sensor (temperature & humidity).. Read up about this project on . This is the 2nd tutorial on my ESP32 learning journey. Here, an OLED shows time and captured data by DHT sensor (temperature & humidity).. This tutorial is a continuation of a journey to learn more about this great IoT device, the ESP32.. In my last tutorial, IOT Made Simple: Playing With the ESP32 on Arduino IDE, we explored:. Now let's included an OLED to present locally the data captured by DHT sensor (temperature & humidity) as well the local time. . https://media.giphy.com/media/qdxLVaiWGooak/giphy.gif. We will use the Arduino IDE to program our ESP32, same way we do with the ESP8266 family.. Install Drivers:. It is important that you have installed on your computer the updated CP210x USB to UART Driver. Enter in this link: usb-to-uart-bridge-vcp-drivers and install the proper driver for your OS.. Install Library:. The novelty here is that Expressif itself in its GitHub will give us the proper directions for library installation: arduino-esp32. Follow the instructions for your OS. . After that, restart Arduino IDE and it's done! You must see several boards in the ""TOOLS"" menu. Select the appropriate for you. In general, the ""generic"" ESP32 DEV MODULE works fine.. We will start from the HW assembled in my last tutorial. We will go faster here, but if want more details, please visit: IOT Made Simple: Playing With the ESP32 on Arduino IDE. In short:. Install the DHT22 as shown (looking the sensor with the ""grid"" face you, count the 4 legs from left to right):. Then:. For testing the DHT, first install the libraries as described in the next step.. First, you need to have the Adafruit Library installed in your IDE. Go to their GitHub and download the updated version of this library: DHT-sensor-library. When I used for the first time I got a message:. After some digging, I found that it is also necessary to have the Adafruit Unified Sensor Library also installed. So, I did it from Arduino IDE Library Manager (see picture above). After that, everything worked fine, same as we use to do with Arduino and NodeMCU.. Let's do some tests with this sensor.  You can use the ""DHT tester.ino"" example sketch that it is included in the library, or do your own.. I wrote a simple code for test the sensor that can be downloaded from my GitHub: ESP32_DHT. For this tutorial, I will use a 128 x 32 I2C OLED display. In principle, once you have the library installed, the ESP32 would also work with a 128 x 64 OLED display. Once this device is a I2C display, you will need to connect 4 pins with the ESP32:. Now, install the library. We will use here the Daniel Eighhoen version. Open the library manager and search for ""OLED"". See the above picture. I have the 3.2.7 version installed.. Open SSD1306SimpleDemo in Examples Menu and replace the code:. with:. Below a GIF showing the Simple Demos partially working. Note that this demo was designed for a 128 x 64 display, so you realize that in my case, where I used 128 x 32, the graphics are shrunk.. https://media.giphy.com/media/key4A8EOkHKzC/giphy.gif . You can easily create and install new fonts on your display. I created a new font that can give me around 2 lines of 20 characters each on the 128 X 32 OLED display.. How to create it:. Go to SSD1306 Font Converter, a great tool also developed by Daniel Eighhoen. There, you must choose:. Press Create and voilá!  A ""C Font"" file is created in the proper window. . The above photo shows a new ""Hello World"", using this new font. A clean code can be download from my GitHub: ESP32_SSD1306_Test. Note that you must have the 2 files on your Arduino IDE if you use a modified font.. Let's now display on the OLED, the temperature, and humidity captured by the DHT22 sensor. In our loop() function, we will have:. The function getDHT() is the one used before. The new function here is the displayData(), that is shown below:. The above photo shows the final result, You can download the complete file from my GitHub: ESP32_DHT22_SSD1306. Usually, it is very important when capturing data with sensors, to also register the time, when it was collected. Let's use the NTPClient library for that:. Change the line:. by: . Enter with your WiFi network credentials. At Serial monitor, you must see the actual time. At basic version, a European time will be shown. At advanced version, you can change it.. Now, let's merge this TimeStamp code with the one developed before. The result is shown in above photos.. The complete code can be downloaded from my GitHub: ESP32_Time_Stamp_DHT22_SSD1306. On last step we put all together, having a fixed display with 3 information:. But, how we can have each one of that information be shown one at a time at the display?. We will need a ""page selection"" mechanism. There are several different mechanisms to be used. Usually with multiple buttons, selecting menus. Just for fun, let's try something not usual here. The potentiometer!. We will turn the potentiometer like we do with a radio dial, and depending on the value read, we will define one specific ""display"" to be shown at OLED. Let's define 4 possible displays:. The Analog Input can read 4,095 different values. We need only 5, so let's define ranges for that:. Let's define a int variable that will receive as content: 0, 1, 2, 3, 4 5, depending of screen to be shown:. Now we need to create a function, getDisplay(), that will read the value of potentiometer, returning the correct display number (displayNum will be a local variable inside this function). The function will look like:. And the displayData() function, will display the selected display (or screen):. Both functions will be included in our loop() function:. There is a lot left to be explored with this great IoT device. We will return soon with new tutorials! Keep following MJRoBot tutorials! As always, I hope this project can help others find their way in the exciting world of electronics, robotics, and IoT!. Please visit my GitHub for updated files: ESP32 SSD1306. For more projects, please visit my blog: MJRoBot.org.. Saludos from the south of the world! See you at my next tutorial!. Thank you,. Marcelo. "
"Build a beautiful Holiday Shadow Theater and control the animated scene with your phone.. Read up about this project on . Build a beautiful Holiday Shadow Theater and control the animated scene with your phone.. This project uses an Arduino 101, a strip of addressable LEDs, foam-core and cardstock paper to create a phone-controllable animated Shadow Theater. The electronics are used non-destructively, so you can easily use them later for another project.  Here's a handy Sparkfun wishlist with 99% of the electronics.. How it works: . One strip of addressable LEDs is wrapped over a piece of foam-core in the middle of the Shadow Theater.  The lights near the bottom are slowly fired in sequence and shine through pinholes to create an animated shadow.  Lights further up are channeled into the buildings on top, and the last LED on the strip is used to shine on the whole scene, creating the main shadow.  . The Arduino 101 has a Bluetooth radio built-in, and I use a quick prototyping app called Blynk to remotely control the scene.  In the example code you can control the colors in the buildings, turn on a flickering fire, and control the brightness of the main shadow light.. . Step 1. Collect the end harness from your LED strip by cutting about 1 cm from the end of the lights. Strip the wire ends.. Step 2. Break apart the bent header pins that came with your voltage regulator, and solder two of them to the ends of the green and yellow wires.  This will let you easily plug them into the pins of the Arduino 101. . Step 3. Next solder the red wire to the VIN terminal on the Voltage Regulator, and solder two straight headers into the GND and VOUT pins as shown.. Step 4. Now connect the barrel jack adapters. First strip the ends of the wires coming from your battery case, then mount them in the terminals of the male barrel jack and tighten with a screwdriver. RED goes to the (+) terminal, BLACK goes to the (-) terminal.. Next connect the female barrel jack adapter onto to the loose wires coming from the beginning of the LED strip. YELLOW goes to the (-) terminal, and RED goes to the (+).  . Step 5. Now connect your harness to the Arduino 101. The GREEN wire goes to PIN 6, the YELLOW wire goes to the GND pin near #13. . With the two header pins on the voltage regulator, GND goes to GND and VOUT goes to the ""Vin"" pin on the Arduino 101.  Don't get this wrong!  Plugging in backwards leads to smells and burns. I know this. . Print the foam-core pattern on regular printer paper (4 sheets) and print out the cardstock pattern on cardstock paper (4 sheets.) . Step 1 . Take the printed foam-core pattern pages and use them to cut out your foam-core pieces.  You can lay a pattern on the foam-core, then lightly trace the outline with a hobby knife to transfer the lines through.. Step 2. Once you have the pieces cut, start by assembling the LED strip holder like so:. Now take your LED strip and attach the first LED to the bottom with tape or hot glue, and wrap your LEDs as shown.  The idea is to keep the LED strip intact.  It doesn't need to be a super tight wrap. . Once you've made three wraps, leave the tail end free and secure the top with tape or hot glue.. Step 3. This LED strip has addressable LEDs, meaning you can more or less say, ""hey, you in the middle, turn red!"" But they don't answer to ""hey you,"" so you need to know their numbers. . The LEDs below the crease will shine out the back of the Shadow Theater and be used for animation. In the example below, my animation lights are 0, 1, 2, 20, 21, 22, 40, 41, 42. Two LEDs in the top section will shine up into the houses.  I use LED 23 to shine up  into the back house, and 25 to simulate firelight in the front houses. . Count out your LEDs and draw a simple reference map that makes sense to you so you can enter appropriate LED numbers into the code later. Remember to start your count at the beginning of the strip starting with zero, because computers.. Step 4. Glue the LED holder down onto the foam-core bottom piece.  Position it as shown and so the wide stripe of lights is roughly centered lengthwise with the base.. Now add the curved foam-core side pieces on the ends with hot glue as shown.. Step 5. Now add the light dividers and the foam-core top piece. The light dividers keep the animation lights from spilling up into the houses, and vice-versa. Position the largest divider close to the crease in the LED holder, and position the smaller divider above it so at least one LED is between them (see photos below.)  Position the top piece so it's square with the base as shown in the slideshow below and secure with hot glue.. Step 6. Attach the end of the LED strip to the front top edge with hot glue so the last LED in the string can shine on the scene. This is the main shadow LED.. Connect a USB programming cable to the Arduino 101, and connect the LED strip, battery pack and Arduino 101 all together (leave the power switch on the battery pack to ""off.""). You'll need the Arduino IDE installed on your computer, with the Intel Curie Core (see Arduino 101 getting started.)  You'll also need to install the Adafruit Neopixel library, and the Blynk library.  . If you're new to Arduino, it's a good idea to run some basic example sketches to be sure everything's working OK.  . Step 1. Install the Blynk app on your phone. . Blynk is a great tool for rapid proof-of-concept building and remote controlling your Arduino 101. BLE support still has some bugs, but Blynk is by far the fastest way I've found to control any Arduino 101 project from a phone.. Step 2. Load the example code in your Arduino IDE and change the LED pixel numbers if necessary using the map you made earlier. . The program animates through the LED numbers in the ""pos[ ]"" array to create the illusion of falling snow. Change these numbers if needed to match your setup, (the animation LEDs are the ones below the crease on your LED holder.) Arrange the numbers in the order you want them to fire. The lights project through pinholes to make the ""snow,"" so lighting from the bottom to top will make snow appear to fall down, left to right will make snow appear to blow from right to left.. Next set how many pixels will animate. Then set the pixel that is at the end of the strand shining on the scene (on a 60 pixel strip, this is pixel #59.). Choose a pixel for the lights that will shine up into the rear house.  This pixel should be between the two light dividers.. Finally, set the number of the pixel that will be shining up into the front houses to be the ""fire pixel.""  This pixel should be just in front of the smaller light divider. . When the code above is changed as needed, you can compile and upload to your Arduino 101.  Once the code is successfully uploaded, disconnect your USB cable and turn the power switch on the battery pack to ""on.""  You should see the shadowPixel turn on, and the animation pixels will light in sequence. The house and fire pixels will be off until you control them with Blynk.. Step 3. Loading your Blynk app:. Open the Blynk app on your phone and press the ""scan"" button near the upper right.  Scan this QR code and the controller interface should automatically load and you'll be all set.. When loaded, the interface should look like this:. If you prefer to build your Blynk interface manually instead of scanning the code above, start with with a BLE widget and 3 sliders set to output 0-100 to VO, V1 and V2. . Step 4. Connect over BLE to your Arduino 101. Tap the BLE widget and if your Arduino 101 is powered on, you should see ""ShadowTheater."" Connect, then hit the ""play"" arrow icon in the upper right to control your project.  You may need to reconnect after your phone goes to sleep.. OK all done with the hard stuff, now on to crafting!  You can turn everything off until the final reveal.. Step 1. Find your four printed card-stock sheets. Using a hobby knife and fresh blades, cut out the background silhouette.  Change the blade frequently! Cutting with a dull blade is super frustrating. I changed the blade 3 times cutting out this silhouette. . Step 2. Cut out the house pieces and attach the backs with hot glue.  The printed sides should face back, so you can't see any ink from the front.  Scroll through the photos below.. . Step 3. Add the houses to the stage.  You can use hot glue or tape. Try to close all gaps so the light goes into the houses but doesn't spill around the sides.. Step 4. Now fold the sides of the silhouette sheet and attach the bottom to the back edge of the stage with hot glue. (face the printed side away from the viewer.). Step 5. Cut out a snow scene to project on the wall behind the shadow theater.  You can use pins or toothpicks, or cut out intricate shapes.  Once the sheet is done, hot glue it to the curved edges to create a projection surface.. Step 6. Attach the left side and front sheets with hot glue. . Loosely attach the right side sheet with tape, so you can still get at the inside to turn the power on and off at the battery case.. All done!  Find a dark area with a wall nearby to try it out!  When you first turn the power on, the Shadow Theater should cast a scene shadow and falling snow.  With the Blynk app, you can control the main light, and the lights in the buildings. . "
"This project can add two 3-digit binary numbers to turn into a 4-digit binary number. Math homework solved!. Read up about this project on . This project can add two 3-digit binary numbers to turn into a 4-digit binary number. Math homework solved!. The first thing that came in to mind when I started learning about electronics is how do computers work? So I did some research and found out that computers do really simple things, just very, very fast. One of them is adding two numbers together, so I decided that I would make a calculator with an Arduino Uno.. The finished product worked very well, capable of adding two numbers nearly instantly.. If wired and coded correctly, this calculator should be able to add two numbers both up to 7 and produce a sum up to 14. Math homework solved!. "
"The objective is to find an easy way to implement RS485 on an Arduino Uno, then to adapt it to an ESP8266.. Read up about this project on . The objective is to find an easy way to implement RS485 on an Arduino Uno, then to adapt it to an ESP8266.. The anemometer will be a part of a bench of measures that will be added to the wind turbine MPPT regulator. This bench of measures will work with a ESP8266, for its Wi-Fi availability.. For the moment, the objective is to find an easy way to implement RS485 on an Arduino Uno, then to adapt it to an ESP8266, the Wemos Lolin D1 mini for instance.. The code result seems very simple and cool, but I spent many and many hours to find a way to get something from this wind sensor.. So I think it will interest everyone that have to implement RS485.. "
"The Sump Level Monitor will determine sump levels, display them locally and send a 0-5vdc signal, relays output or I2c output.. Read up about this project on . The Sump Level Monitor will determine sump levels, display them locally and send a 0-5vdc signal, relays output or I2c output.. The sump level monitor was built to work with an Ecobee RSM-01 input board I have in my daughter's home or my Home Monitor project.  I added a relay to allow it to stand alone.  I wanted something I felt would be more reliable and easier to install than an ultrasonic sensor.  To this end, I started looking into pressure sensors and finally came across Freescale MPXV5010DP.  It has a 0-5vdc output for 0-10kPa, which would be about 1020mm of water head.. Since I wanted local indication, I chose an OLED module to use in the design.  Cheap, bright and this one had a two color screen.  To provide interface, I added a relay for a dry contact output.  I added a DAC (digital to analog converter) for a 0-5vdc output with more power than the MPXV5010DP sensor, this will also protect the sensor from possible wiring damage.  Since I am using I2C communication, all is need is software changes to supply data to another Arduino.. I designed and had built a custom board for ease of connections.  It provides enough flexibility for different configurations.. The sensor is connected by tygon tubing to a copper pipe that gets routed down into the sump.  This allows for some discretion as to where to mount the monitor and keeps it away from the water itself... "
"In this project we show how we made a single-lead ECG monitor for  heart-rate variability using the MAX30003 and an Arduino Uno. . Read up about this project on . In this project we show how we made a single-lead ECG monitor for  heart-rate variability using the MAX30003 and an Arduino Uno. . Have you felt it when your heart ""skips a beat"" OR a ""flutter"" in your heart? If you're wondering what it was, its called an ""arrhythmia"". Not to worry, general heart-rate variability (HRV) is normal and dependent on emotional arousal, although some types of arrhythmias can indicate cardiac anomalies.  . What we want to present in this article is a unique and easy way to measure ECG as well as R-R intervals with surprisingly high accuracy.. ECG/EKG (Electro-cardiogram) is an electrical signal taken from electrodes connected to the body and its an electrical signal. Compared to optical means of heart rate measurement, the ECG still provides the most accurate heart rhythm.. A single ECG waveform is made up of the P,Q,R,S,T points as shown in the picture below. Each of these is of significance in a detailed cardiac study and is not possible to explain everything here. Of particular interest to us relevant to this project is what is called the ""QRS"" complex. Part of this QRS complex is the ""R"" apex point which corresponds to the depolarization of the right and left ventricles of the heart.. What we are now interested in is the distance between two R peaks in a continuously displayed or recorded ECG measurement. The time it takes for the heart to produce two consecutive R peaks is known as the R-R interval and which is of significance for HRV studies.. The R-R interval is generally used to detect several different kinds of arrhythmias (which are quite a few) and not all of them will not be discussed here.. Besides the clinical significance of heart-rate variability, there is a physiological significance too. Reduced HRV is also an indicator of parasympathetic and sympathetic nervous system activity, which includes emotional arousal and other functions of the autonomous nervous system. This means that R-R intervals can be indirect ""markers"" for phycological activity.. There are several ECG AFE chips available including those from TI and Analog Devices. ProtoCentral also carries the popular ADS1292R-chip based breakout board. But the new features of the MAX30003 have us all excited:. We used the ProtoCentral Single-lead ECG monitor breakout board based on the MAX30003 single-channel AFE chip from Maxim Integrated to acquire ECG using two electrodes connected to the chest.  This board is connected to an Arduino Uno using a standard SPI interface. Connections are made as given in the following table:. Unlike the traditional 3-electrode system which requires a driven right leg (DRL) electrode for common mode rejection, the MAX30003 is very unique in the fact that it works off of 2 electrodes only, making it easier to use.. The Arduino sketch for use with this hookup reads the real-time ECG and R-to-R interval data from the MAX30003 over SPI, puts it in a data packet and sends it over the Uno's USB-UART interface. This Arduino sketch is available in the links at the end of this article.. We also made a GUI with processing that takes this data from the serial port and plots the data in real-time with also the R-to-R interval time (in milliseconds) and the instantaneous heart rate *based on the current R-R value. . The R-to-R interval displayed here is the time between the last detected R peak and the previously detected R peak to get an instantaneous value of the R-R interval as well as heart rate. The instantaneous heart rate would be different from the regular heart-rate(if you would use a medical monitor) in the fact that generally heart-rate is calculated from a window of 5-10 secs of stored ECG data, rather that taking the immediate time.. Check out our video for the device in action. . We had a good experience interfacing with this board and assured that it can save the user a lot of time otherwise writing robust R-R detection algorithms. We have done testing to show that it is quite robust, although more testing has to be done to test the device for robustness.   . We would like to see what can be made with this board, including internet-connected arrhythmia monitoring patches and even some kind of emotion monitor that uses the parasympathetic nervous system's correlation with R-R to detect change in emotions. We will soon post another Hackster article about the performance of this device in the presence of motion artifacts. Please leave your ides in the comments below. . "
"Wearable for monitoring the health condition of patients who have suffered or are in risk of having a cardiac arrest.. Read up about this project on . Wearable for monitoring the health condition of patients who have suffered or are in risk of having a cardiac arrest.. PHA will help the city of Las Vegas to meet its Community Risk Reduction goal and increase survival from sudden cardiac arrest. . Each year, approximately 300,000 people in the United States experience an out-of-hospital cardiac arrest (OHCA). An OHCA is defined as cessation of cardiac mechanical activity that occurs outside of the hospital setting and is confirmed by the absence of signs of circulation. . Whereas an OHCA can occur from non-cardiac causes, the majority (70%--85%) of such events have a cardiac cause. Cardiac Arrest Registry to Enhance Survival (CARES) data confirm that patients who receive CPR from bystanders have a greater chance of surviving OHCA than those who do not. . The mean age at cardiac arrest is 64.0 years. On average:. Although 36.7% of OHCA events were witnessed by a bystander, only 43.8% of these arrests involved persons who received bystander CPR, and only 3.7% of those persons were treated with an AED before the arrival of 911. . Factors positively associated with short-term survival after OHCA are:  . More than 65% unwitnessed  arrest occur at home and probably without any person close by to help (bystander witness). . This personal assistant could stay close to potential cardiac arrest patients and provide guidance and/or execute  the critical actions to improve chances of survival (chain of survival):. PHA is a wearable that can detect when people faint or fall (potentially due to a cardiac problem), record messages, and automatically call for 9-1-1 services providing the address, and send alerts to neighbors previously trained in CPR technique and or they can be guided through it with Alexa's assistance. . Alexa can also be activated using voice commands such as “Alexa, I need help, please call 911,” and a voice with a pre-recorded message will be made to both medical services and emergency contacts (neighbors and relatives).. PHA is a wearable based in Curie Intel processor that collaborates with the Amazon Echo Alexa to monitor people´s health.. Using a 6-axis accelerometer, PHA can detect when a person faints or falls, and automatically sends an alarm request to medical services and previously registered emergency contacts. The person can also request help using an Alexa skill which is activated with the command ""Alexa, help. Call emergency."". In case that the person is not injured when they fall, the emergency call could  be cancelled within the first  minute, using the command ""Alexa, I am OK."". Slideshow Presentation via Google Drive . "
"This project is a platform for drinking water monitoring and analytics, consists of IoT device, cloud, and mobile and web app.. Read up about this project on . This project is a platform for drinking water monitoring and analytics, consists of IoT device, cloud, and mobile and web app.. This project focuses on one of the most vital nutrient for our body, drinking water. In Indonesia, the term ""gallon"" refers to an infrastructure for drinking water: water dispenser, and replaceable water bottle, as apparently the water bottle measurement is in gallon unit.. Detail background and thoughts behind this project are described in my project idea here, that I use for idea submission to World Largest Arduino Maker Challenge. The key objective of the project is building solution around the new Arduino MKR1000.. The project is a simplified version of my company’s real product called HomeX - Smart Gallon. Please note that the product itself is copyrighted.. We decide to share the project's source code and design, as an effort to share to the community, and it's intended to showcase:. Before telling much about what it's all about, let's take a look this video:. How It Looks Like. IoT Device. The device prototype case is made from clear acrylic for now to show the internals. It is bigger than it should be, as many components, especially MKR1000, are still put on board through female header.. Web-based Dashboard. For monitoring and controlling devices from web browser.. Live website: http://home-x.cloudapp.net:9000  . Test account:. *Please note that the device's dashboard may not show any data if the actual device is not turned on.. Windows 10 UWP App. An app installable on Windows 10 tablet, desktop, and phone, used to manage Gallon devices, monitor water level and other data, and also set actions to perform upon triggered low water level. . For signing-in to the app, you can use the same test account as dashboard.. System Architecture. Such a simple use case doesn't mean it is simple under the hood. . IoT Device. Key components:. Capacitive Sensor. I want to highlight the capacitive sensor. It's used to measure water level inside the bottle by measuring capacitance value at the sensor electrode upon water existence. For measuring capacitance, we leverage MPR121 module, that supports up to 12 electrodes. By using this kind of sensor, it means that the sensor doesn't have to be physically in touch with water like the one with floating mechanism, or tube-based.. Software. Developing software for the IoT device means developing firmware for Arduino MKR1000. It's developed using Arduino framework for specific platform target: ""hackster.io - MKR1000 build"". . All source code is published on GitHub at this link. For coding it, I don't use official Arduino IDE, instead I use Arduino Eclipse IDE. To properly open and build the code project, make sure to download and install the Arduino Eclipse IDE V3.. Used 3rd parties libraries:. Azure Services. Azure is the heart of the platform. Beside for ingestion device-to-cloud telemetry data, it's also used for sending cloud-to-device messages (or commands), and later for further analysis (hot or cold path) of ingested data stream. Following Azure services are used:. a. Azure IoT Hub. It's crucial component that's front-facing of IoT devices, as it's used for ingesting data stream from IoT devices and sending command to them.. Communications between Azure IoT Hub and IoT devices are done entirely with native MQTT protocol over secure communication based on TLS/SSL. At the time of developing this project, Azure IoT Hub already supported MQTT v3.1.1. More on MQTT support in Azure Iot Hub is here.. Azure IoT Hub publishes Event Hub compatible endpoint that's later used by Azure Stream Analytics for further analysis. The endpoint is also used by Node.js-based backend for telemetry data storage and relay to client apps (UWP and web app) through web socket.. b. Azure Stream Analytics Job. In this project, Azure Stream Analytics is used to process data stream received by Azure IoT Hub in realtime. One of processing that's currently performed is for knowing the rate of water level changes.. Fortunately, Azure Stream Analytics Job already supported input directly from IoT Hub. As for output, currently Azure Table Storage is used for now, but you can use another, Power BI for example. . As for analysis query, for now, I use this query:. It seems that the query still can be improved. . For reference, here's the payload sample ingested by IoT Hub:. Applying that query and using that input data sample, we can get the output something like this:. From that output, now we know how fast the water level change from one percentage to another. Further analysis will reveal how soon the water in the bottle will be fully empty.. c. Azure Storage Account. For current project, Azure Storage Account, especially table storage, is used as the output of Azure Stream Analytics Job.. d. Azure Virtual Machine. Virtual Machine is used to host:. Initially it's considered to deploy those on Azure Websites. But for simplicity and reducing cost, we use VM for now.. Please refer to attached project repositories:. And read the README file inside them to properly deploy the software.. Web-based Dashboard App. We leverage Freeboard for creating the dashboard. It's open source project that provides ready-to-use and customizable framework for creating dashboards.. As Freeboard only provides HTML-based frontend framework, we still need to create the backend based on Node.js for:. Some key Node.js modules used:. One thing to note that the data displayed on dashboard doesn't directly coming from Azure IoT Hub. Although Freeboard supports data source from MQTT broker and Azure IoT Hub does support MQTT, but that requires us to set the MQTT password which is device's SAS token on dashboard itself! So instead, data from IoT Hub relayed to dashboard via web socket by Gallon Watcher backend, and that's why data source on Freeboard dashboard is socket.io.. Windows 10 UWP App. As its premise, Universal Windows Platform allows to develop app targeted for Windows 10 tablet, desktop, and phone based on one codebase. Apparently, we can achieve that by creating this Visual Studio project.. Similar to web-based dashboard, UWP app doesn't receive data directly from Azure IoT Hub, but instead from Gallon Watcher backend via web socket.. Used  libraries that you can install using NuGet:. To properly replicate the system in your own environment, especially from software-side, please refer to README file inside each repositories.. As for deploying used Azure services, please follow deployment guideline for each services. No special consideration needed. Some needed parameters:. Initial state of IoT device, after the first time MKR1000 is flashed, is not connected to internet. We can setup the device's WiFi connection by using UWP app provided. To sign-in to UWP app and Web-based dashboard, use the provided test account.. Few areas to improve:. This project has successfully implemented water level monitoring solution, that leverages Arduino MKR1000, Microsoft Azure services, Microsoft Universal Windows Platform, and Node.js. There are some areas of improvement as noted above.. This project also shows the proper development technique and toolset for developing Arduino software, for the perspective of software developer. My 19 years coding experience really plays much here :). That's it. Enjoy.. "
"Real-time visibility and control of water, process farming, weather & wells - from anywhere.. Read up about this project on . Real-time visibility and control of water, process farming, weather & wells - from anywhere.. . . Sensor Messages. Message received from client. Info/Sensor/state?hum=80.30&temp=23.40&soil_humidity=25&water_level=19.74&total_mili_litres=0.26&ferti_level=18.73&total_ferti=1.27&watering_status=0&ferti_status=0. {""MessageTime"":""20190611T17:55:32.1632024+00:00"",. ""Temperature"":23.4, ""Humidity"":80.3, ""WaterLevel"":19.74, ""SoilHumidity"":25, ""TotalMiliLitres"":0.26, ""FertiLevel"":18.73, ""TotalFerti"":1.27, ""FertiStatus"":0, ""RelayStatus"":0,. ""MessageType"":1, ""ControllerType"":1, ""Action"":""state"", ""Args"":[{""Key"":""hum"", ""Value"":""80.30""}, {""Key"":""temp"", ""Value"":""23.40""}, {""Key"":""soil_humidity"", ""Value"":""25""}, {""Key"":""water_level"", ""Value"":""19.74""}, {""Key"":""total_mili_litres"", ""Value"":""0.26""}, {""Key"":""ferti_level"", ""Value"":""18.73""}, {""Key"":""total_ferti"", ""Value"":""1.27""}, {""Key"":""watering_status"", ""Value"":""0""}, {""Key"":""ferti_status"", ""Value"":""0""}]} . Client Messages. Command/watering?state=true\n. Command/watering?state=false\n. Command/watering?state=true&amount=3\n. Command/fertilization?state=true\n. Command/fertilization?state=false\n. Command/fertilization?state=true&amount=4\n. Command/autoFarmer?state=true&min='+minHumidity+'&max='+maxHumidity+'\n. . . . . "
"This tutorial shows how to control an array of 8x8 LED matrices using an Arduino Uno, to create the face of a robot.. Read up about this project on . This tutorial shows how to control an array of 8x8 LED matrices using an Arduino Uno, to create the face of a robot.. . This project shows how to control an array of 8x8 LED matrices using an Arduino Uno. This guide might be used to create a simple (and relatively cheap display) for your own projects. This way you might display letters, numbers or custom animations.. A 5 matrix array used in one of our robot projects (""Robô da Alegria"") is used as an example to illustrate this technology. You might be interested in learning more about this project in the following links:. . Notice that you'll need two types of jumpers: female-to-female for the connection between the matrices and a male-to-female for the connection of the first matrix to the Arduino.. The number of components may vary according to the structure you have in mind.. Connect all the components according to the schematic. You'll need some jumper wires to connect the first matrix to the Arduino, and each matrix to the next one on the array.. Arduino Pinout:. You might also want to arrange each display in a given position. For that you might use the acrylic sheet, some screws and nuts (four for each display) and place each component in position. No tool is needed to assemble the circuit, but you will need a screwdriver if you wish attach the displays to a surface. In our example, five displays were placed in a face pattern (two eyes and a mouth). Plug the USB cable to the Arduino Uno board and proceed to the next step.. With the latest Arduino IDE version installed, add the LedControl.h library, which is used to control the LEDs. Download, compile and upload Arduino the code, which is divided in 4 parts:. setIntensity was used to limit LEDs brightness. It was set as 1 (in a scale from 0 to 15) in order to reduce the power consumption of the modules to a level acceptable by the USB port.. After the upload keep the Arduino connected to the USB port of your computer and open the Serial Monitor. The code is programmed to display a set of emoticons on the LED face, depending on the message received by the serial port. The following commands were configured:. For the eyes. For the mouth:. Type a pair of characters (on for the eyes and other for the mouth) in the serial monitor, press enter and the displays will be updated according to your command.. You might change the drawings (add new faces for instance) or change the control method (including a Bluetooth or Wi-Fi interface), according to your needs.. Have fun!. "
"Let us predict the changes around us with Arduino. Read up about this project on . Let us predict the changes around us with Arduino. Recently my college had a small science exhibition .So i was requested by my teacher to present a project in the college to teach young students about electronics so basically i had two days to make some thing.. As the climatic conditions over here are varies a lot and recently the temperature is somewhere around 34-40 degree Celsius. So i decided to make a weather station.. So what does a weather station do  ?. A weather station is a device that collects data related to the weather and environment using many different sensors. Sensors like . The aim is to make a portable weather station. Features it should have. So here is the thing we will need for the project. I actually started the project on My UNO but then i decide to switch to compact solution.. I had the nano with me at that moment so had to go with it , would love to use micro,because it is the smallest.. Anyways leaving those things,talking about budget and parts here is the list .. For tool end you will need. And Also some time. Measuring the temperature can be made using different sensor.. The popular ones are DHT22,DHT11,SHT1x. So basically, lets understand how this sensor are different from each other and why i have used DHT22 in the first place.. AM2302 output calibrated digital signal. It applys exclusive digital-signal-collecting-technique and humidity sensing technology, assuring its reliability and stability. Its sensing elements is connected with 8-bit single-chip computer.. Every sensor of this model is temperature compensated and calibrated in accurate calibration chamber and the calibration-coefficient is saved in type of programme in OTP memory, when the sensor is detecting, it will cite coefficientfrommemory. Smallsize&lowconsumption&longtransmissiondistance(100m)enableAM2302tobesuitedinallkindsof harshapplicationoccasions.Single-rowpackagedwithfourpins,makingtheconnectionveryconvenient.. Lets see some pros and cons of the three.. DHT11. Pros：No soldering needed. Cheapest among three. Get stable output quickly. Transmission over 20m. Strong interference. . Cons：Library! No resolution option. Errors: Temp+/-2°C; Humid+/-5%RH. Inadequate measuring range(0-50°C). Applications：Gardening, Agriculture. . DHT22. Pros：No soldering needed. Adding a few bucks to DHT11 and get an upgrade. Smooth curve. Smallest error. Large range. Transmission over 20m. Strong interference.. Cons：Can be more sensitive. Slow temperature tracking. Library needed. Applications：Environmental Monitoring.  SHT1x. Pros：No soldering. Smooth curve. Small error. Quick response. Low power consumption. Auto sleep. Extraordinary long term stability and consistency. . Cons：Two digital interfaces. Humidity error. Same measuring range with DHT11. Library needed. Applications：Heavy duties and longtime installations.   Following are three relatively cheap choices.. Connection. Vcc to 5V or 3.3V. Gnd to Gnd. Data to pin 2 of arduino. The bmp180  a barometric pressure sensor with an I2C (“Wire”) interface.. Barometric pressure sensors measure the absolute pressure of the air around them. This pressure varies with both the weather and altitude.. this bmp180 module came with a 3.3 v regulator 662k which i blew up to some stupidity so i attached a wire to by pass the whole vcc directly to the chip.. Note : On Doing so i restrict myself from using only 3.3 v ,using voltages above it will ruin the device.. Other model may not have the 662k voltage regulator. so check thoroughly .. Ok coming back lets  connect the sensor to the arduino .. The sensor connects to the i2c bus of the arduino which of nano and Uno are . SDA==>A4. SCL==>A5. VCC==>3.3V. GND ==> GND. Lets talk about pressure a little  and how does pressure measure altitude and temperature.. The atmospheric pressure at any position is not constant.The complex interaction between the earth’s spin, axis tilt, and many other factors result in moving areas of higher and lower pressure, which in turn cause the variations in weather we see every day. By watching for changes in pressure, you can predict short-term changes in the weather.. For example, dropping pressure usually means wet weather or a storm is approaching (a low-pressure system is moving in). Rising pressure usually means that clear weather is approaching (a high-pressure system is moving through).. Atmospheric pressure also varies with altitude. The absolute pressure in Mt .everest base camp (5,400 )is lower than Delhi(216). Since Abosolute pressure is difficult to directly compare pressure measurements from one location to another.we use the relative pressure .that is sea level pressure.. Measuring altitude . The average pressure of the atmosphere at sea level is 1013.25 hPa (or mbar). This drops off to zero as you climb towards the vacuum of space. Because the curve of this drop-off is well understood, you can compute the altitude difference between two pressure measurements (p and p0) by using this equation:. alti=44330*[1-(p/p0)^(1/5.255)]. If you use sea level pressure (1013.25 hPa) as the baseline pressure (p0), the output of the equation will be your current altitude above sea level.. Precautions. Give it air: Remember that the BMP180 needs access to ambient air to measure its pressure, so don’t put it in a sealed case. Providing a small vent hole should be adequate.But not too much air: On the other hand, exposure to fast-moving air or wind can cause momentary pressure variations that will affect your readings. Shield the device from strong air currents..  Keep it cool: Because an accurate temperature reading is needed to measure the pressure, try not to expose the device to rapid temperature changes, and keep it away from nearby hot parts and other heat sources. . Keep it dry: The BMP180 is sensitive to moisture. Don’t submerge it or allow it to contact liquid water. . Don’t blind it: Surprisingly, the silicon within the BMP180 is sensitive to light, which can enter the device through the hole on the top of the chip. For maximum accuracy, shield the chip from ambient light.. So we start by making the header for the nano. we actually cut the female headers and then file them to make them look as if they were originally that size.we then solder it. then we made the headers for DHT22 sensor. . it needed a 10k resistance to be connected from the data to ground. we then soldered everything.Then it was time for the bmp180 we added the header in a similar manner.We used 3.3 V as the power .We connected all the i2c bus. . We added lastly the display  we are using i2c lcd so w used the same bus we used for the bmp180 module.. (There is a fourth slot in which i wanted to add rtc module later to also incoperate clock in the machine ). Wait ..................... Download the libraries. bmp180 . https://github.com/sparkfun/BMP180_Breakout_Arduin.... Dht22 library. https://github.com/adafruit/DHT-sensor-library. To install a library in arduino check this link. https://www.arduino.cc/en/Guide/Libraries. I have used arduino 1.6.5 so the code will work for this version for sure , also may be for higher if any case it does n't work do use 1.6.5 as the base version.. . "
"A cheap version of an Arduboy clone with which you can play a number of original Arduboy games.. Read up about this project on . A cheap version of an Arduboy clone with which you can play a number of original Arduboy games.. . Arduboy is a miniature game system the size of a credit card. It comes installed with a classic 8-bit game and can be reprogrammed from a library of open source games available online. Arduboy is open source so you can learn to code and create your own games. The original version is based on ATmega32U4 microcontroller and 128x64 Pixels serial OLED display.. The console whose construction is represented below is made up of Arduino Nano and the I2C version of the OLED display which can be much easier to find at a lower price. You can download the necessary libraries and code at:. https://github.com/harbaum/Arduboy2. If you own a 3D printer, you can also download .STL files of a possible box option in which the console is installed. A detailed installation guide is available on the same site. It is powered by an Arduino Nano with one lithium-ion battery of 3.7v and it works quite well..  I tested many games on this console, all of which function great:. - ArduBreakout. - Pinball. - Shadow-Runner. - Snake. - VIRUS-LQP-79. - Nineteen43. and many more.... The schematic is shown below. . As an example, I am presenting the code to ArduBreakout game, but you can download any other game on the Arduboy's site compatible with this version of console.. "
"MoveThisWay is an autonomous robot that transports heavy payloads on programmable paths with obstacle detection capability.. Read up about this project on . MoveThisWay is an autonomous robot that transports heavy payloads on programmable paths with obstacle detection capability.. Purdue ECE Senior Design Fall 2019. MoveThisWay is an autonomous robot that can carry heavy payloads. Its main use case is in a varying office or industrial environment where there are clear paths for this robot to take. The robot is remotely programmed by the user and stores paths into its memory, making its routes autonomous and repeatable. MoveThisWay features sensors to avoid collisions and keep itself and its environment safe. It also has indicators to display the robot’s current movements, errors, and the battery level.. The goal of our team project was to create an affordable solution for businesses where robotic assistance is desired but out of reach. All parts used in the project are both easily attainable and relatively affordable. . . . . "
"If you plan on a vacation, here is a great project to track the temperature and soil moisture of your Plant using dweet.io and AWS IoT. . Read up about this project on . If you plan on a vacation, here is a great project to track the temperature and soil moisture of your Plant using dweet.io and AWS IoT. . Picture this you are going on a vacation for a week or so and are worried about your house plant at home.Here is a great project to under take a week before you head out for your vacation.. Build yourself a plant monitoring and notification system with the following feature. In addition, I have designed a 3D printed enclosure, to house the Arduino Yun , grove shield and sensors.. If you are interested to check out how my plant is doing here is the link . http://dweet.io/follow/PlantMonitorTorontoON. . . Here are the steps you will need to perform to complete the build . #1 Build the circuit  using the Grove connector shield as shown in the schematic section of the project, basically connect the . #2 3D print the STL files , attached in the custom part and enclosure section , here you have 3 STL files to print , set your slicing software to 0.3 mm layer height and a fill density of at-least 25% or higher. 3D printing should take about 2 hours , so download the STL files and fir up your 3D printer while you complete the other steps below. .  #3 Determining the Soil Moisture Value. Upload the code attached below(soil moisture value) to your Arduino Yun and determine the tooDryValue in the code below.Basically if the value of the soil moisture falls below tooDryValue you need to water the plant.(and this value is the value that you will use in AWS-SNS condition to send an email). Here is the video of showing the method I used to determine the toodryvalue  . #4 Upload Arduino code to Yun to  post data to dweet.io. Now once you have decide on the toodryvalue , upload the ArduinoYunDweetIO.ino file to the Yun, And as part of the code also replace ""PlantMonitorTorontoON"" to something more meaning full for you. . Here is video testing the Upload of sensor data to dweet.io. . #5 Setting up AWS CLI on your computer (here I am using a Mac). Now to log data using AWS IoT in DyanamoDB , you will have to create an account at https://aws.amazon.com/free, here you will also have to provide your credit card details, but for the tutorial below you should not incur any cost (again this depends on the region of AWS setup)  . Once done create a folder ""AWS"" on your mac and follow the link below to download and install AWS CLI. http://docs.aws.amazon.com/iot/latest/developerguide/installing-aws-cli.html . I am using a mac , here are the instructions I followed. Note: at the terminal you need to be in the AWS folder you just created. #6 Creating a thing using the CLI which should show in the AWS IoT  console. Now we will create a thing in AWS IoT using the following command . For more info refer to the link. http://docs.aws.amazon.com/iot/latest/developerguide/create-thing.html . . #7 Creating Certs . To create and activate the certificates that you will need , give the following command  . this command will create the certificates(3 pem files) for you in the AWS folder as shown in the screen shot below. . . #8 Create and Attach an AWS IoT policy to your Certificates. Start of by creating a json file in the AWS folder, using you favorite text editor(i prefer sublime text 2) - name the file policy.json. Then copy paste the following command in your text editor. . #9 Attach policy to certificate followed by attaching certificate to device. Give the commands below one after another. Here an easy way to get your certificate arn if you have not noted it down is to go to the AWS IoT console click on you certificate and go to details on the right hand side of your screen. From here you can copy paste the arn to the teminal. . . For more info refer to the documentation on . http://docs.aws.amazon.com/iot/latest/developerguide/secure-communication.html.  . . # 10 Verifying/testing your setup on your computer and test it using MQTT.fx. Now to claim that the setup is done on your computer , download and install MQTT.fx from link below to test if the setup is working and we are able to publish and suscribe for data via AWS IoT. http://mqttfx.jfx4ee.org/index.php/download. For more setup info and to download the root cert use the link below. http://docs.aws.amazon.com/iot/latest/developerguide/verify-pub-sub.html. - here in MQTT.fx you will have to setup your connection profile. - and link your certs which you downloaded as part of the steps above. Here is a quick video that show how you can test you setup on you computer which in my case is a MAC using MQTT.fx tool.. . . Once you have complete and tested that your setup is fine follow the steps below to upload the certificated to the Arduino Yun. #11 Setting up the Arduino Yun to communicate with AWS IoT cloud. Download  the latest version of the Arduino Yun SDK from github and unzip into your Arduino ""Libraries"" folder . https://github.com/aws/aws-iot-device-sdk-arduino-yun. If you are using the Arduino Yun for the first time follow the setup instructions at. https://www.arduino.cc/en/Guide/ArduinoYun . Basically using the link you will learn how to set up the Arduino Yun to connect to home WiFi network.. Then load the Process Example sketch Arduino IDE to your YUN (File->Examples->Bridge -> Process), this will confirm that the Yun has access to the internet . Put your rootCA file, private key and certificate into certs folder as shown in the screen shot below. . Next modify codebase_upload.sh and environment_setup.sh and replace [your_boards_IP] with your board’s IP address and [your_boards_IP] with your password. In the your terminal run the following commands to give permission to the .sh files ,this will take about 5-10 mins ,which moves the certs and installs distribute, python-openssl, pip, paho-mqtt on the Yun. These are the packages you need to communicate with the AWS cloud from your Yun(aka called the PlantSystem thing in our case). .  . . For installation on Linux/Windows follow the link at . https://github.com/aws/aws-iot-device-sdk-arduino-yun#installation. . Now as part of the next couple using AWS CLI we are going create a table in DynamoDB to post sensor data. #12 Creating an IAM role and granting permisions. Basically to enter data into the DynamoDB sensor table which we are going to create as part of the next step , we need to create a IoT rule that will act upon the MQTT message received by AWS, for this we need to create a role and grant it necessary permisions. Create a json file rolePolicy.json. and to create the role run the following command in the terminal. Create another json file policy.json. . then call create-policy and specify the IAM policy document. And finally attach the policy to the role using - modify the policy-ARN to the ARN that you received as part of the previous step. . http://docs.aws.amazon.com/iot/latest/developerguide/config-and-test-rules.html. #13 Setting up table in DynamoDB in AWS console. As part of this step we are going to create a DynamoDB in the AWS console. Table Name : plantSensor. Partition key : key. Sort key : timestamp. and also set your Read capacity units and Write capacity to 1.. #14 Creating a rule to insert data into PlantSensor Table. Create a json file - plantdatarule.json (here modify the roleArn value in section below, go to IAM->Roles->iot-action-role to get the arn). . then run the following command on your terminal. Now if you go to the AWS IoT console you should see a rule created called ""PlantDataToDynamoDB""  as shown in the screen shot below('' ignore the email send rule this is coming as part of the steps below.). using MQTT.FX run a quick test to see if records are getting created in the table created.. . #15 Upload the Arduino sketch to publish data to AWS IoT from the Yun. Here first start of by downloading the ArduinoJSON  library from github at. https://github.com/bblanchon/ArduinoJson. Now download the YunAWSIoTDynamoDB,ino and aws_iot_config.h files from the  code section below and upload it to the Yun.. Open your Serial monitor and you should see the temperature, Light Value and soil moisture value posted to the DynamoDB.. If you have have been AWS you can do all kinds of awesome stuff by setting up Lambda function and posting data kinesis .... Note: If you plan on making this a permanent setup, don't forget to increase the delay at the end of the loop , to increase the time interval of posting to DynamoDB so that you do not incur addition cost . For more on pricing refer to https://aws.amazon.com/iot/pricing/. . #16 Setting up a AWS-IoT SNS rule to receive and email if your soil moisture value fall below a threshold. . Basically this step includes setting up a simple SNS notification base on AWS IoT rule.. Start of by assigning the following policies to the AWS role (iot-action-role) that you created in the previous step in the IAM console. -AmazonSNSRole. -AmazonSNSFullAccess. Once done in the SNS console create a Topic called sendMail and create a subscription and give your email configure on you phone to get notified when the soil moisture value is LOW.. Now head back to the AWS IoT console and using the +Create Resource button create a rule called Email Send and provide the following info. Once done you console should look like the screen shot below. Here is an sample email I recived when I removed the soil moisture sensor from a glass of water. . . . To read more about AWS-SNS. https://aws.amazon.com/sns/faqs/ . #15 Putting the 3D printed parts together and adding it to the pot.. You will need a 4x40 screw and nut to attach the black soil poker 3D printed part to the base part of the Arduino Yun. The top part just snap fits , here remember to point the top opening toward you window and poke the Soil moisture in the pot.And power the Yun with a micro usb cable plug to a wall outlet.. Please note, I am still exploring and learning about the awesome world of AWS, and awe'd by the features on the AWS console,so if you have been using AWS for quite some time, post a comment or suggestion for feature you would have liked to see/applicable to the plant monitoring project.Thanks ... . "
"In this IoT project, an LED light can be controlled wirelessly from a simple html page. This project is for all students, doers or makers.. Read up about this project on . In this IoT project, an LED light can be controlled wirelessly from a simple html page. This project is for all students, doers or makers.. Let's get started by live demo to get you all motivated :-). . https://randomnerdtutorials.com/how-to-install-esp.... Recommend to install version 1.8.3 or higher Arduino IDE. Note: After completing above step you should be able to see ""Wemos D1 R & mini"".. Refer attached images.. Connect the 10mm LED +ve  to D3 of board and LED -ve to Boards Gnd pin. You can either use 1.5v x 2 AA baterry to power the board in non debug mode/production or use type 'c' USB data cable to connect to computer/laptop  USB cable to debug or re-program.. AA battery +ve and -ve source is connected to Boards 3.3v and Gnd respectively.. Compile and Upload the code.. Go to WiFi in task bar -> connect to hot spot name: esphotspot. Password is embedded in code.. Open index.html. 1. In case you want to update SSID, then need to refer to this WiFi Manager library examples how to go about as the board stores this details in EEPROM and merry change in Arduino code won't allow the board to update previously successfully connected hot spot SSID details. SO for beginners dont expect to change SSID or password to start with.. 2. When operating from external power source here 2 AA baterry might not last very long as wifi connectivity drains the battery quite fast. Better option would be use mobile power bank say 10 or 20000 MAH and connect to boards 'c' type USB.. 3. In case board is not detected there could be chances you are not running or logged in as Administrator account in OS and/or may not have USB port enabled.. "
"A lock that can be controlled from a smartphone using an app.. Read up about this project on . A lock that can be controlled from a smartphone using an app.. This smart lock is the secure, simple, and easy to manage your home’s lock. This lock needs no keys and the lock is attached inside the door and you can control it from outside the door using Bluetooth. As the lock is inside the door there is no way to break the door by a thief. An android application is required to open and close the lock and I will explain the details how you can develop an android app in the later part of the tutorial. A password is sent to the lock using Android app and if the password is matched to your preset-lock password then the lock will be open and sent a feedback to your phone like the lock is open.. All the parts of the lock are 3D printed. I would like to thanks, Thingiverse user  ridercz for his nice design. He designed and published this servo based door lock in thingiverse.com. All the files except Rack_Holder.stl are taken from his design. You can download the files from below or from Thingiverse.com. . Some files have LT version. Light version required less PLA compare to normal version and has less strength. I printed LT version and working good. I used Anet A8 for printing all the parts. Photos of the printed parts are attached... Assemble all the printed parts one by one as shown in the photos. You may also follow the video instruction attached in the first step. After assembling use four screws to tightly fix all the parts. . The code for bluetooth control smart door lock is very simple. I have designed android application in such that it sent a command with the password. Actually I set two command, one is ""OPEN="" and another is ""CLOSE="" and password may contain any digit, later or symbol or combination of them as you like. In the app I used two buttons one for open the door and another for closing the door. When password is given to password box and open button is clicked than app joint the ""OPEN="" command with the password and sent it to arduino. I add '=' sign with command for that I will separate command and password by using this '=' . After receiving the string from phone arduino program separates command and password from the receive string and save them into two separate variables. Then check the password first, if password matched with saved password then open the door for ""OPEN"" command, and close the door for ""CLOSE"" command. ""="" helps to separate command and password. Complete arduino sketch is given below.. The connection between the components is very simple. First, connect Bluetooth module HC-05 to the Arduino. Note the schematic. TX pin of the Arduino board is connected to the RX pin of Bluetooth module and RX pin of the Arduino is connected to the TX pin of the Bluetooth module.. I hope you programmed your Arduino board with the sketch attached in the previous step and you already tested all the connection according to the schematic. If you completed all the steps then it is the high time to place the lock in the appropriate place of the door. First, place the lock with four screws. Then, fix the Bluetooth module at the right place of the lock and add some hot glue to tightly adjust the module with the lock. After that, place the Arduino board to the bottom side of the lock and connect all the wires according to the schematic. After placing the lock and making the connections you should power up the lock. I used a 5V, 1A wall adapter to provide the power to the circuit. . I will show you how to develop an Bluetooth android application using MIT App Inventor. I am using App Inventor because it does't required any coding and no software installation. You only need a google account. Go to http://ai2.appinventor.mit.edu/, you will ask to log in using google account.. Log in to App Inventor using gmail and follow the steps below:. You are now in the Designer, where you lay out the ""user interface"" of your app (image 6). The Designer Window is where you lay out look and feel of your app, and specify what functionalities it should have. You choose things for the user interface things like Buttons, Image, Label, Text boxes, and functionalities like Text-to-Speech, Bluetooth, Sensors, and GPS.. Now, follow the figure 7 and add a List Picker to the viewer. Rename it to ""Connect to Bluetooth Device"" (image 8). Add one Label, one Password Text Box, and two buttons shown in figure 10. Change the text properties of the components as ""Enter Password"", ""Open Door"", and ""Close Door"" respectively. Final User Interface should look like as figure 11. Now add a Bluetooth Client to the viewer. It is an invisible component and it has no UI. See Image 12.. Switch over to the Blocks Editor. It's time to tell your app what to do! Click ""Blocks"" to move over to the Blocks Editor (image 13). Think of the Designer and Blocks buttons like tabs- you use them to move back and forth between the two areas of App Inventor. The Blocks Editor is where you program the behavior of your app. There are Built-in block that handle things like math, logic, and text. Below that are the blocks that go with each of the components in your app. In order to get the blocks for a certain component to show up in the Blocks Editor, you first have to add that component to your app through the Designer.. Let us, design blocks for List Picker. List Picker is a UI element when clicked it shows a list of corresponding elements here is the paired Bluetooth device. We have to add two blocks ListPicker.BeforePicking and ListPicker.AfterPicking (image 14). Complete Blocks are shown in figure 18 & 19. . Make apk file. Our design is complete, now we need to build the apk file for our android phone. Click to build menu and select ""App(save .apk to my computer)"". Wait for a minute. An apk file will download to your default download folder. Install and use it. . In previous step I have showed you how to develop a basic bluetooth app in App Inventor. But that app is not so user friendly. It will not show you any message either your door is open or closed or bluetooth can not connected for any error. I have attached here a more advanced app for our project. . When you run you app this app check either your bluetooth radio is enable or not, if not enable a bluetooth enabling dialog will appear. Click yes to turn on your bluetooth radio. Then pair the device using pair device button. Then click to connect button, if successfully connected to any device the application shows the connected device's MAC address and name. Enter password to the password box then click the open door button, if you entered correct password door will be open and application will show you a message that your door is now open. Then enter password again if you want to close the door. If you give the wrong password, then app will show wrong password message. . Complete App Inventor source file (BTcontrol.aia) is attached herewith. If you did not like to make your own app or modify it, just download the BTcontrol.apk and install it to your android pone. . You can also download it from Google Play Store using the link: . https://play.google.com/store/apps/details?id=appinventor.ai_khairul_uapstu.BTcontrol&hl=en. For modifying the source click the ""Projects"" menu and select ""Import project (.aia) from my computer"" shown in figure 24 and browse the BTcontrol.aia file from your computer. After importing you can modify it easily.. If you want to know more about android app developing using App Inventor browse: http://appinventor.mit.edu/explore/ai2/tutorials.html. You can also try http://meta-guide.com/videography/100-best-appinventor-videos/. "
"Take a Raspberry Pi Zero and a webcam cram it into a Coke bottle while making it continue to appear like a normal Coke bottle!. Read up about this project on . Take a Raspberry Pi Zero and a webcam cram it into a Coke bottle while making it continue to appear like a normal Coke bottle!. . For this project, the inspiration started when I came across a mini Pi Zero camera online. The obvious application for such a camera is to make a ""Spy Cam"". A spy cam is normally a camera that's disguised as something else. Then the question became: ""what should I disguise my camera as?"" I've seen cameras hidden in Coke cans before, but I thought it'd be cool to hide one behind the label of a Coke Bottle, while making it look like liquid was still in it. So in a nutshell, that's the journey of this project.. This project hinges upon being able to make a Raspberry Pi Zero W and a Raspberry Pi camera fit behind the label of a Coke Bottle. There are a lot of different Coke bottle shapes and sizes, but the US version of a 20 oz Coke bottle was the perfect size to house the Pi. The results may differ depending on your country, so be sure to do proper measurements before attempting this.. The camera I chose is a very small form factor camera intended for the Raspberry Pi Zero. It's perfect for fitting everything into a tight space.. Now it's just the standard matter of setting up the Pi. So taking a 4gb or larger micro SD card, download the Raspbian operating system and burn it to the SD card using Etcher.io. Insert the SD card into the Pi zero, and connect the camera, keyboard, mouse, monitor, and finally the power.. Once you see the Raspbian desktop, the first thing you want to do is connect to your wireless network. Then if you right-click on the wireless icon, you can select ""Wired and Wireless settings"", and give your Pi a static IP address so that you know how to connect to it later. After that, click on the menu and go to Settings > Raspberr Pi configuration. Under the ""Interfaces"" tab, make sure both Camera and SSH are enabled. Then you can save it and restart your Pi.. Now you can hop over to a different computer and connect to your Pi through an SSH client such as Putty.. What we want to do is create a script that activates the camera and serves it to a web page so that we can access it from any web browser. There are plenty of different ways to do this (Motion, Raspivid, etc), but I found a simple Python script that does everything I need it to do and doesn't require any extra software or libraries to install. The best thing about it is that the lag time is practically unnoticeable.. spi_cam.py. Save the file, and run it by typing. Then on your browser you can go to http://[your pi's IP address]:8000 to view your webcam.. Assuming that it's working, the next step is to make it executable.. Then add it to your rc.local file to make it auto-start everytime the Pi starts up.. Now every time the Pi boots  up, the spy camera should auto-launch and you should be able to view it from your browser!. Since the camera is intended to be ""in"" a Coke bottle, having wires coming out of would kind of ruin the effect. The only wire that it requires at the moment is power, so what we need to do is set it up to run off of battery power.. For this task, I used a 1500maH Lithium Polymer battery, an Adafruit Lithium Polymer charger, and a simple slide switch. I connected the battery to the charger, and soldered some wires from the charger, to the switch, and then on to the back of the Pi, using the PP1 (+) and PP6 (-) connector pads on the back of the Pi.. With our Pi camera set up, working, and portable, we can now work on how we're going to work it into the Coke bottle. My idea is to cut out the middle of the bottle and replace it with a 3D printed container that the Pi is housed in. This container will have a hole for the camera, and a lid so that you can easily separate the bottle to charge the battery and switch it on and off.. What I did was measure the height of the label and the width of the middle of the bottle. Taking those measurements and subtracting 2 mm from each, I created a cylinder which I then cut the top off of and hollowed out so that it could house the Pi and it's required components.. I modeled everything in Tinkercad, which was super simple, but the end result was less than stellar. You can see that the cylinder is very jagged and not smooth. The model required subdivision, which Tinkercad currently isn't capable of doing. If I did a version 2 (or if you want to make your own), I would use Fusion 360 instead.. For this project to be successful, it has to look like the Coke bottle is still filled with liquid. To achieve this, I decided to turn the Coke into gelatin. I started by pouring a Coke Zero into a bowl and combining it with 4 small packets of gelatin mixed with water (just followed the directions on the back of the gelatin box). I opted to go with Coke Zero because it had a black label that blended in more with the camera.. Now that the bottle was empty, I washed it out and filled it with hot water and let it sit for a minute. This made it easy to peel the label with minimal tearing. Dumping out the water, I cut the bottle in half. The portion of the bottle where the label was located was smooth compared to the rest of the bottle. Of this smooth area, I cut away all of it except for 10 mm from the bottom and 10 mm from the top.. Taking the top part of the bottle, I hot glued the lid of our camera container to the bottom of it. It's important to make sure that the hot glue makes a full seal completely between the lid and the bottle to prevent in leaking from the gelatin mix. Speaking of which, I then poured some of the gelatin mix into the bottom of the bottle filling nearly to the top. Then I poured some in the top of the bottle (and lid) and set everything in the refrigerator to solidify.. Finally I inserted the camera container cylinder to the bottom part of the bottle, flipped the switch to turn the Pi on, and then put the lid on. To finish the effect of the full bottle, I took the label and punched a whole in it for the camera, and then reattached it to the bottle, surrounding the camera container! All that's left is to put it in an a place where you want to keep an eye on things. Then just pull up the web interface on a computer, tablet, or phone and watch the video feed. At first (and second) glance, it appears to just be a regular Coke bottle! . . "
"An easy way to know if someone is at the door and take picture of that person. . Read up about this project on . An easy way to know if someone is at the door and take picture of that person. . I am using Cayenne to send me notifications every time someone is at the door and to take a picture at the same time. It will save the picture and it allows remote access through Cayenne to take a look at it. . Because in Cayenne you can add more sensors without a need to pay. Also, you can Remote Access through your phone or any PC and be able to see the picture. As well, you can turn on/off anything in the house, lock/unlock the door with a motor, and add more sensors to it such as a temperature sensor. . PIR motion sensor will turn on the light and take a picture at the same time. When the light is on, Cayenne will send you a notification saying ""Someone At Door."". Step 1: Connect the camera and make sure it’s working. Refer to the following link to setup the camera: https://projects.raspberrypi.org/en/projects/getting-started-with-picamera. Step 2: Connect the PIR motion sensor, LED and 220 ohm resistor. We will use the same code to get notifications via Cayenne. I will add steps for Cayenne below. . This is the website from where I got the code: https://diyhacking.com/raspberry-pi-gpio-control/. Step 3: Now install Cayenne for the Raspberry Pi. . First create an account with Cayenne: https://mydevices.com/cayenne/signin/. Click on Add new > Device/Widget: now add Raspberry Pi. Now copy and paste the 2 line code in Raspberry Pi Terminal:. Follow this video: . Step 4: Cayenne LED setup. Left top: Go to Add new > Device/Widget > Actuators > Light > Add Actuator . Why Channel 5: for LED GPIO3 which is Pin (5) in Raspberry Pi; look at the Raspberry Pi pinout on Google.. Step 5: Notification setup for Cayenne and phone . Go to Add new > Trigger > follow picture below: add your number . After you've setup to this point: you can go to the Raspberry Pi Terminal and run this Pirtest.py code, and when the PIR motion sensor turns on the LED, you will get a notification sent to your phone number. . Now let's take a picture at the same time you are notified:. Step 6: Camera & PIR motion sensor setup . The good thing is that you only need code for this, which I have attached in a file: “campir.py”. I added time in the code to just preview for a few seconds, adding a display to the Raspberry Pi. . For reference only: https://projects.raspberrypi.org/en/projects/parent-detector. "
"Ever wanted to block all WiFi signals, or just want to kick someone out from your WiFi or a neighbor's WiFi? Well, this is it. . Read up about this project on . Ever wanted to block all WiFi signals, or just want to kick someone out from your WiFi or a neighbor's WiFi? Well, this is it. . . Hey friends, it's Kedar here. Have you ever wanted to block all WiFi signals, or just want to kick someone out from WiFi or a neighbor's WiFi? Well, this is it. Guys, your wait is over. Here is the $8 DIY WiFi Jammer to try for yourself. To see how effective this WiFi jammer works, I suggest you to check my video above.. This jammer is so tiny you can fit into pocket and carry it anywhere. It can be powered through your power bank or 3.7v LiPo battery. You can select which WiFi network you want to jam and attack on it. But be sure this is just for educational purposes; do not use this for the wrong purposes.. The 802.11 WiFi protocol contains a so-called deauthentication frame. It is used to disconnect clients safely from a wireless network. Because these packets are unencrypted, you just need the MAC address of the WiFi router and of the client device which you want to disconnect from the network. You don’t need to be in the network or know the password; it’s enough to be in its range.. You can perform multiple attacks on this device such as you can jam any particular WiFi network or you can do beacon spam or random beacon spam. or you can simple deauth all. Let's start making it.. You can use this ANDROID app to control this WiFi Jammer: https://rebrand.ly/wifijammer . To make this WiFi jammer, mainly you will need only one part: ESP8266.. You can buy the particular version of ESP8266 that has a NodeMCU firmware on it, and it is easy to program without any programmer. This ESP8266 has a built-in programmer. You can buy it here: . Download the latest Arduino compiler from the Arduino website here: . 1. Install Arduino and open it.. 2. Go to File > Preferences. 3. Add http://arduino.esp8266.com/stable/package_esp8266com_index.json to the Additional Boards Manager URLs. . 4. Go to Tools > Board > Boards Manager . 5. Type in 'esp8266'. 6. Select version 2.0.0 and click on Install (must be version 2.0.0).. 7. Go to File > Preferences. 8. Open the folder path under More; preferences can be edited directly in the file. Don't forget to save!. 9. Go to packages > esp8266 > hardware > esp8266 > 2.0.0 > tools > sdk > include. 10. Open user_interface.h file with your favourite text editor or just Wordpad.. 11. Scroll down and, before #endif, add following lines: . Don't forget to save! . 1. Download project files from here: https://rebrand.ly/wifijammercode  (credit goes to the original creator: spacehuhn). 2. Open WiFi Jammer > esp8266_deauther > esp8266_deauther.ino
 in Arduino.. 3. Select your ESP8266 board at Tools > Board. I used NodeMCU 0.9 but you can try NodeMCU 1.0 or the generic ESP8266 module.. 4. Select your programmer at Tools > Programmer > ArduinoISP. 5. Select the right port no. at Tools > Port. If there aren't any ports that show up, you may have to reinstall the drivers.. 6. Upload! . Your WiFi Jammer is now ready!. 1. First power up your ESP8266. You can use your smartphone if you have a USB OTG cable or micro USB cable with a power bank or USB wall adapter.. 2. Now you can control your jammer using any smartphone or PC, just connect to the ESP8266 Module so you can scan for WiFi networks from your mobile or PC or MAC and connect to AndroidAP. The password is 'killwifi'. You can change this SSID and password from the code you uploaded. Once connected, you can use this Android app to control this WiFi Jammer: http://geni.us/PQhB OR you can open up your browser and go to 192.168.4.1. 3. You can now scan for networks. Note: while scanning, the ESP8266 will shut down its access point, so you may have to go to your settings and reconnect to the WiFi network manually and start different attacks.. 4. Click on the attack tab, choose deauth all
. Boom! Everyone on the WiFi should be disconnected. Now you can try other attacks as well. Happy hacking. . "
"Poseidon is a cheap wireless water level controller for overhead tanks made using Arduino UNO and HC-12 wireless communication module.  . Read up about this project on . Poseidon is a cheap wireless water level controller for overhead tanks made using Arduino UNO and HC-12 wireless communication module.  . Water is such an important resource in our life that a human being  cannot even live a day without water. But still we humans cause so much  wastage of this precious resource. We waste more than we save! Now its  time we try to save the life giving resource. . Many times it  happens that we forget to turn off the water pump after the water tank  gets filled. This leads to wastage of a great amount of water. Poseidon  is an easy to make wireless Water Overflow control system which automatically switches off the water pump when the water in the tank reaches a certain level and switches on the water pump when the tank  gets empty. Controlling of the motor is done wirelessly using the HC-12  module which has a range of about 1km. . Not only this, it also gives you call as a notification after the work is done.  . . "
"This project will show you how to make a DIY 4-wheel robot that can be controlled using a smartphone via Dabble, a mobile application.. Read up about this project on . This project will show you how to make a DIY 4-wheel robot that can be controlled using a smartphone via Dabble, a mobile application.. Another project, another out-of-the-box gifting idea! Presenting to you the Dabble controlled 4-wheel robot - an simple-and-fun to build and easy-to-control robot that can be controlled via Bluetooth using Dabble, a mobile application indigenously developed us. All you need to make your robot is an Arduino Uno board, chassis, wheels, motor shafts, and other accesories and tools. To control it, you need to install Dabble from Google Play and pair it with Bluetooth; and your robot’s ready to go places!. What better way to end the year with the same DIYing spirit that it began with, right? So what are you waiting for! . So, Let’s get started!. Firstly, we will start making the body of the 4 Wheel Robot.. Take the chassis and turn it upside down.. Onto this chassis mount 4 motor mounts using M3 Bolts and nuts.. Fix the DC Motors and fix them on the motor mounts using M2 Nuts and Bolts.. Attach wheels on each shaft of the DC Motor.. Flip the assembly, thus your body is created.. The microcontroller that we are going to use is Arduino Uno.. We are going to make all the connections on it, but we are also going to use a breadboard to make the connections. . Make the connection as shown in the below figure.. We are going to make use of the motor drivers because Arduino Uno does not provide sufficient power to run 4 Motors. Thus, we will be adding the motor driver, we will be able to give the robot needed energy.. The left two motors are connected in parallel. Similarly, the right two motors are too connected in parallel.The connections are made as follows: . We need to add a module that will make the connection between your robot and Dabble App on Smartphone.. We are taking Bluetooth HC05 Module. Connect it as shown in the connection figure.. We will need to add an extra power source to our robot. Also, to connect Arduino Uno with the battery we are going to use DC Terminal Block or DC Jack.. Upload the following code:. We can easily connect our robot to our Smartphone using  Dabble.. Before working with any of the modules, you need to connect the Bluetooth that you are working on.. There are many modules available in the App for other functionalities.. . Today we will be working with the Gamepad Module.. And we will be using the Left Set of buttons:. With this, you DIYDabble-controlled 4wheel robot is ready for action!. Psst! Just so you know, Dabble can do much more than just wirelessly controlling robots. You can explore more about it here!. . "
"Light show synchronized to music? Automatic lighting? Earthquake analysis? Just use a Curie!. Read up about this project on . Light show synchronized to music? Automatic lighting? Earthquake analysis? Just use a Curie!. https://github.com/ckuzma/arduino-101-sketches. TapFlashTest. TapBeatMatch. . SeismicReader + Python Visualization Script. VibrationLighting. A conversation with Bogdan made me realize that it'd be very easy to modify the Arduino sketch to work with standalone accelerometer + gyroscope sensors connected to nearly any Arduino device, and then use CurieGraph.py
to visualize the data. Seeing as the goal of collecting seismic readings is to prove that it's possible to massively crowd-source data without complicated or specialized equipment, I rummaged in my desk for the ""ITG-MTU"" / ""GY-521"" / ""MPU-6050"" sensor board, and wrote the following Sketch for it. CurieGraph.py might fail to start a couple of times, but usually it catches on properly by the third attempt.. ExternalGyroscope . "
"It's a basic 4-wheel drive car which can be controlled by Android phones.. Read up about this project on . It's a basic 4-wheel drive car which can be controlled by Android phones.. Hello! In this project I will show you how to make a Bluetooth-controlled car which can be controlled through your Android smartphone! . Before starting, make sure that you have:. Optionally, you will need:. For power, you can use the existing batteries (4x 1.5V AA), or replace them with a LiOn rechargeable battery pack.. At the time I build mine LiPo batteries were not available so I used 12V lead acid batteries. It  was just an explanatory Model which can be modified in many ways it's up to your creativity. So best of luck for the project.. Ι suggest you build your circuit on a (small) breadboard first. Then after checking the circuit, you can make your own PCB. I have attached my PCB layout (it can be improved very much).. To control your new Bluetooth car, download and install this Android application from the play store named Bluetooth car.. My first video! So forgive me for the little mistakes.   . Please share your innovative ideas.. ""Learning and innovation go hand in hand. The arrogance of success is to think that what you did yesterday will be sufficient for tomorrow."". "
"Announce your presence at a venue with your travel card. Read up about this project on . Announce your presence at a venue with your travel card. One issue we have frequently at the Taipei Hackerspace is that people don't know when we are open. Our  basic rule is simple: whenever a keyholder member is in the Hackerspace, anyone/everyone can come in. In practice, though people never really know if anyone's there.. They could give a call to the space, or even send an email to the mailing list, while the people I know usually end up asking me directly - hey, anyone's at the space at the moment? Since I don't always know the answer, the search was on for a better - maybe more technological or hackish solution: let's build an electronic check-in/out system that will show the current status on out website.. The main idea is that in Taipei pretty much everyone has an EasyCard, an 13.56MHz RFID card that is used for all public transport in the city and a lot more. The RC522 card-antenna module seems to be able to read the card pretty well, and all I need to get off it is the the ID number which is pretty straightforward (after digging the Arduino forums for source code).. The project in a nutshell is:. Now let me dig into the different parts in detail.. The RC522 module has 8 pins, and Arduino can use the SPI library to communicate with it. I used Arduino Mega ADK, because the SPI pins are conveniently accessible, unlike e.g. the Leonardo, for which I would have had to make some new cables or headers. The RC522(pin number)->Mega(pin number) connections are done such that:. The source code to talk to the card is from a blog, and originally from a tech shop in China, I guess (based on the big bunch of Simplified Chinese comments).. I wanted to make as simple interface for the card reader as possible. Added this pair of switches and LEDs (the D1 being green, and D2 being red). After the Arduino received a card ID from the reader, the LEDs are blinked to prompt people to press either the Check In or Check Out buttons. If they press either of them, the corresponding LED is blinked very brightly for a bit, and the card ID and check-in/out event is sent to the connected computer via serial connection. The (very basic) circuit for the check-in/out buttons and visual feedback LEDs. ""Pins"" refer to the Arduino pins used in the current version.  . If no button press occurs within 10 seconds or so, the reading is discarded and the card reader goes back to listening mode.. Node.js is very useful to make quick web services, and its library support is not too bad at all, although it's not all smooth sailing: their documentation is often scarce at best. Nevertheless it was the fastest one to get things up and running, since I have used before almost all required components.. The server communicates with Arduino via the serialport library. I'm more used to Python's pyserial, though in this case it was very handy that serialport can emit read events, thus the server can just wait until there's something to read and run some functions on the incoming data. In my experience, serialport wouldn't be good for every corner case I came across in serial-land, but in this setup works beautifully.. I chose SQLite3 to store the data, using the sqlite3 library. There are a bunch of others, had to look around which one is still being developed. This particular library is not too bad, though I found myself fighting the lack of documentation and asynchronicity quite a bit. The resulting code is pretty ugly I'm sure, in some places inefficient because I didn't know how to get to the result I wanted in a less roundabout way, still it seems to work and that is what matters for a prototype.. First I made a simple REST API to query the currently checked-in people, and later added (real-time) push updates via socket.io, to make it nicer. It's brilliant that without any polling, all clients can be updated once someone signs in or out.. Since this code is running on a different computer than our main web server, had to play around with the Access-Control-Allow-Origin header, and adjusting the settings of our  router to make it accessible for the web correctly.. Tried to add a pretty-much self-contained script that the front-end can load, and it handles everything, just need an appropriate HTML span or div element to display the information.. The result is pretty good, as long as the card-reader does not crash. Originally the results were displayed in a table, but wanted to make it more human, so here's the format I ended up with:. There can also be people with no name, they just show up something like ""Right now there are three people checked in the Hackerspace: Greg, and two other people."". There's also a project called Space API for an unified specification to expose information regarding the space itself (. This check-in gadget is integrated with our the Taipei Hackerspace's Space API endpoint to, showing our opening status, so can be used with e.g. the My Hackerspaces Android app, or with the other applications listed on the Space API site.. Here's a quick demonstration video of how does it work:. So you can check out our website at https://taipeihack.org/#open for the live results, and drop in if you are in the neighbourhood if there's anyone in the 'space. . The whole source code is shared in a Github repository: the Arduino sketch, the server script, and any additional files. I'm sure there are a lot of things that could be improved about it.... Original writeup: Electronic check-in at the Taipei Hackerspace. "
"Quickly build a wifi-enabled clock that keeps accurate time via the internet.. Read up about this project on . Quickly build a wifi-enabled clock that keeps accurate time via the internet.. I accidentally ordered the 1.2"" 7-segment display with I2C backpack this week.  It's entirely too big for my original purpose, so I decided to make a quick clock out of it.  Although it took me about an hour to get it to where it is now, it could easily be built in 5 minutes from start to finish if you have the components in front of you and the code at the ready.. In order to complete this project in 5 minutes, there are a few liberties taken.  Just like a recipe might say ""cook for 30 minutes"", there's usually at least a few minutes of prep time not factored into that.  The prep-time liberties taken in this project are that you have removed all the devices from their packaging, already have a Particle account set up, have the Particle app installed on your phone, and are familiar with the Particle CLI.  Oh, and pre-heat your soldering iron.  Do some stretches to get loose and ready while the soldering iron heats up.. Align the display to the backpack PCB and solder the 5 pins per the instructions at Adafruit.. (To be totally fair, it would have taken MUCH less time if I didn't have a stubborn breadboard with incredibly tight pins.). Use the Particle app on your phone to claim your Photon.  Use the add device wizard and follow the on-screen instructions.  If you need help, visit https://docs.particle.io/guide/getting-started/start/photon/#connect-your-photon for more detailed instructions.. Most of the tiny breadboards come with double-stick tape on the bottom.  If your breadboard does, peel off the cover of the tape and stick the breadboard to the back of the display.  I placed mine on the right center which allows it to sit at a slight angle for better readability on my desk.. If you made this clock in less than 5 minutes, spend the remaining time patting yourself on the back for a job well done.  But, really, spend all the time you need here.  You deserve it!. I also created a wooden box so this can be used as a real clock in a bedroom/office environment.  SketchUp plans for a box similar to the one pictured below have been added to the project.. Cherry Segment Clock imgur Album. Another box! This time made out of bamboo.. Bamboo Segment Clock imgur Album. MOAR BOXES! This time made out of purple heart.. Purple Heart Segment Clock imgur Album.  . "
"Connect a rotary dial telephone from the 80s to a cheap cellphone with an Arduino.. Read up about this project on . Connect a rotary dial telephone from the 80s to a cheap cellphone with an Arduino.. I was digging in my box of random electronic things that I don't use anymore and hope to find a way to recycle, one day and found this cute little cellphone. . And I thought ""What if I took the cute little phone, tore it apart, ripped its entrails out and attached it to another older less cute phone!"" And so I went and bought an old rotary dial telephone and started my adventure.... FYI, old rotary dial phones aren't easy to come by these days. . Unfortunately, for this project, I can only show you a few pictures and share the code with you. I have no idea how much changes are going to be required in the code if you use another cellphone than the one I used. . But let's start on the easy piece. The dial itself.. When I started this project, this was my biggest worry. How was I going to read the dial? And the answer was... disappointingly easy. . The back of the dial is actually super simple. I'm guessing that the technology didn't vary that much from one phone to the other back then so you'll probably find a similar configuration when taking your old telephone apart.... The colors of the wires on the prototyping board below match the colors on the dial above. (The pink wire on my dial is connected to the brown. That's why there's no pink on the diagram). In the code, this is what does the work:. On my dial, when nothing is happening on the dial, the orange wire reads 0v because the switch is open on that side, the grey one is closed so it reads 3.3v (But we don't care). When the dial is wound, the orange wire gets connected. This causes activeState to be true (sort of). Then when the dial unwinds, the other switch will start pulsing and the myPulseIn function counts the amount of time between on and off states. Everytime the switch is off for between MIN_VALID_PULSE (50000) and MAX_VALID_PULSE (150000 units of time - those aren't human units), digit is incremented. For a 1 this happens only once, for a 3, three times,... you get the idea :D. The values are defined at the top of the code. As I realised with the help of JKF, my dial was really old and slow. His pulses are a lot faster and didn't fit in the 50000 - 150000 bracket. By using some of the Serial debug lines provided, you'll be able to get values and find a bracket that works for you.  . Now we have a digit to dial, so we dial it. The dialCellDigit does this and it's explained in the code.. Next we connect this to the cellphone:. The keypad of my little phone works on the same principle as the keypad on the Arduino tutorial. The left side of the prototype board shows the circuit needed to connect one button. On my cellphone, the green wire is connected to a point on the keyboard that corresponds to a row and the blue one to a column. This is easy to figure out once the phone is open by connecting a wire between various points on the naked keypad and checking what it does. . The little black ICs are Opto-Isolators. They work more or less like relays so the Arduino circuit stays independent from the phone one. . Once you have figured out your rows and columns, you just have to connect them to one another correctly. 1,2,3 on the keypad will have the same row (green) but different columns (blue), 4 has the same column as 1 (blue) but a different row (green) .. The ""Call"" and ""Hang Up"" buttons were weird because they both had their own special green and blue. . Once you have the dial talking to the keypad, the rest becomes assembly. You'll need to take apart the receiver to figure out which wires are for the microphone and which are for the speaker. I couldn't figure out the positive and negative for each set on my receiver. It doesn't seem to really matter.. They just need to get connected to their counterpart on the cellphone. The speaker was easy because the poles on the circuit board were about 3mm x 3mm. The microphone on the other hand, is located at the bottom of the keypad somewhere. The connection poles are minuscule and less than a millimeter apart. . And at this point, I have to take a second to officially thank Chantal for her help with the soldering. She did 80% of the soldering onto the 2 circuit boards and she did the microphone one! Without her, I don't think my phone would have had a microphone at all.. On the chassis of the old telephone, we need to add wiring to connect the 'hang-up' lever button of the old telephone to our Arduino. I used pin 18 (A4) for this. My phone had 3 of those lever switches. I used the one that was normally closed so the current would only flow when the phone is off the hook (Which is less often than on hook) . In the casing of the telephone, I drilled a small hole to squeeze a push button that I then connected directly to the green-blue wire combination for the 'Dial' button on the cellphone.. Finally, we squeeze everything back into the casing of the old telephone . And we put the case back on. . I use a standard mini USB cable to connect the Arduino Nano (red circuit board above) to the power and run my phone from a portable cellphone charger. There's already a gap to let the wire out because this phone used to connect to a land line. . On a final note, . This defines the number of digits the cellphone will dial before calling automatically. In SA, we have 10 digit numers. You might have to change this value for your country.. The push button that I added on the case is for international numbers. Here they start with 00 ('+' on your cellphone is the shortcut for this but good luck getting a '+' out of the rotary dialer :) . This is the code in charge of preventing automatic dialing at PHONE_NUMBER_LENGTH digits. . It only checks that the second digit is a 0 (that's because in SA, all numbers start with 0. You will have to modify this also to get the international calling working if your country works differently.. If you need explanations on the code or additional details, please feel free to ask. I can't however help you with technical questions. I don't know cellphones, nor do I know old telephones. This is one specific cellphone connecting to one specific telephone and a lot of trial and error. . I hope you got this far and got excited about building one of those! . If you do, please drop me a message or leave a comment and we can make a plan for me to call you OldArduiPhone to OldArduiPhone!  . "
"This project aims to provide insight into the workings of a digital oscilloscope. This project is designed to be an education tool.. Read up about this project on . This project aims to provide insight into the workings of a digital oscilloscope. This project is designed to be an education tool.. Arduino Oscilloscope . . Arduino-based oscilloscope with advanced features and two channels. It is a DIY Oscilloscope based on popular Arduino platform.. Arduino-Oscilloscope (here-after referred to as Osciduino). There is another project with the same name that is why the title name is changed here, after I saw the another project with the same name ie OsciDuino) is an Arduino-based oscilloscope (tried and tested on Arduino Uno R3 and Mega 2560). Though I would recommend using Mega if you can.. It is an educational project to get the insight into the internal workings of a buffered digital oscilloscope (DSO) Tthis version includes advanced functionality to the setup, by including features like dual channel, offset, trigger, time/div, volts/div, and likewise.. The inputs are taken from 2 analog input pins on Arduino. The pins however support only voltage range of 0 to +5 volts. so ths oscilloscope works well only if the signal being viewed is +5 volts peak to peak maximum and doesn't have any negative halfs. to view negative halfs, the oscilloscope has to be operated in a +2.5 volts peak mode. this is accomplished externally by scaling the voltage and then offsetting it by +2.5 volts.. An additional display library is included in the master for SPFD5408, if required.Also the schematics for the setup are included in the ""arduino files"" folder. This is really simple to do just follow the following steps and you are up-and-running.. First and foremost plug in the Display to Arduino. For this see How to assemble the hardware. /!\ Make sure that 'CH1' and or 'CH2' is set to 'ON'. The following is a ""hello world"" example for the Osciduino. . Observing charging and Discharging of a capacitor. Setup. Power up the Osciduino, as mentioned above in the quick start. Now on a breadboard connect an electrolytic capacitor in series with a resistor to a square wave generator.Place the probe on the resistor capacitor node. Add a common reference ground between Osciduino and the RC circuit. . And you should start seeing the characteristic rise and fall slopes associated with charging and discharging of the capacitor.. See. The setup requires an external resistive control interface. Which requires callibration on every boot. As resistance changes easily with temperature and long durations of running. This can be mitigated in a lot of ways, for example by replacing the resistive divider switchconfiguration by a touch based scheme or a push button scheme encoded into the free GPIO pins on the Arduino Mega.. Starting version 1.5, the hardware extension support will be addedto the project - release v1.5.0. The code is originally based on the one by Mr. Noriaki Mitsunaga http://n.mtng.org/ele/index.html. "
"A WiFi capable smart clock and notification system (inspired by LaMetric Time) consisting of a 32x8 LED matrix and ESP8266.. Read up about this project on . A WiFi capable smart clock and notification system (inspired by LaMetric Time) consisting of a 32x8 LED matrix and ESP8266.. Make your own IoT smart clock that can:. . Easy to build just need a Wemos D1 Mini and MAX7219 LED Dot Matrix Panel. No need programming skill no need Laptop/PC to program Wemos ESP8266 microcontroller, just need Android phone to upload sketch/firmware to Wemos via USB OTG.. It runs completely autonomously and be configured and controlled via an Android app, with the app you can configure and setting IoT Smart Clock (ESP Matrix) device very easy with a simple interface.. Here are the things that you will need to make ESP Matrix:. 1) Remove the LED Dot matrix component in the first column that have the soldered header pin on pcb.. 2) Twisted all male pin headers 180° using long-nose pliers, so that they point inward. . 1) Cut half of the existing dupont cable, so it becomes around 10cm.. 2) Connect female header on dupont cable with male header on LED Dot matrix panel, see picture.. 3) Separate the cable into two parts, 2 cables for VCC & GND, 3 cables for CLK DS & DIN. then enter into the hole on the pcb, see picture.. 1) Peel the end of the cable using a wire stripper tools.. 2) Then cover all ends of the cable with tin.. 1) Solder to connect CLK to D5, CS to D6 & DIN to D7.. 2) Solder to connect VCC to 5V & GND to G.. You can use double sided tape, to glue between the Wemos and the LED Dot matrix panel, see the picture. Also reinstall the LED Dot matrix component which is in first step removed. This 3D-printed case is design more slim and pressing to make it look solid and robust, so to install it is not so easy need a little pressed.. ESP matrix can be made in two sizes, a short 32x8 pixel of LED use 1 panel LED Dot matrix and a long 64x8 pixels of LED use 2 panel LED dot matrix, so to make a 3D-printed case depends on your choice.. To make the light of the LEDs be more clear and diffused, on the LED surface add black transparent colored acrylic.. There are two sizes of acrylic:. 1) To program the Wemos ESP8266 (ESP Matrix) very simple, you only need to connect Wemos (ESP Matrix) to an Android phone via a micro usb cable and OTG adapter, see picture.. 2) Then install the ESP Matrix app from Google Playstore. https://goo.gl/b9YAth. 3) In the first welcome screen tap UPLOAD button.. After programming is complete then it is necessary to set some parameters of the devices:. 1) Connect ESP Matrix device to network internet using app.. 2) You need Sign-up to get an API key from openweathermap.org, then copy the your API key to the weather option in app.. 3) You need City ID from openweathermap.org, eg.2643743 for London, then copy the your City ID to the weather option in app.. If you feel dissatisfied with the short type because you can only see short messages, so you can make the long type the length of the size two times longer. For more details you can follow the tutorial in this video.. Hopefully you enjoy your ESP Matrix. If you do, please share your makes, share the link, like and subscribe. As always, if you have any questions please let me know! . . . . . . . . "
"Bluz powered probe thermometer to stream temperature data to your smartphone. Never dry out your steaks or chicken again!. Read up about this project on . Bluz powered probe thermometer to stream temperature data to your smartphone. Never dry out your steaks or chicken again!. With summer arriving, and the fear of dried out chicken looming, we wanted a more high tech way to track the temperature of items we are grilling outside. There are wireless probe thermometers, but they require carrying around a separate readout. We wanted a way to read the termperature from our smartphone, so we took the just the thermometer and hooked it to bluz!. . Getting the thermometer to work was a bit of an experiment. The thermometer itself is a thermistor, which means the resistance changes with temperature, but not in a linear way. To get around this, we followed some advice in this article and added a second resistor in parallel. We had to measure the thermistor without the parallel resistor first to find the proper range. Then we added the resistor and measured various temperature points to create a linear function to determine the temperature based on the measured voltage.. . Once we had the proper resistance, we hooked one end to 3.3V and the other to a pull-down resistor and measured the voltage in the middle. We managed to calibrate it further by experimenting with the provided digital read-out.. . To make the circuit for the probe thermometer, we used the bluz Proto Mini shield. We soldered on a 2.5mm stereo headphone jack as that is what the probe thermometer used. Then we just soldered the rest of the resistors in place. The Proto Mini shield made this super easy.. Once everything is hooked up, just start the node.js server and open the webpage. The temperature is published every 1 second and will be updated on the webpage.. Next step is to add a notification for when the temperature exceeds a pre-set limit!. "
"Fully programmable, WiFi connected, small and customizable, Linux based webcam with web configuration/access. Read up about this project on . Fully programmable, WiFi connected, small and customizable, Linux based webcam with web configuration/access. I always wanted to build a wireless security camera with full control on its programmability / features and the possibility to hide it inside a very small, anonymous box.. Few weeks ago I started building it using the Arietta G25 board.The base elements of the project came from a sample application to stream video. I've built on top of that example using a specific HW configuration and different SW.. Please note: this is my first project publishing and I hopefully wrote enough detail. Also, it is the first delivery and I will later update it with some access control details and IoT integration steps. Please read it once before starting so that you are aware of the small issues and workarounds that I've found.. I will list first the HW instructions to assemble the device and then move to the SW configuration.. The board is based on a ARM 9 (Atmel AT91SAM9G25) at 400 MHz with 256MB of RAM and microSD for the OS (see picture below). You can add a WiFi module just on top to add network connectivity.  It runs Debian Linux and has a good number of I/O ports.. I've used a Microsoft Lifecam webcam but you can use any USB based webcam that has drivers on Linux distributions and is compatible with Motion. . See the HW section for the components list.. The webcam is very simple and can be easily opened to grab its board and sensor without breaking the whole thing:. You start by unscrewing the two small screws on the back of the camera to get rid of the front side. It has a small plastic clip but it will come away easily with the help of a small screwdriver.. Once opened you will see two more little screws on the sides of the sensor board. Removing those will allow you to lift the board. Be slow and careful here. You will see this:. You will see that the USB cable is locked probably with glue to the center of the back. If you succeed in unlocking it from the case you can try and pull some more cable (10 cm) from the case before cutting it. Ever since I was not able to unlock the cable I decided to simply cut it at the level of the case just to extract the sensor. I then soldered the cable back to the proper board pins. The board will look like this:. There was some white and hard glue close to the wires, I didn't remove it completely to avoid the risk of stripping away components.... You will notice that there are two black wires soldered to the cable shield. One is for the metal shield for the microphone: you can cut it away. A second one is connected to the board on the pin marked C in this picture. Apparently, it is not needed by the webcam, so I just unsoldered that (you can just cut it away if you prefer).. Ever since I've cut the wires so short inside the case, I took a longer piece of shielded cable from the original USB cable and replaced the wires on the board one by one, soldering them to the corresponding pinout. Be patient and use a small soldering tip here.. There was also a small piece of scotch tape around the sensor: I actually removed that, but I think I will place something similar again when mounting the whole device in the final box.. So now you have the 4 USB wires to be connected to a USB port on the Arietta. First look at this picture for the webcam pinout:. I decided to power the whole thing using a simple 5V - 700 mA cell phone charger. So the 2 wires (+5V and GND) coming from the charger will power both the Arietta and the webcam. This is the wiring diagram for USB and power:  . Next thing to wire is the antenna coaxial cable, using its tiny plug. Be careful: I've used a magnifying glass in order to avoid destroying the whole thing with my BIG fingers... :-). On the opposite side of the coax cable there's a small golden SMA female: you will attach the WiFi antenna to this plug.  See following pictures: . In order to connect, work and debug in a easier way I decided to use a serial debug cable.. The Arietta has 6 pins available for a serial debug port and ACME Systems sells a complete debug port adapter.   Ever since I already had a USB to TTL cable adapter with proper chip and voltage levels that I used for the Raspberry PI, I decided to reuse that soldering a 4 pins male header to the board.. It is really useful since you can follow the whole Linux boot sequence and also connect and work using a simple terminal client like Putty.  . See the pictures below for the correct header placement:. You can purchase a microSD with the OS ready to use. OR. You can download an image file of the OS from the manufacturer website at http://www.acmesystems.it/binary_repository On that page you will find full instructions and links. But here is a quick recap:. . The Arietta has 3 USB ports:. This means that if one wants to use the webcam at full resolution (1280x720 in this case), he will need to use port A with this configuration that includes the WiFi module. Fortunately this conflict can be solved.. In order to use port A, we will need to avoid using the g_ether driver that is configured by default to get network connection via the microUSB connector. You will see how in the steps below.. . Arietta, just like the Arduino is accessible and programmable using a micro USB connector. Since we will disable the config to use the microUSB for networking, I strongly suggest to start and continue using the USB to TTL debug cable, connected as described in the HW steps, for the first 4 steps at least.  . On this page http://www.acmesystems.it/tutorials you will find several ways to connect to the Arietta depending on your OS and the preferred channel (serial or network). Please refer to the links in this page for the suggested SW and methods. . . Plug the USB to TTL debug cable in a usb port of your laptop/PC a driver should be activated automatically. . Here I've found an issue: I'm using Windows 8.1 and the ""Prolific"" driver for my R-PI USB to TTL debug cable seems to be no longer supported. I tried some workarounds but with no success unfortunately.  I also have an Ubuntu Virtual Machine running on VirtualBox, so I've run that VM and enabled the Ubuntu driver for the USB to TTL cable from the VirtualBox VM menu .  This one worked immediately.. On the Ubuntu desktop, open a Terminal window and start a connection with Arietta using this command:.     sudo screen /dev/ttyUSB0 115200. where /dev/ttyUSB0 is the device id assigned to the debug cable by default.. . Double check all your wiring, prepare the cell phone charger and power-on the device you just wired. Hopefully, you will not see smoke and you will be very happy about this :-). You will notice that a small red LED will start blinking on the Arietta board and you will see lots of Linux messages, boot related, appearing in the terminal connection window on your laptop.. Wait for the boot sequence to complete.  A login prompt will appear.. . Enter the following default credentials:.     username:  root.     password:  acmesystems. You are now connected as the root user, so you will have all the permissions needed to perform the next steps.  You will also have the permissions to create issues :-) so be careful.. I've published on github a set of configuration files copied from my Arietta.  I kept the same folder structure so you will know where they have to be copied, replacing the existing ones.. Download the zip file on you drive and open it to your preferred folder.. . Using a text editor on you laptop open the file /etc/network/interfaces . You will notice a block of lines commented out with asterisks.  I did this in order to disable usage of network through the microUSB port. This way the g_ether driver will not use the USB port A  that we want free for the webcam.. Now you will have to customize some of the parameters in order to connect to your WiFi.. Ever since most of the home networks should have at least wpa security enabled, I've copied the configuration for my one, changing my real security and config details (IPs, wpa-ssid and wpa-psk).. I wanted to have a static address assigned to this device. I've chosen 192.168.0.24 (within my network address range) and specified this and my network gateway 192.168.0.1 in the file. You can/should customize these for your network and preferences.. Enter your WiFi network SSID (network name) in place of YourNetworkSSID. The value to be specified for wpa-psk has to be generated starting from your wpa pass phrase.  Enter this command in your terminal session to be executed on the Arietta:. the program will answer with few lines similar to these ones:. copy your long exadecimal string and enter it in the editor on the laptop replacing the value for wpa-psk:. Save the file on your laptop for backup and reference.  Then select and copy its whole content to the clipboard.. Now inside the terminal session enter this command to edit the Arietta network configuration file:.     nano /etc/network/interfaces. the editor window will open, hit F9 (delete line) until you have deleted all the file content.. Now paste what you copied to the clipboard from the corresponding file (right-mouse button options, depending on the client you are using):. Hit CTRL-O to save overwriting the file. Hit CTRL-X to exit nano (the text editor). . At this point you can power-off the Arietta. Wait few seconds and then power-up again.. Debian Linux will reboot and the WiFi network connection should be established. Depending on your overall network configuration the time taken by the Arietta to get a network link up will be shorter or longer. In my case it is usually up in less than 1 minute from boot. You will see a specific message about this at the end of the boot sequence messages coming through the debug cable:. I plan to investigate how to improve this timing, any suggestion is welcome :-). . The Arietta has a small web server (lighttpd) installed to allow first check of setup and to give access to the Codiad web based IDE and Shellinabox (a web based terminal emulator).. Open your browser and enter a url based on the IP address you configured ( 192.168.0.24 in this example):    http://192.168.0.24/ . You will get the following page content:. From now on, you have various connection options to work on the Arietta: keep using the debug cable+terminal session OR connect via network to the configured IP address using the PuTTY client on windows OR using the web based Linux shell.. Please note that, when using the web based shell, you will connect using the acme/acmesystems default credentials. In order to work with root permissions you will need to run this first command after the login:. and enter the acmesystems password when requested.. Once connected through a terminal session you will now perform some sw installations:. Install HTOP for easier management of processes and memory usage checks (if needed):. Install Motion , a powerful open source sw that allows the creation of this security camera. During my first tests I realized that, should the power go away you would lose the correct date/time unless you add a backup battery. I didn't want to add a battery to this project since I want to keep it small. . It's important to get the video frames stamped with correct date/time and also to have Motion creating the video folders with correct/current date.. So I decided to install the NTP daemon because it will set and keep synchronized the Arietta clock with network time servers: . In a later step we will customize a bit the NTP configuration.. Motion will store images and videos in sub-folders named with the current date. During my tests I've seen that Motion was still creating some folders with OLD/WRONG dates.. That was happening because during the boot sequence Motion was starting his work before NTP had completed his own.  In order to avoid this issue I did the following changes:. - disable the motion daemon. - launch Motion execution using a custom shell script. - in that script: check for internet connection availability in a loop for up to 25 times, if internet is available then set the date/time directly with the NTPDATE command and then launch Motion.  Please note that, if no internet is available, then the script will launch Motion anyway so that you get it running and taking pictures (this has still some priority).. That script is ready for you between the files I placed on github. We will copy them at a later stage.. Please enter the following command to disable the Motion daemon:. Please note that there could be other better approaches to solve this, but I did not get working suggestions during that time frame. If anyone has good advice about configuring a boot sequence... it's very welcome.. . WinSCP is free utility to explore a remote Linux file systems using the SCP protocol. . You can download and install WinSCP from this link   http://www.winscp.net. You will find more instructions here:   http://www.acmesystems.it/winscp. The program is very easy to use and is based on two windows placed side by side, representing your laptop file system and the Arietta file system. You can easily copy files from one side to the other and create/delete/rename files and folders.. . Using WinSCP go to this Arietta folder /var/www/ and create a new folder named motion. Please note that the the folder names are case sensitive, so do not change them.. After creating the folder, I've setup its permissions like you see in the following screenshot. You can open this Properties window using the right mouse button on the newly created folder. I will probably review the permissions at a later stage.. go to this folder /var/run/ and create a new folder named motion. On your laptop open this file with a text editor:. \etc\ntp.conf  . and ensure you specify your preferred time server in place of the current one ( ntp1.inrim.it ). . I've selected that one because is the official Italian one. You can search on the web for your one and use its name here.. Save the file and exit the editor.. Always on your laptop open this file with a text editor:  . \etc\init.d\lanciamotion.sh  . do the same change also in this file from  ntp1.inrim.it  to your preferred server name.. Save the file and exit the editor.  . . Copy the following files from the exisitng path on your PC to the corresponding path on the Arietta:. . \etc\ntp.conf. \etc\resolv.conf. \etc\init.d\lanciamotion.sh. \etc\lighttpd\lighttpd.conf. \etc\motion\motion.conf. . Within the Terminal session:. give the execution permissions to the script:. activate the motion startup script entering this command:. update-rc.d lanciamotion.sh defaults. . Reboot again your Arietta powering off and on after some seconds.. Follow the boot sequence on the debug port Terminal session.. You will notice that at the end of the sequence the network connection will become available. the date/time will be set by the ntpdate command. and Motion will be launched:. nohup is a command used to launch Motion detaching its process from the current shell session. This will hide all the Motion startup messages. If you need to debug, you will find all Motion messages stored in the file  /etc/init.d/nohup.out. The webcam board blue LED will stay on signalling that Motion is using the webcam.. . At this point the Arietta will offer you two web interfaces interfaces, see screenshots below.. The motion web admin interface (  http://yourAriettaIPaddress:8080/  ) will allow you to change the configuration on the fly and control motion status:. To see the video and images captured by Motion, open your browser at http://yourAriettaIPaddress/motion  this will show you a web folder with links to folders (one per day) and some .avi files (one per 

movement event detected by Motion).. Inside the daily folders you will see images related to movement detection events plus an .mpeg video condensing all the event frames for the whole day (sort of time lapse video).. It is also possible to watch video frames flowing through Motion during its processing. You can open the stream using for example VLC or similar video player.. Please note that the framerate is low since Motion is using 1-2 frames per second to perform its processing and detect movement in the scene monitored by the webcam.. Point the video player to this URL:    yourAriettaIPaddress:8081. Here is an example of the video showing the number of changed pixels (I placed a book in front of the webcam so it is very high), the rectangle highlighting the area with changes and the date/time stamped on the frames:. I think I wrote a lot, probably too much, Please let me know your feedbacks, really appreciated.. I already have a to-do list here for the next steps.. If you use these build notes and find issues, errors or missing info just let me know and I will be happy to do my best to support.. Please note that I'm based in Italy so GMT+1 ... consider this when waiting for an answer :-). TO-DO list: . . "
"Here's an introduction to control a Nema 17 stepper motor with the help of the Adafruit TB6612 OR A4988 Stepstick OR PHPoC PES-2405 R2. Read up about this project on . Here's an introduction to control a Nema 17 stepper motor with the help of the Adafruit TB6612 OR A4988 Stepstick OR PHPoC PES-2405 R2. I was struggling with the wiring of a stepper motor and so I hope I can take the fear out of you with this article: I use the same PINs to illustrate two different devices driving the Nema 17 stepper motor using an Adafruit TB6612.. In the beginning, a short test with an LED is worthwhile to find out the correct cable routing of the two coils in the stepper: pick up an LED and insert the two feet into the adapter: move the motor with your hand.. If the LED is lit you have identified the two cable for connection to the MOTORA or MOTORB breakout board.. The same structure works with the given library ""Stepper"" examples for both the Uno and the Photon (here only the PINs in the original example have to be replaced by 4, 5, 6 and 7). . Adafruit offers a good step-by-step guide to their break-out board.. Now we are ready to face ambitious projects as well. We already have the right breakout board in our hands: this can up to operate four solenoids, spin two DC motors or step one bi-polar or uni-polar stepper with 1.2A per channel.. I found in my component box an alternative Stepper Motor Driver, which I can also recommend: the Stepstick A4988 by Elegoo.. You can read the technical features on the website of the manufacturer.. A nice explanation by video you can find here.. With the knowledge from above, should the adaptation of the wire loop for the A4988 be equally possible? And so it behaves:. ... using the example of the photon:. Direction <> Device A0. Step <> Device A1. Sleep <> Reset - mandatory!. MS3, MS2, MS1, Enable <> without connection. GND, VDC <> 5V (from Device). 1B, 1A <> coil1. 2A, 2B <> coil2. GND, VMOtor <> 12V (from external PowerSupply). To ensure a drop in performance is still a 47 nF Capacitator when supplying the 12 volts necessary.. . Datasheet from Pololu here.. Now when I had the structure in front of me, it was now to influence the rotational speed to take: it offers a potentiometer. In the picture you see a blue ""U 103"" which can be addressed at the side of the notches with GND, signal and 5V. In addition, a black potentiometer, which can be rotated better thanks to its large rotary lever. The wiring is identical and so I have passed the signal to the photon at A2.. The necessary code can be found below.. If you do not have any potentiometers at your disposal, you can also use software-based potentiometers: for this purpose, we integrate the library from Blynk. Blynk offers us several predefined components: I chose a slider and connected it to ""virtual 0"" in the Blynk app. . The value scale is restricted from 0 to 1023, where 1023 means ""slow"".. The slightly changed code can be found as usual below. Two additional variables were added and instead of reading out A2, the values arriving from the slider are now linked with ""virtual 0"".. Pay attention to the use of the function abs (), otherwise it will not work as expected.. Has the map function noticed? Here he is explained:. Mapping is a way to translate a value from one range of numbers to another. It can be used to create a direct relationship between an input and an output. For instance, the value provide by a potentiometer could control the stepper-rotation. To accomplish this, there is a very useful function called map(). It looks like this: . value is the value that you would like to map.  fromLow and fromHigh is the low and high end of the original data set.  toLow and toHigh are the low and high values of the mapped data set. If you were to map the full range of analog input (0 to 1023) to the full range of analog output (0 to 255), you’d use the following line of code. Arduino Map-Reference and Particle Map-Reference. If you are unfamiliar with PHPoC, I recommend getting familiar with the preparation/introduction first. . Within the product family you will also find an ""smart extension board"" to use as a shield on the PHPoC Blue/Black (but not for the PHPoC Shield for Arduino). The PES-2405 R2 is piggy-backed onto the PHPoC board with its PINs and the stepper motor is already under the control of PHP. This is possible with a separate library SD_SPC.php via include_once ""/lib/sd_spc.php"";. I have detailed command usage here and is quite extensive.Here move and goto are demonstrated.. The examples are set via DIP switch on port 1 (1,2,3 below, 4 above). More information in chapter 3 - Slave ID Switch.. If you have added the library with the help of the PHPoCD application, then the familiar wiring of the motor is sufficient with the aid of a screwdriver on the green terminal (A +, A-, B +, B- and separate voltage of 12 V in GND and VM).. The PHPoC is powered by 5V from the power bank.. Now add the PHP files to the root directory and call the URL to the PHPoC in the browser - like http://192.168.178.55/goto.php.Already the stepper should move - done.. . . "
"The company that toys with your emotions introduces its newest product: Nostalgia.. Read up about this project on . The company that toys with your emotions introduces its newest product: Nostalgia.. lostplayground: Toy with your emotions.. Nostalgia: Swing back to your childhood.. In its first iteration, Nostalgia is a swing that plays songs (mostly TV show themes) from the swinger's childhood. Nostalgia in its current form is aimed at college-aged students, with the sounds hailing from the 90s. The goal of Nostalgia is that the higher and longer a person swings, the farther back in time they are transported through their memories and nostalgia for childhood. In this way, we aim to remind people to find time for playfulness in their lives (just like stumbling across Nostalgia) and to change the meaning of old playground toys to people who think they've simply grown up and grown out of their youth.. In the future, we hope to create a Nostalgia experience that fits the Experiential Overview at the top of this page: an experience that is tailored to each swinger, combining not only TV show themes but music, old advertisements, and other sounds that are reminders of the specific person's past. Nostalgia is just one of many products lostplayground hopes to perfect in order to get people's emotions going and people's brains thinking.. lostplayground: Toy with your emotions.. Lost Playground Keynote PresentationNote that the typography is incorrect in this version of the presentation.. It's a cold spring night, with a gibbous moon lighting the night and you're walking through the redwood groves to get home. Little do you know, your presence causes a beam of light to your right in the groves. You glance over and see a mysterious swing that begins to oddly sing as its chain links chime in unison and the metal grinds the tree giving it support. The allure of this life-like swing has stopped you stone-still and the green seat reminds you of a once loved thrill.. You walk over and sit down when the beam disappears and a familiar sound starts to sing. The music that plays can't help but bring you to reminisce of that first kiss. It changes and is from that TV show you'd never miss when you were in middle school. And again to that painful diss he'll never rescind. Swaying back and forth nothing else matters because you're fully present but completely lost in some form of past. The higher you swing the further you're taken back.. Each song is an emotional snack. The feeling of speed and cold wind sway your hair like the leaves of the tree as your heart feels a tease. Your hands feel smaller. The world around you looks bigger. You reach the peak and start feeling weak just as you reach that understood self. You want to go higher but you can't. You want to bring back more but only the sound unlocks the thought. You want to be a kid again in a playground of life's time. Suddenly you're back where you started, the swing is gone, and you continue on the path as time ticks on. . LogoFor the logo, we were inspired by abandoned amusement parks especially like the horse here. Usually, horses are in a large group on a carousel. We created a logo with a solitary horse to emphasize the emotions brought about by our product line.. Typeface>We went with a round, friendly typeface which seems very child-like and playful.. Colors>Our colors are bright, fun and youthful. We want them to entice people to interact with our products. The color names are purposely ironic to display the true feelings brought about by our brand.. The Swing>Green is the color of new beginnings and fresh starts. Thus, we chose it to represent the Nostalgia. We wanted the brightness of the green seat to be contrasted by the rusty, grotesque chains. The aesthetic of the swing was inspired highly by abandoned playgrounds and parks. . For the swing itself, we were very lucky. Originally, we wanted to build our own swing from scratch using wood and rope. One of our teammates, however, happened to find a free swing on the side of the street. We used this to our advantage and spent time cleaning it up and incorporating hardware onto it.. You can either build a swing using a blank of wood and ropes, or happen to come across a plastic swing with chains like we did. Make sure that the chains/rope is at least over 12 feet long, because you will want to wrap it around when the swing is hanging.. If the swing is found on the sidewalk, definitely wash it with soap and water for a very long time. Wash the chains as well. Then, for any swing, you will want to paint it so that it is more enticing to the audience. We spray-painted our swing green to fit our branding colors.. Our company, lostplayground, was branded onto the swing seat using white vinyl. This way, the swing would be unique to us, and not just any old swing. We let this sit and made sure not to bend the seat of the swing overnight so that the vinyl wouldn't tear or move.. For Nostalgia, the swing that takes you through your past, we needed a circuit that utilized an accelerometer, a flex sensor, and sound. The flex sensor would know when someone was sitting on the seat, and then turn on the accelerometer. The accelerometer would changes what sounds played based on the acceleration of the person swinging. . . We divided this task up between people and each worked on a smaller part of the circuit. By doing this, you get to understand better how the input or output functions, but it is much more challenging to find out how to connect all the circuits together.. We attached the Arduino and breadboard to the bottom of the swing using heavy-duty tape, and attached the speaker (in a cardboard tube resonance chamber) low on the chain handles using ties. The speaker was soldered to a longer wire so that it could still attach to the breadboard. In the case of our project, the flex sensor and Arduino did not work with the sound circuit, so we added a button that could turn on the sound for us.. "
"Make beautiful music with Adafruit, SparkFun, Arduino and ProtoStax! Create an RGB matrix audio visualizer with Arduino.. Read up about this project on . Make beautiful music with Adafruit, SparkFun, Arduino and ProtoStax! Create an RGB matrix audio visualizer with Arduino.. . . In this article, I explain how to build an RGB LED matrix audio visualizer, using an Arduino, an RGB LED Matrix Shield, and an Audio Spectrum Analyzer Shield, then put it in an enclosure so that you can have a finished project that you can display by your music system to have a nice light show of your music! . For the Audio Spectrum Analysis, I use SparkFun's Spectrum Shield, that uses two MSGEQ7 graphic equalizer display filters, that split a stereo audio input into 7-bands (per channel) and read the amplitude of each using the ADC on your Arduino. It comes with Arduino sample sketches to get started. . For the RGB LED Matrix, I use Adafruit's NeoPixel Shield for Arduino, that consists of 40 RGB NeoPixels (Adafruit's terminology for their WS2812 light source). Red, green and blue LEDs are integrated alongside a driver chip into a tiny surface-mount package controlled through a single wire. They can be used individually, chained into longer strings or assembled into still more interesting form-factors. In the case of the Shield, they are chained together. The Shield also comes with the Adafruit_NeoMatrix library, that simplifies access to the RGB LED Matrix and controlling the LEDs. . Lastly comes the enclosure. Some of you may be aware that I've created a new stackable, modular enclosure system called ProtoStax. It was a personal itch that I had to scratch - I wanted an enclosure that supported different stages of prototyping, offering protection and open access when starting out, with the ability to add side walls and the top later, but also have the ability to stack multiple units either side-by-side or one on top of the other, thereby having the ability to expand with prototyping needs and the addition of other boards and components.. In this example I use ProtoStax for Arduino, a clear acrylic enclosure for the Arduino -- it fits both the Uno/Leonardo footprint as well as the larger Mega/Due footprint -- that is also stackable and modular and has room comfortably for the two Shields (with some minor modifications, that I will outline). It is clear and sturdy and also has rubber feet to slightly elevate it and protect the surface of your table, so you can display your Audio Visualizer and its light show along with your music system! 😊. Ok, let's get started, shall we? 😊. Let us first mount the Arduino (Uno in our example) to the enclosure's base plate. This gives it protection while offering full open access to it to configure and setup the Arduino and play around with it. When you are ready to close it up, It is easy to add the side walls and top plate and secure everything with screws.. Mount the Arduino to the base plate, and add feet and other hardware to prepare the enclosure in Platform Configuration. See steps below in the slideshow - the caption for each image is numbered and gives additional explanation for each step.. . Here are all the steps as an animated gif:. . . The SparkFun Spectrum Shield does not come with headers.  Fortunately for us, Adafruit NeoPixel Shield for Arduino comes with both stacking headers and plain headers. Since I want the NeoPixel Shield to be at the top, I want to use plain headers with it so that it will be flush, and this leaves the stacking headers for use with the Spectrum Shield, which is just what I want! 😉. However, the Spectrum Shield with stacking headers does not fit snugly - the USB and Power ports on the Arduino Uno get in the way, as shown in the picture below. . . . I made the following two modifications - . . Now it fits snugly!. . . . The Adafruit NeoPixel Shield goes on top of the Spectrum Shield. You will first need to solder in the regular headers (that it came with). I also soldered in the terminal connector that it came with, though in this example, I'm powering it using the Arduino, as all the LEDs will not be turning on simultaneously, so the power consumption is within the amounts that the Arduino can provide. . Message from Adafruit's NeoPixel Shield for Arduino page:. Let us take a look at the Demo Code and see what it is doing. To do that, we can split it into two main parts: . You can quickly reference the demo code here:. https://github.com/protostax/ProtoStax_Audio_Visualizer_Demo/blob/master/ProtoStax_Audio_Visualizer_Demo.ino. . You can refer to the Spectrum Shield Hookup Guide for additional information pertaining to the Spectrum Shield. I've summarized the information here.  . By writing a digital sequence to the STROBE and RESET pins of the Spectrum Shield, you initialize the MSGEQ7 chips used by the Shield. You can then proceed to read the magnitude of each of the 7 different frequency bands that the spectrum is split into. Each band is read followed by pulsing of the STROBE pin to initiate reading of the next band. The values are stored in Frequencies_One[7] and Frequencies_Two[7] for the two channels of the stereo input.  The values are read by using the 10-bit ADCs of the Arduino, and the output value can thus be 0 - 1023 - they provide a representation of the amplitude of each frequency band.. The 7 bands of the frequency spectrum are: . I split these up into 3 ranges - BASS, MID_RANGE and TREBLE. Typical Bass range is 60 to 250 Hz, so the first two bands are in the BASS range. Mid-range frequencies are typically 500 Hz to 2 kHz, so I group the next 3 bands into MID_RANGE. I group the remaining 2 bands into TREBLE. . [Note: I also note the max reading of each of the bands into a separate variable. This can possibly be used for automatically scaling the readings to the level represented by the RGB matrix columns - this is useful in the case where the input signal is low - otherwise only very few of the RGB matrix would light up in that case. ]. You can refer to the Adafruit NeoPixel Überguide for additional information pertaining the NeoPixel Shield and NeoPixels in general. I've summarized the information pertaining to our use here. . The main point I will try to clarify, which I found a little confusing at first, is the direction and orientation of the NeoPixel Shield and the numbering of the coordinate system. The Überguide explains it, but I think I can make it a little easier. . First thing to note is that in the coordinate system, [0, 0] ALWAYS refers to the top left, regardless of the orientation. . Next is to note the WIDTH, followed by HEIGHT, of whatever orientation you are interested in (i.e. 5 x 8 vs 8 x 5 in the case of our Shield). Third is to note the position of the PHYSICAL LED #0 (marked by the cute Adafruit logo). TOP-RIGHT, TOP-LEFT, BOTTOM-LEFT and BOTTOM-RIGHT as the case may be. Also note the orientation of the progression of the physical LEDS. The layout is PROGRESSIVE in our board (the next physical led after the end of one row starts at the beginning of the next row as indicated by the YELLOW line). The orientation of the progression is along the ROWS for when the width is broader (horizontal orientation) (as indicated by the short GREEN arrows), and COLUMNS  with the width is narrower (vertical orientation) (again, as indicated by the short GREEN arrows). . These are illustrated by the 4 images below in the slideshow. The captions include the pertinent settings in each case!. . . In our example, we have 7 bands of frequency, and an 8 x 5 (or 5 x 8, depending on which way you look at it!) matrix. I chose to display the 7 bands along the 8 dimension (leaving one unused). I would then display the amplitude representation of each frequency band along the 5 dimension. In other words, I want my progression to be as follows: . . I want my origin to start at the lower left corner (representing the lowest level of the lowest frequency band) and work its way upwards. But since the first thing to note in the coordinate system is that [0, 0] always refers to TOP-LEFT, you should tilt your head to the left and look at the image below, to understand the choice of values for initializing the NeoMatrix! 😊(WIDTH = 5, HEIGHT = 8, TOP-RIGHT, COLUMNS PROGRESSIVE). . . Let's delve a little in the demo code pertaining to the NeoMatrix and graphing the frequencies. Firstly, we have determined that our NeoPixel has WIDTH=5, HEIGHT=8, and the orientation we like is TOP-RIGHT, and COLUMNS PROGRESSIVE. Follow the setup required for the matrix in the setup() function. . In the loop(), we read any Serial input to select the color scheme  - I've defined 3 different color schemes. I then call Graph_Frequencies with that color scheme choice. Note also the first parameter that can select the range of frequencies to display (BASS, MID-RANGE or TREBLE). For now, I'm selecting all the ranges to show - it is left as an exercise to the reader to implement selection of ranges to display - either via Serial input or by including a momentary press button to toggle the display between BASS, MID_RANGE, TREBLE or ALL. The selection of the RANGE determines the ""from"" and ""to"" range of the rows to be displayed. . For each row (frequency band), we pick the larger of the two frequency magnitudes (right channel and left channel of the stereo input). That value lies between 0 and 1023 as we have already discussed. We need to map that into 5 distinct columns of the display, so we divide the frequency by the FREQ_DIV_FACTOR which is defined as 204 (1023/204 = 5, which will map an output of 1023 to 5). Just to be safe, we also make sure the numCol to display is not larger than 5. This determines the number of columns to display for each frequency band. . I then use matrix.drawPixel() to display the appropriate pixel at the appropriate color.  . I use the HSV color wheel in my graphical display. This posed some extra wrinkles to overcome. . Typically, the usage is matrix.drawPixel(column, row, Color(r, g, b)), where Color(r, g, b) represents a color as specified by RED, GREEN and BLUE values. However, using HSV allows for some nice smooth color transitions. . NeoMatrix provides the matrix.ColorHSV(uint16_t hue) method that takes a single uint16_t hue value and returns a uint32_t HSV color. . However matrix.Color(r, g, b) returns a uint16_t color. matrix.drawPixel also expects a 16 bit color. . The way around this is to use matrix.setPassThruColor(32 bit color value). This sets a flag in matrix that causes drawPixel to ignore its color argument and instead use the 32 bit color already set by the above method. Just remember to call matrix.setPassThruColor() to reset the flag in question. Not super elegant, but it works. For example, . With HSV, it is possible to increment the 16 bit hue and generate the HSV color code, thereby getting nice smooth transitions in color. . Here are the different code pieces for reference: . Next is the color scheme selection. Note that I have made provisions to be able to select colors for different frequency ranges (bassHue, midHue, trebleHue). I have created 3 different color schemes - one that uses green to red/pink range for display from lowest amplitude to highest, and the other that uses a more pink/blue shifted range. The 3rd scheme uses the same color for all pixels, but cycles through the whole color wheel as it goes along. I'll show you a video of all 3 color schemes. . . . Here is a video of testing everything out . . . . . Install the top bracing elements, side walls, audio cables and top. See steps below in the slideshow - the caption for each image is numbered and gives additional explanation for each step.. . . . Here are all the steps in a single animated gif:. . . You can now have a fun audio visualizer that you can display alongside your music system and have some cool homemade light action augment your music!. . . Here are some ideas to take the project even further!. 1. Currently, the audio cables (input and output) are plugged into the Spectrum Shield in the enclosure, and thereby you have this enclosures with these wires connected and dangling outside.  Instead, you can add a couple of panel mount stereo jacks (listed in the list of ""things"" used) to the side wall near the stereo jacks of the Spectrum Shield, and then solder an audio cable with a 3.5mm male stereo audio jack to each, and then plug those instead to the audio jacks of the Spectrum Shield. In this case, your enclosure becomes very neat and all the wiring is self-contained with only audio jacks on the enclosure for external systems to plug into. . 2. You can add more even more light schemes to your Audio Visualizer - different color ranges, different patterns. . 3. Add the option to enable/disable frequency ranges using the Serial input - currently only color schemes can be changed but not the frequency ranges to display. . 4. Add a switch to toggle between different color schemes instead of using Serial input. Modify the enclosure to add a hole to one of the long Side Walls to accommodate a panel mount momentary push button switch (listed in the list of ""things"" used). . 5. Add a second switch to toggle between different frequency ranges displayed (BASS, MID_RANGE, TREBLE, ALL) and mount that switch to the enclosure's side wall. . 6. Because the enclosure is made of acrylic, you can use some blue painter's tape over it to protect the surface, and a drill to drill a hole of the requisite side to mount the panel mount stereo jacks and/or switches. It is recommended to use a step drill, or start with a smaller hole and then expand the hole until it is of the size you desire. The stereo jacks listed need a mounting hole of 5/16"", and the Switches need a mounting hole of 0.47"".. 7. Sand the top surface of the top plate lightly and uniformly. This will act as a light diffuser and give you a more diffused and gentler light effect. . If there is sufficient interest, I will update the project to show it with the Audio Jacks and Switches and an Opaque light diffuser top - please send me a message if you would like to see the updated project! 😊. Can you think of any more? Write a comment below to let us know! 😊 Feel free to also ask any questions you may have! 😊. Happy making! 😊. . . "
"Do you want to controls your TV, DVR and more using RaspberryPi?. Read up about this project on . Do you want to controls your TV, DVR and more using RaspberryPi?. In this chapter I will explain how can we control a TV or almost everything that uses an infrared remote control using Raspberry. This is part of my Home Automation project.. LIRC is a software that allows you to decode and send infra-red signals of many (but not all) commonly used remote controls. Thanks to Ar0n now we can use lirc with RaspberryPi.. But before that, we need to connect some parts that are capable to send and receive/decode IR signals.. If you want to send IR data then you will need a IR Led.. First install Lirc:. sudo apt-get install lirc. Then edit /etc/modules and add the following (if you use another GPIO pin then change the lines):. lirc_dev. lirc_rpi gpio_in_pin=23 gpio_out_pin=22. Edit /etc/lirc/hardware.conf and change it to:. LIRCD_ARGS=""--uinput"". LOAD_MODULES=true. DRIVER=""default"". DEVICE=""/dev/lirc0"". MODULES=""lirc_rpi"". LIRCD_CONF="""". LIRCMD_CONF="""". If you run an older 3.18 kernel change the /boot/config.txt file and add the following line: . dtoverlay=lirc-rpi,gpio_in_pin=23,gpio_out_pin=22. Reboot Raspberry Pi in order to apply changes.. Connect the IR Led. I used the following schema:. After you have installed and configured Lirc for RaspberryPi, the first thing to check is if your TV is in Lirc Database. In my case I am able to control: My LG TV, Microlab Audio system. For starting TV and then MUTE I created a small script:.  #!/bin/bash. 	/usr/bin/irsend SEND_ONCE lg_tv KEY_POWER. 	sleep 10. 	/usr/bin/irsend SEND_ONCE lg_tv KEY_MUTE. Then I created in RController a new command. This way when I get home, I can turn on TV from my phone, dim lights and set an ambient atmosphere to enjoy my movie.. I created a small script that runs via cron on my RaspberryPi and checks if current time is past 7 PM and if I am at home (it will search for my phone by ping). If it is past 7PM and I am arriving home, it  will turn on lights and TV.. . "
"How to make a cable that can connect your Arduino board to a TV RCA video jack. Put your Arduino on the big screen!. Read up about this project on . How to make a cable that can connect your Arduino board to a TV RCA video jack. Put your Arduino on the big screen!. Arduino with TV! Yup, it is possible only with two resistors. Let's see the video first:. Arduino boards are pretty useful, but lack an output screen. This project let you allow to write sketches that will output onto a TV screen via an AV Video cable. This is very much a beginner project that just about anyone can do!. First off, you need to add the resistors inline to some hookup wire, according to this diagram:. Your RCA cable will have 2 wires in it, a ground wire and a vid (Video) wire. Generally the vid (Video) wire is sheathed in plastic and the ground wire is not.. Depending on your setup and what you want to achieve (audio or video etc) refer to the following hookup guide:. I used heat-shrinkable tubing to make sure that everything was electrically insulated and to provide a little more strength in the solder joints:. You can then plug your new Arduino TV out cable into a TV or monitor and then plug the hookup wires to the Arduino.. Different Arduino boards have different setups with the Sync/Video, but you can rest assured that Ground will always go to the Arduino GND pin.. Step 1: Arduino-TVout Library . Download Arduino-TVout library.. Step 2: Install Library. Open Arduino and goto ""Sketch"" menu / ""Include Library"" / ""Add .ZIP Library..."" and select the library downloaded in Step 1. . Step 3: Compile & Upload Sketch. From ""File"" menu / ""Examples"" / ""Arduino-TVout"" and select ""DemoPAL"" and upload it.. Done!. Now, connect up the Arduino and give it a go!. "
"Combine Arduino with Bluetooth and relay, and control your AC appliance with a smartphone app.. Read up about this project on . Combine Arduino with Bluetooth and relay, and control your AC appliance with a smartphone app.. I want to control my room ac appliances with my smartphone so I made this minimal setup which uses HC05 to trigger the relay.. watch the video for tutorial. . . "
"An easy-to-build and low-cost water quality monitor.. Read up about this project on . An easy-to-build and low-cost water quality monitor.. After I saw TDS measure circuit I am thinking if it possible use few parts to complete measure. . Here I try as below.. See pictures and caption below.. Here I have one bottle clean water and one bottle non-pure water.. I collected three different data comparisons. 1. Gold plated pin is out of water. 2. Pin in clean water. 3. Pin in non-pure water. . When pin in clean water, data is. ""159, 434, 874, 601"". ""163, 433, 873, 600"". ""165, 436, 871, 598"". When pin in non-pure water data is. ""159, 462, 876, 566"". ""159, 465, 878, 564"". ""158, 463, 878, 565"". Here the 1st and 3rd are close at each sample, 2nd and 4th have 25~30 count gap.. It is exactly what I want ""can be used to distinguish water quality."". Next step I need a TDS meter as standard reference.. =================================================================. Today I increase the number of ADC sampling and use my home's 4 different water test again.. Bottle 1 is RO water.. Bottle 2 is groundwater.. Bottle 3 is tap water.. Bottle 4 is water outdoor.. Test video as below. it seems that RO water ADC value have very different with other.. I also add WiFi-web-server function to show data on explorer.. Here the sensorValue number mean. sensorValue0 port voltage is Low Low. sensorValue1 port voltage is Low High. sensorValue2 port voltage is High High. sensorValue3 port voltage is High Low. But since I change the pin the value order ( 2nd and 4th ) are not the same with first time test.. "
"My broken chicken coop door opener now has manual control and LED indicators so I can see from the house if the chickens are safe at night.. Read up about this project on . My broken chicken coop door opener now has manual control and LED indicators so I can see from the house if the chickens are safe at night.. After 12 months of use, the system is working flawlessly! On one or two occasions, something was blocking the door when closing but the system detected it and I saw the red LED blink fast so I could solve the problem (an obstruction under the door) easily.. I'm very glad with this Arduino solution!. With a minor change to the code, you can also use this project for a 'generic' Coop Door Opener system.. From the original VSB Coop Door Opener I only use the motor and switches. . One of my two (excellent) VSB chicken coop door openers was broken. This was caused by wood expanding due to moisture, preventing the door from opening.. If the door get jammed at closing, the motor simply stops but not so when opening! In that case the motor keeps on running for ever, destroying the Mosfet H-bridge chips I suspect.. So I sent an Email to AXT Electronics in Germany and they advised me to sent the unit for repair. But I decided not to spent the 60-80 euro's and first look if I could repair it myself.. So at first I stripped the plastic from the backside of the PCB to see if I could exchange some components. But later I decided to forget about the repair and to add an Arduino controller which is much more fun :). This way I could add manual control and some LED's with Fresnel lens holders to see from our home if the door was closed at night and open at daytime.. I used a 30 x 30 hole piece of stripboard to mount my home-brew Arduino clone, an Adafruit motor driver and some other components. . Be sure to use the right motor driver chip/board!  Some do not work at certain motor voltages. This board did so I could use one 9V 100mA power supply, regulated to 5V for the Arduino and motor.. The motor driver PCB is removable by using some high quality female headers so if it burns up due to a jamming door (like the orginal VSB PCB), I can easily exchange it. But maybe this motor driver is protected so probably this was not necessary.. To connect the wires for the reed switches, the push buttons for the manual control and LED's I used male and (high quality) female headers. For the remote switch and light sensor I used some el cheapo chinese removable screw terminals.... Some other pictures of the build.... Dutch spoken but English subtitles available.... I use fishing line to lift the chicken coop door but because fishing line is so smooth, a normal flat knot can possibly slip so I use the Albright Knot.... . . "
"How to make Arduino based Automatic Door Opening Using HC SR 04. Read up about this project on . How to make Arduino based Automatic Door Opening Using HC SR 04. The project concerns about automatic door opening and closing system. An automatic door control system includes a sensor for sensing person or object approaching door. Systems and methods are very common in the art for opening and closing doors to enter and exit buildings, facilities etc. Automatic doors are commonly found in retail stores, supermarkets, and the like.. The project generally relates to an automatic opening and closing of door which will sense person or object approaching door and open automatically. This system is controlled by Arduino micro controller. The system includes DC motor which makes door to slides during opening or closing by rack and pinion gearing, a LCD to display information state of door, an audio buzzer to make sound through the duration of opened door and a controller for controlling the opening and closing of the door as a person or object detected by sensor.. The whole system is mechatronic system which is designed using seven steps of mechatronic system design.. To starts making such mechatronic system following elements and tools are required.... .  .  . Gather all hardware required to assemble system. LCD and Piezo Buzzer is not a mandatory requirement of this system. These are added just only for Visual and Audio identification to user for status of door whether it is open or closed.. To starts making such mechatronic system following elements and
tools are required.... Materials -. 1. A computer to program instruction, must installed arduino IDE.. 2. Arduino controller ( Any of UNO, MEGA etc.) but i took low cost UNO R3 for learning purpose and making this project for my academic partial fulfillment.. ATMEL : ATmega328-PU. 3. HRSC04 Ultrasonic sensor (Used as proximity sensor to sens person or object arrived at door).. Ultrasonic ranging module HC - SR04 provides 2cm-400cm non-contact measurement function, the ranging accuracy can reach to 3mm. The modules includes ultrasonic transmitters, receiver and control circuit. The basic principle of work:. Using IO trigger for at least 10us high level signal. The Module automatically sends eight 40 kHz and detect whether there is a pulse signal back. IF the signal back, through high level , time of high output IO duration is the time from sending ultrasonic to returning. Test distance = (high level time X velocity of sound (340M/S) / 2. 4. 12V DC Motor. Load current: 70mA (250mA MAX) (3V pm). Operating voltage: 3V ~ 12V DC. Torque: 1.9 Kgf.cm. Speed without load: 170RMP (3V). Reduction ratio: 1:48. Weight : 30gm. No-load current = 60 mA,. Stall current = 700 mA. 5. LCD : 16 X 2 DOT MATRIX.. 6. Piezo Buzzer. 7. Motor Shield : L293D. The L293 and L293D devices are quadruple high current half-H drivers.. Reason to use Motor shield :. You can run motor directly connect to 9-12 V DC supply. The motor will draw current as much it requites from 12V DC supply. But In this project we have to control motor with program instruction so we have to connect motor through the arduino controller which output voltage and current is limited. So when you connect motor to arduino controller it it will draw more current at 5V. So there will be chances to burn controller.. To prevent micro-controller to burn, i used motor shield. which is simply acts as amplifier.. 8. Mechanical elements : To make a prototype i used plastic acrylic sheet and cut them into peaces to make a house type model having sliding door.. 9. Jumper Wires. 10 Power Supply. Tools-. 1. Multi-meter. 2. Soldering Iron. The tools are not required, but if you have then you will be good..  .   Step 2: ​Arduino Program:-..  You can also down load attached .ino file and directly complie and upload.. . . .  . Connects all hardware to arduino controller. The attached schematics are just for the reference only. You may use pins as per available at controller board.. The best way you can use my program for pin information. Also you raise me request to share..  .  . Upload arduino sketch provided in this tutorial to controller.. Watch video to view working system.. "
"Arduino Uno and Visuino: GPS Location display with GPS and TFT Touchscreen Display Shields - Quick and Easy!. Read up about this project on . Arduino Uno and Visuino: GPS Location display with GPS and TFT Touchscreen Display Shields - Quick and Easy!. . Recently the great people from Makerfabs sent me an Arduino GPS Shield to support the Visuino development and allow me to make more Tutorials. I also wanted to make more tutorials with my ILI9341 TFT Touchscreen Display Shield, and I decided to make a Tutorial using the 2 shields together.. In this Tutorial, I will show you how easy it is, to connect the Shields to Arduino, and program it with Visuino to display GPS Location information on the Display.. After I posted this Tutorial, the great people form Makerfabs made a Special Combo containing all the components for this project! . Since the Arduino UNO has only one Serial port, and it is needed to program the Arduino, you will need to program the Arduino UNO before the GPS is connected.. To start programming the Arduino, you will need to have the Arduino IDE installed from here: http://www.arduino.cc/.. Make sure that you install 1.6.7 or higher, otherwise this tutorial will not work!. The Visuino: https://www.visuino.com also needs to be installed.. Next we need to add Graphics elements to display the Latitude, Longitude, and Altitude from the GPS:. To decode the GPS information from the GPS Shield, we need to add and connect a GPS component in Visuino:. Now that the Arduino UNO is programmed, we can install the shields.. The Maketfabs GPS Shield has jumpers that allow you to configure the pins used for serial communication with the GPS Chip (Picture 1). We will configure them to use the Hardware Serial on pins 0, and 1 of the Arduino UNO:. Plug the TFT Shield on top of the Arduino Uno as shown on the pictures.. Congratulations! You have completed the project.. Pictures 2, 3, 4 and 5 and the Video show the connected and powered up project. . Depending on the location, it can take up to few minutes to show the location data. If after few minutes the data is still not shown, power down the project wait about a minute and power it again to reset the GPS.. On Picture 1 you can see the complete Visuino diagram. You can download and open it in Visuino:  https://www.visuino.com. If you don't have the necessary components, the great people form Makerfabs made a Special Combo containing all the components for this project! . . "
"How to make projects more robust and reliable using drivers ULN2803, UDN2981 and PNP transistors.. Read up about this project on . How to make projects more robust and reliable using drivers ULN2803, UDN2981 and PNP transistors..  . In some situations using Arduino and microcontrollers, it is necessary to use a shift register such as the 74HC595 to directly trigger LEDs, LED arrays or displays, but if you check the datasheet, you will see that you need to be careful with the maximum current in each output and also with the total current so as not to damage any device.. This information is important for designing more reliable and robust solutions and this post will help you better apply some components such as the 74HC595, ULN2803, UDN2981 and transistors PNP.. .  . . According to the datasheet of 74HC595, this component contain an 8-bit, serial-in, parallel-out that feeds an 8-bit D-type storage register.. This device is very popular for applications on LED arrays, for example, but my intention here is to just discuss your power consumption limit and not all of its functionality. . Its Maximum Ratings are:. What this means:. Due to these technical limitations it is necessary to apply other interface components to have a more robust and reliable design, protecting the components.. The ULN2803 is an array of Darlington transistors that can be charged 500 mA in a single output with voltage up to 50V. There are many applications for it, such as solenoids, relays, LED display drivers, and light bulbs, as well as inductive loads such as small motors. . Note that in the pin configuration you only find the GND but no Vs pin. At first glance, it is strange because we hope to see both pins! In fact, you do not need any specific Vs pin because the ULN2803 is used as a drain for the current. . When you apply a signal to an input port, the corresponding output port will be able to drain the current from a positive source. . You can see an example of this in the schematic shown in the attached image. Note that the LEDs are connected in a common anode configuration and the ULN2803 is used to drain the current at its output ports according to the input signals driven by the 74HC595. . In this case, you can drain up to 500 mA at each output port and keep the 74HC595 in safe working condition.. The UDN2981 is an 8-channel source drivers.. It is similar to the ULN2803 but with an opposite function and you can use it as an interface between 74HC595 and a device that needs a higher current supply for the job. Typical applications include: relays, solenoids, lamps, step motors, servos and LEDs. . UDN2981 can also work with 500 mA (Output Source Current Capacity) up to 80V. Note that in this case you have the Vs and GND pins because you must be connected to the power supply. Now, when you apply a signal to an input port, the corresponding output port will be able to provide a higher current to the next device. . You can see an example in the schematic shown in the attached image. Note that the LEDs are connected in the common cathode configuration and the UDN2981 is used to supply the current at its output ports according to the input signals driven by the 74HC595. Again, in this case, you can drain a larger current at the output ports and keep the 74HC595 in safe working condition. . In the datasheet, you can also find interesting information about the duty cycle versus the output current.. The attached chart shows the number of outputs simultaneously, and if you consider a 50% duty cycle with 8 outputs, the maximum recommended output current is about 220 mA. . In the same configuration, if the duty cycle is increased to 100%, the recommended output current will be 120 mA and, of course, the current can be higher if you decrease the number of outgoing ports that are being used.. This shows us how important it is to consider the number of outputs you run simultaneously; the duty cycle you are using in your application (e.g., the LED refresh rate) and the maximum current supported by the devices.. As example, the amplifier PNP silicon bipolar transistor BC327 can work with collector currents up to 800 mA (maximum ratings) and up to 45V. . In some applications this transistor can be used as switch for higher currents, e.g., LED actuation, in place of UDN2981.. Note: BC327 is shown here as an example, but of course there are many other equivalent transistors for this type of application.   . Pros. Cons. . To work properly as a switch, the PNP transistor must be in the saturation region and you can calculate the resistor of its base as follows: . For example, if you need to direct a current of 160 mA to the collector and the gain of the transistor is 100, this means that the current required at the base is only 1.6 mA. . Rb = (5 - 1.2) / 0.0016 = 2.4 K (Ohms). Note: The hFE gain of the transistors produced can vary within a specified range according to the datasheet and due this you should test some resistors with values close to the calculated one. . This presentation shows some ways to improve the robustness and reliability of some devices by preventing them from working beyond design limits. . In the next photos you can see a project of mine where I applied all these concepts.. . "
"Use an Arduino NeoPixel matrix to create a simple 1 player pong game!. Read up about this project on . Use an Arduino NeoPixel matrix to create a simple 1 player pong game!. No, not the movie, the NeoPixel matrix! To make a matrix, just buy one strip of individually addressable NeoPixel LEDs. Uncoil the strip, and take note of the arrows on it. You can only attach them in ONE DIRECTION, you could ruin them if the orientation is wrong. . I used a 30 led/m 5m strip and cut them into strips of ten LEDs each. I then started laying down the strips on a piece of cardstock, alternating orientations. I then cut wires to the correct lengths and soldered them to the NeoPixel terminals. After doing that 14 times, my matrix was finally done! Next, I checked with a multimeter to ensure that  there were no short-circuits, as a short-circuit will fry the Nano, the matrix, and maybe your USB port (I know from experience). Upload the neomatrix test sketch with the ""NEO_BOTTOM + NEO_LEFT + NEO_COLUMNS + NEO_ZIGZAG"" parameters. If it scroll ""howdy"" across the display, you're done with the display part!. A pong game has several objects: the paddle, walls, and the ball. The code has ball X and ball Y variables, which keep track of the ball's position. The ball's direction is handled by either a 1 or -1 being assigned to the direction variables. The paddle is a rectangle that is controlled via a potentiometer being mapped to 0 through 15. The paddle's Y won't change, so a variable for mapping it isn't needed. At the start of a game, the ball starts at 1,1 and the player must allow the ball to bounce once to begin. The physics take into account the ball's direction and where it hit on the paddle. . Now, just hook up the NeoPixel matrix your Arduino Nano, the +5V on the joystick to 5v, the GND to Arduino GND, and finally the X axis to A0. Have fun with your new pong game! Try adding more players and better physics for a challenge!. . "
Leds activated by a PIR module. Placed under the bed it's quite effective . This device assists people waking up night-time.. Read up about this project on . Leds activated by a PIR module. Placed under the bed it's quite effective . This device assists people waking up night-time..  . I have developed this project mainly for fun. It has a useful purpose too: help those who wake up night time to see things around them with a soft and filling light. Who needs to go to the bathroom or any other home-room can successfully use my device. For my own one I implemented blue LEDs but you can choose any color on your own! Have fun! . .  . . 
"This tutorial shows how to control some servomotors remotely in a Wi-Fi network, using an ordinary internet browser.. Read up about this project on . This tutorial shows how to control some servomotors remotely in a Wi-Fi network, using an ordinary internet browser.. . This project shows how to control some servomotors remotely in a Wi-Fi network, using an ordinary internet browser (Firefox, for instance). This might be used in several applications: toys, robots, drones, camera pan/tilt, etc.. The motors were attached to an Arduino Uno, which connects the Wi-Fi network through a ESP-8266 module. The control interface was designed with HTML and jQuery.. Miguel's tutorial (http://allaboutee.com/2015/01/02/esp8266-arduino-led-control-from-webpage/), which shows how to turn LEDs on/off using ESP-8266, served as inspiration for this post.. The technique shown here is used in one of my projects: ""Robô da Alegria"". You might found more about this in one of the following links:. https://hackaday.io/project/12873-rob-da-alegria-joy-robot. https://www.facebook.com/robodaalegria/. https://github.com/ferauche/RoboAlegria. For this project you'll need the following components:. You won't need specific tools for the assembly of this project. All the components can be found online on your favorite e-commerce store. The circuit is powered by the USB port (connected to a computer or a ordinary phone charger), but you may also add an external DC power supply or a battery connected to the Arduino power jack.. Connect all components according to the schematic. You'll need some jumper wires to connect the ESP-8266 module and the servomotors. You might use a proto-shield (for a more compact circuit), an ordinary breadboard, or design you own Arduino shield.. Plug the USB cable to the Arduino Uno board and proceed to the next step.. Install the latest Arduino IDE. In this project servo.h library was used for the control of the servos. In order to avoid conflict between the Wi-Fi module and computer's USB port during the upload of the code, softserial library was used. No additional library was needed for communication with ESP-8266 module. Please check the baud rate of your ESP8266 and set it properly in the code.. Some servomotors start to jitter and make strange noises when its position is close to the limits (0 and 180 degrees). To avoid that, the angle was limited between 10 and 170 degrees both in the Arduino code and in the control interface (later).. Unfortunately, servo.h library and softserial.h library use the same timer of the microcontroller. This might cause jitter in the servos whenever the Arduino communicates with the ESP-8266. To avoid that, the servos are detached from the Arduino after each command. You might also connect the module to the standard serial pins. In this case, remember to disconnect the module before each upload.. Download Arduino code (wi-servo.ino) and replace the XXXXX by your Wi-Fi router SSID and YYYYY by router password. Connect the Arduino board to your computer USB port and upload the code.. An HTML interface was designed for the control of the servomotors. In this example, two servos were used, but more can be added to the Arduino Uno (I tested up to four motors).. A textbox form is used to enter IP address of the ESP module. Download Wi-servo.html and jquery.js files and save both in the same folder.. When the Arduino is restarted, it will try to connect your Wi-Fi network automatically. Use the Serial Monitor to check if the connection was successful, and to obtain which IP was assigned to your ESP-8266 by your router.. Open the html file in an internet browser (Firefox).. Inform the IP address of your ESP-8266 in the textbox and you'll be ready to go. Select the angle desired for each servo using the sliders. The browser will automatically send a request to the Arduino when you release mouse button, and move each servo.. "
"Sending sun light indoor with tracking mirror during day, logging lux level on the Cloud, BLE app controlled LED lamp for nighttime lighting. Read up about this project on . Sending sun light indoor with tracking mirror during day, logging lux level on the Cloud, BLE app controlled LED lamp for nighttime lighting. This project is a miniature prototype application for active sunlight  harvesting with tracking mirror. This is not a replacement for solar panel and battery storage but it has its niche applications. For example: lighting up a greenhouse in Arctic regions or sending natural light to the center part of a large house that has no windows. I am using RSL10 Sense development board as hardware and Atmosphere IoT for development of firmware, mobile app and cloud dashboard. RSL10 is an ultra low power BLE microcontroller for sensor and IoT applications. The development board is equipped with all kinds of environment sensors for prototyping and testing different applications ideas.. The solution will have following features :-. The first demo shows how the mirror is trying to reflect sunlight near the  RSL10-SENSE-DB-GEVK board. RSL10 uses the on-board Ambient Light Sensor NOA1305  to detect illuminance level.. The custom BLE app shown above can control external White LED lamp.. Here is another demo of the tracking mirror operation -. Here is a quick overview of all the hardware for this project:-. The CR2032 was running out during flashing/debugging. So I did some modifications like this to power the board from 2x AAA batteries. Also connected some bright White LEDs for controlling from BLE app.. The biggest problem was just 1 GPIO exposed, which connects to Arduino Uno for motors control. So, I did this via hack for another GPIO pin to drive the external LEDs.. A mirror is mounted with pan-tilt frame, 1 stepper motor, 1 servo motor on a breadboard holder plastic base. Self tapper screws and hot glue puts these together.. The firmware running on RSL10 mcu works like this:-. -----------------------------------------------------------------------------------------------------------. Atmosphere IoT is an all in one embedded firmware, mobile app and cloud storage & dashboard solution. RSL10 SENSE board is officially supported by Atmosphere IoT and browser based IDE (Atmosphere Studio) enables creation of IoT projects very easy.. Setup Configuration. Before programming the RSL10-SENSE board, following setup configuration must be completed :-. Pin Mapping. All the sensors are connected to RSL10 with I2C bus and few GPIO pins are connected to RGB LEDs, user buttons and an extra GPIO pin available for interfacing with external hardware.. The best part about developing a BLE/IoT solution for RSL10 with Atmosphere IoT is the ease of integration of complex parts like mobile app and cloud connectivity with little effort.. These are drag and drop c code block as visual icons called elements. Which only requires little configuration for doing things like reading sensors periodically or flipping a GPIO or sending sensor data over BLE to mobile app.. There are 3 tabs/parts to develop a complete solution, first part is the firmware part. Where sensor elements and interval (timer) elements can read sensor data. Data flows from one element to the next element, like one function passing a value to another function. One element can also trigger an action to the following element. BLE element connects the hardware to the mobile app and it can transfer both command and data back and forth between hardware and app.. Elements are dragged from the ""Element Toolbox"" to the development canvas by clicking on the white background.. Each element has its little configuration box called properties, which is accessible by clicking on each element. Most of the time default configuration works. The important part is to make sure the right data types like float, unsigned integer otherwise no data will go to app.. If you need to write your own c code, you can always use function element, use global variables to pass values and do what needs to be done.. Next tab is the BLE app development tab. Where the app layout, app inputs (buttons/sliders/dials) and outputs (label) etc can be configured. BLE element created from firmware tab will have an exact copy. This element will fetch data sent from hardware and pass it to the app and cloud with the help of other elements.. Sensor data sent from BLE app to cloud over Wifi or Cellular will be stored to the cloud storage if needed. This part is configured on the Cloud tab. Data stored to the cloud will be available for viewing for dashboard. If needed, data can be sent to other web services like AWS too. These things are configured here :-. Once the setup is completed and the firmware is compiled, the RSL10-SENSE-GEVK is ready to be programmed/flashed.. The Arduino uno is programmed with Arduino IDE. The code is attached below in the code section is copied to Arduino IDE, appropriate board and serial port is selected, then code is compiled and uploaded.. Finally both the stepper motor and servo motor is connected according to the schematic attached in the schematic section.. Following video shows how to configure the BLE app :-. Sensor data from RSL10 board can be stored on Atmosphere Cloud storage.  The Dashboard helps visualization of latest data and historical data in different configurable widgets like gauge/graph/glance/table etc.. Free developer accounts can store up to 10MB data. It may not sound much but 10 MB cloud storage equals to little more than 10000 individual data points. So, increasing data storage intervals to few minutes can provide few weeks worth of logging on the cloud. Sensor data can be downloaded or deleted to add new data.. This is how the BLE app looks like:-. Some images and logos to fill the app background, a light meter and a push button to control LED.. The app mainly does 3 things:. More details is added below about how the app is 'developed' and a video about how to use it !. Getting Started with RSL10 . https://atmosphereiot.com/blog/on-rsl10-support/. Here is the official tutorial from Atmosphere IoT team :-. This project didn't end up exactly the way I wanted to build it. Having only one exposed GPIO pin  on RSL10 board was a bummer, that's why I had to use another microcontroller to control the stepper-servo mirror reflector. My ideal version of solution will utilize 2 RSL10 boards, one will connect to the app and cloud, other will connect to the first one over BLE which will control the reflector mirror. This project is a low cost basic prototype only. Development of a real solution will need Cloud Coverage Sensor, GPS, RTC and Compass data for optimum tracking and reflection of sunlight.. "
"Using two LDRs to get intensities in two direction and then comparing those intensities will rotate the servo motor.. Read up about this project on . Using two LDRs to get intensities in two direction and then comparing those intensities will rotate the servo motor.. NodeMCU based project :  Rotating Solar Panel . In this project, we will see a simple Sun Tracking Solar Panel circuit which will track the Sun and position the solar panels accordingly.. As the non renewable energy resources are decreasing, use of renewable resources for producing electricity is increasing. Solar panels are becoming more popular day by day.. Solar panel absorbs the energy from the Sun, converts it into electrical energy and stores the energy in a battery.. This energy can be utilized when required or can be used as a direct alternative to the grid supply. Utilization of the energy stored in batteries is mentioned in below given applications.. The position of the Sun with respect to the solar panel is not fixed due to the rotation of the Earth. For an efficient usage of the solar energy, the Solar panels should absorb energy to a maximum extent.. This can be done only if the panels are continuously placed towards the direction of the Sun. So, solar panel should continuously rotate in the direction of Sun. This article describes about circuit that rotates solar panel.. The Sun tracking solar panel consists of two LDRs, solar panel and a servo motor and NodeMCU.. Two light dependent resistors are arranged on the edges of the solar panel. Light dependent resistors produce low resistance when light falls on them. The servo motor connected to the panel rotates the panel in the direction of Sun. Panel is arranged in such a way that light on two LDRs is compared and panel is rotated towards LDR which have high intensity i.e. low resistance compared to other. Servo motor rotates the panel at certain angle.. When the intensity of the light falling on right LDR is more, panel slowly moves towards right and if intensity on the left LDR is more, panel slowly moves towards left. In the noon time, Sun is ahead and intensity of light on both the panels is same. In such cases, panel is constant and there is no rotation.. before starting make sure, you have. 1. installed the arduino ide in your system (and check for com port for nodeMCU). 2. register yourself at http://thingsai.io/. 3. create and configure a new project. Setting Up Cloud Account on ThingsIO.AI. ThingsIO.AI is a IoT platform for developers. As a developer we understood the pain of not having a seamless place to connect, analyze and process device data. Many pure analytics platforms does not offer device management, which is core for the iot. That is the reason for ThingsIO.AI.. Some basic points(1-5) for analysing data on ThingsIO.AI. 1. Track your device’s special parameters here. This can be set in device configuration(default to null).. 2. You can see your real time and special parameter’s graph.. 3. You can see your all data points.. 4. You can see here your last 5 data points.. 5. You can see here all the list of created graphs.. Click on the “Send trial data” to send a trial data to the server:. make connections as instructed in schematic diagram for LDR and relay to nodeMCU. which is again shown below,. . . after making the proper connections, dump your program to nodemcu, which is illustrated here,. . . Go to your ThingsIO.AI  account and go to your device ->. Click on the configuration device option:. https://app.thingsai.io/#/device/all-devices/61121696057    . here you can see the visualization for this project.. Thank you for taking your time to read my work. I hope you enjoy it as I enjoy making it and documenting it to show and tell to other fellow makers here.. . "
"A programmable, portable, rechargeable power supply based on Arduino featuring an OLED display for viewing V.I.P. of projects/prototypes. . Read up about this project on . A programmable, portable, rechargeable power supply based on Arduino featuring an OLED display for viewing V.I.P. of projects/prototypes. . As hobbyist people, we frequently need to power our prototypes, check voltage, current, power limits of our projects, test a newly bought component. The need of a variable power supply is always there in this line of work. But unfortunately, not all of us have bench/lab power supplies. It's also expensive if bought, bulky if needed to carry. I was looking for a programmable power supply at a lower cost, with portability and productivity for powering my prototypes and testing components. So, I decided to make one.. It has the following features:. And most versatile power supply for low power electronics projects.. Check out this video demonstrating the device operation:. The device has following specification:. Please note that this device is a quick prototype. It is possible to make 0-30, even Negative Supply and more Output Current by using high capacity batteries, additional electronics and upgraded design.. The design itself is hardware intensive. Lots of stuffs happening here. A crude block diagram of the system is something like this:. Source of power is the 3.7 V Li-Po Battery which is USB rechargeable. Using a XL6009 DC-DC boost module first we make 15.6 volts from the Li-Po. To run the MCU we also make a 5 Volt using 7805 Regulator.. The Arduino UNO clone Atmega328P is connected with 2 Interrupt based User Input Switch, an Elegant OLED Output Display. Rx/Tx/DTR firmware (sketch) upload port through USB/Serial from PC. (module 1). The Heart of the project is the MCP4131 Digital Potentiometer (Digipot) + LM 358 OpAmp based Step Voltage Generator. This voltage is the Control Voltage of LM317 Adjustable Regulator. (module 2). Digipot is controlled from the Arduino through Pseudo-SPI like command. LM317 is designed such a way that the Output Pin Voltage is always 1.25 Volts higher than the Adjust Pin Voltage provided that the INPUT Pin's Voltage is high enough (here 15.6 volts). (module 3). The step voltage is fed to the Adjust Pin to create variable Output from the Arduino as needed by the User.. The ADC measures all the voltages associated with supervision and protection; battery voltage, boosted voltage, charging sense voltage and output voltage are conditioned through voltage divider network for feeding the ADC range, which is 0-1.1 volts here. I have used the INTERNAL REFERENCE of Arduino which creates an reference voltage of 1.1 volts.. For the current sensing, the return (Load Gnd) from the Output Load is connected in series with 1 Ohms Current Sense Resistor to the System Gnd. When current flows through the external loads, there is also a voltage drop in this sense resistor. This voltage is amplified through OP07 Precision Operation Amplifier and fed to one of the ADC pin.. Lastly, for the battery charging, 5 volts from the USB is connected in series with a 4007 diode and a 5 ohms current limiting resistor to the Li-Po Battery. This is a crude charging method, not the best for Li-Po charging.. Operation Summery: The MCP4131 Digital Potentiometer creates step voltages with in 0-5 Volts range in step of about 40mV (7-bit 10K Digipot has 129 steps 5V/128 = 0.40 mV), which is then 2.5 times amplified by the LM358 that gives 0-12.5 volts control voltage range with steps of 0.1 volt. This amplified step voltage signal is fed to the Adjust Pin of LM317. LM317 generates an output voltage of V_Step+1.25 Volts which is supplied to the external loads. The return/ground of the external load is connected to the internal ground through 1 Ohms Current Sense resistor. Suppose: x mA current is flowing to external load, it will create x mV drop (Ohms Law V=I*R) on the 1 Ohms Current Sense Resistor. This small voltage signal is fed to Low Offset (10uV) OpAmp OP07 configured with 2.5X gain, which will generate 2.5x mV Output. The Arduino ADC is configured with 1.1 Volts internal reference so that voltages form 0 -1100 mV can be sensed in step of about 1mV (1100/1023). Output of OP07 is connected to Arduino ADC for current sensing. This is why the current limit is 400mA. It can be increased/reduced by changing the gain of OP07. Similarly output voltage range can be changed by changing the boost voltage & gain of LM358. Other voltages are measured with resistive voltage divider network attenuating voltages to fit the ADC Range. The latch relay has 2 coils. By applying momentary power to any of the coil, relay contacts can be switched. Once switched it remains there, so the coil is powered off immediately.. First we start with a single switch socket box, and make necessary cuts and alignments for placing the battery, USB charging port, power switch, etc.. Next, heat sink is made with copper tape and coin for the DC-DC boost module.. The boost module is placed inside the socket box:. Using the above parts, the following 3 modules are made:. Finally the spider web connections among all the boards are connected and soldered.. After using the hot glue as a filler, finally we have it:. The firmware (Arduino Sketch) is right now 1.0.2 Beta. Not all features are available right now. But most important features like controlling voltage, connecting/disconnection relay, viewing information are enabled. In the void setup()  there are few initialization functions to warm up the Arduino pins associated to different external hardware.. INPUT: There are 2 interrupt-based input button for increasing/decreasing output voltage, access menu (not available on this version). INT0 & INT1 on Arduino Pin 2 and 3 are coded for FALLING EDGE INTERRUPT. You will see 2 capacitors in parallel with mechanical switches for de-bouncing. Code is written to trigger interrupts when user presses these switches to turn on/off output through relay or increase/decrease voltage (Beta).. OUTPUT: The 1306 OLED shows output information acquiring data from ADC, internal timer (for device up time) and flag variables to inform user about Output enable/disable status. Based on U8G library the OLED prints info as text and numerical. I have plans for using graphical (Analog type) representation.. 5 digital pins of SSD1306 (OLED from Waveshare) clk,din,cs,d/c,res are connected to Arduino 10, 9, 11, 13, 12 pins and programmed accordingly. In the main loop update_display() function is called every time to update the info on the OLED.. Internal Timer 1 of Atmega328P in configured to periodically trigger every 1 sec to keep track of time.. CONTROL: The MCP 4131 Digital Potentiometer is controller with increment_digipot() & decrement_digipot() functions where data is shifted out with proper clocking and delay using Pin 6, 7, 8 as CS, Clk, Data Pins. It's like slow soft SPI. Since I have already used up Hardware SPI pins somewhere else, this was the only solution then.. Two digital pins 4 & 5 are used to control the latching relay. A short high pulse is fed to the relay driving transistors to energize the 2 coils to flip the relay. It happens both automatically (during overload/short circuit) or manually by the user .. ADC: The calc_VI() function in the main loop performs analogRead  to get 20 times averaged Voltage and Current information and updated the variable for new information which is then printed on the display. The sketch is written in multiple tabs to organize code for different functions associated to different operations. There are ADC, Digipot, Display_Fn, Interrupt, Relay and Timer tabs arranging all the user defined functions. I will try too add more comments explaining all the functions, but you should not find it hard to understand because those functions are based on multiple Arduino functions doing certain tasks.. There are some serious limitations of this device:.  . You can learn more about each components in these tutorials:. This programmable power supply will help me to make projects/prototypes more efficiently. Measurement of voltage current power without using multimeter.. . "
"Universal Windows App that connects to an embedded Bluetooth device over the Bluetooth Serial Profile using a generic Bluetooth USB dongle.. Read up about this project on . Universal Windows App that connects to an embedded Bluetooth device over the Bluetooth Serial Profile using a generic Bluetooth USB dongle.. This project is discussed in detail in embedded101.com:. ""Win 10 IoT-Core: Bluetooth Universal Windows Serial App"". This project is a Universal Windows App that connects an IoT-Core device such as a Raspberry PI 2 to an embedded Bluetooth device over the Bluetooth Serial Profile using a genetic Bluetooth USB dongle. . .Bluetooth supports peer to peer networking over a short range. Unlike a Wi-Fi network, Bluetooth connectivity is one to one. Two devices can connect and interact.  For example, two devices may connect in a symmetric manner using the serial profile and pas raw data between them. Generally though, Bluetooth connectivity is asymmetric with one end generating a specific data format to be consumed at the other end. For example a mobile phone can implement the A2DP (Advanced Audio Distribution Profile) Profile and stream audio to a head set  that implements the HSP (Headset) Profile OBEX (Object Exchange) is a symmetric connection between two devices as they exchange data between them..  . The Microsoft  IOT-Core Bluetooth Sample project uses the GATT (Generic Attribute Profile Profile). This provides profile discovery and description services for  the Bluetooth Low Energy protocol. With this protocol simple low power devices can be connected at one end generating data to be consumed by a complex processor.. This is a far simpler project than the Microsoft sample. It is only concerned with the more generic SPP (Serial Port Profile) which is based upon the RFCOMM profile. It was developed with a very old USB Bluetooth dongle and so should work with any Bluetooth dongle.. This app is a simple Bluetooth Serial Universal Windows (Windows 10) test app. It starts by enumerating (as a list) all devices Bluetooth paired to the device where the app is running. One is selected by double clicking which initiates connection. Text to send is entered in a Textbox and sent when a button is pressed. The app automatically receives any text sent to it ( and displays it). Hence when the endpoint (as above) simply echoes the text its received, the sent text should reappear in the reception box on the UW app.. . For testing an Arduino Uno with a Bluetooth adapter is used. It has a simple shield that just echoes back any characters its receives over the Bluetooth connection:. The Shield Setup:. The Shield Loop:. Bluetooth is a peer to peer scenario. Before they can connect over Bluetooth they must be paired. This is not done within the app. Pairing with a passkey can be problematic between embedded devices as they are often headless and may not support popups (as IoT-Core does not). There is a IoT-Core web portal for doing this as well as a command line utility on the device that can be run over an SSH shell. The most recent version of the OS web portal  supports passkey pairing which was missing around the time of Windows 10 RTM. ""Win 10 IoT-Core: Bluetooth Universal Windows Serial App"" discusses pairing in this context in detail.. The app project is created using in Visual Studio 2015 using the  Universal Windows app template: . New Project-->Visual C#->Windows->Blank App (Universal Windows). The UI is implemented in XAML. Create the UI as per the layout as above (or similar):. The UI is quite straight forward and is  created as follows: . You may prefer to layout the UI using Relative StackPanels or use Grid rows and columns etc.. The ConnectDevices is a ListBox with a Binding Source  set to PairedDevices(see later) and an ItemTemplate consisting of a TextBlock bound to the Name property of PairedDevices (see later). . Modify the capabilities section (at the bottom) to:. The internetClient capability will already be there. Its not needed for this app so you may wish to remove it. I leave it in.. At the app start the paired devices are enumerated using:. DeviceInformationCollection DeviceInfoCollection .  = await DeviceInformation.FindAllAsync(RfcommDeviceService.GetDeviceSelector(RfcommServiceId.SerialPort));. This collection is then turned into an ObservableCollection that it can be used in the ListBox:. _pairedDevices = new ObservableCollection<PairedDeviceInfo>();. The DeviceInfoCollection is iterated through creating a PairedDeviceInfo object  for each item which is then added to the _pairedDevices collection..  . PairedDeviceInfo is a class with properties:. Name <string>. Id <string>. DeviceInfo <DeviceInformation>. The class has an appropriate constructor.. DeviceInformation is Windows.Devices.Enumeration.DeviceInformation . In the listbox of paired devices, the Name field is (bound) displayed.. When a device is selected (double clicked) the endpoint’s DeviceInformation is actually part of the selected menu item and so is used for establishing the  connection.. The DeviceInformation is used to get the RFCOMM service. The connection is then established as a StreamSocket  using the Endpoint HostName (actually its Bluetooth Mac Address) and the ServiceName string.. If all is well then we have a connection .. the socket will be meaningful (not null).. Of course this is error trapped (try-catch). Send text and Receive text make use of the socket’s InputStream and OutputStream properties..  . Receiving text should be started first as it runs as a separate thread. It runs an async wait to get serial input, handles the input then runs another async serial receive .. all in a loop. This loops continuous until a cancellation is generated..  .  . Whilst the received text is performed asynchronously as the arrival of text is nondeterministic from the app’s perspective,  sent text is actioned from the app’s UI and so is essentially synchronous (although a await is used to free up the UI).. The command buttons are enabled and disabled depending upon the state of the app. For example Send and Start Recv buttons are disabled when the app isn’t connected but become enabled when the app is connected, etc.. "
"Ever wanted to add voice control to RoboSapien. How about connect it to Amazon Echo. I can say, 'Alexa, tell RoboSapien to do the Nae Nae'.. Read up about this project on . Ever wanted to add voice control to RoboSapien. How about connect it to Amazon Echo. I can say, 'Alexa, tell RoboSapien to do the Nae Nae'.. I wanted to add voice control to RoboSapien. At first, I was thinking, just create an app on the phone, but that's been done before! Then I saw the Amazon IOT Challenge. How about make an IOT Robosapien. The next generation - Internet of Toys! Connect RoboSapien to the Internet. That would be Awesome, don't you think?. . . That's what I did; I started looking into the Amazon IOT service, try their sample apps. Very interesting indeed. I like the way they presented the diagram. Here's what I want to do.... Replace RGB controller with Amazon Echo, Replace the LightBulb with RoboSapien... Amazon Echo sends the command, RoboSapien follows. That's it. . If you enjoy this project and want to see more, please add respect and follow me. . Amazon Echo ... echo ... echo ... Last year, I started looking at Amazon Echo. I got one because I attended a hackathon and worked on an Amazon Echo. It was my first introduction to the AWS Lambda, and I was hooked. I like the idea where I can focus on my code and not the infrastructure.. WowWee RoboSapien. I've always liked the RoboSapien, I'm amazed on it's engineering and it's capabilities. Last year also, I started to research how to expand it's capabilities. I have RoboSapien X which doesn't have any bluetooth capabilities. It communicates through it's IR Remote but they gave you this dongle to connect it to your phone so you can use the app. I found out that there's a way to control the robot by playing WAV files. I saw it on WowWeeLabs github page. Here's the link. https://github.com/WowWeeLabs/RoboRemote-IR-Dongle-SDK. So I downloaded the WAV files and started playing it on my phone connected with IR Dongle to audio jack. The RoboSapien is ALIVE!. That brings me to an idea. What if I can connect it to a Raspberry Pi? Raspberry Pi has Audio jack, then I can attach it to the back of the RoboSapien. That's great news! No more heart bypass operation for the poor Robot. No soldering!. . Back to Amazon IOT.. Here's a good tutorial how to connect AWS IOT to Raspberry Pi. https://github.com/sreid/aws-iot-raspberry-pi-how-to . . The sample app is very helpful. Here's the link. https://github.com/aws/aws-iot-device-sdk-js . I patterned my code with this thing example. https://github.com/aws/aws-iot-device-sdk-js/blob/master/examples/thing-example.js . . At first, I tried running the example on my laptop. I opened two shell window, one is acting as mobile app (value updater), the other acting as a device (update receiver). it worked! Send update RGB colors from one window, the other receives the updates. . Now I tried it on the Raspberry Pi with a Wifi connection.. It also worked!. The idea is, instead of RGB colors, how about send COMMANDS like Walk, High Five, Dance, etc... etc... . Then once the Command is received from Amazon IOT thru the ""delta"" event, play the correct WAV files.. . Playing WAV files on Raspberry Pi in NodeJS.. I am new to NodeJS, I was able to update node on my raspberry pi with this link. . https://github.com/rwaldron/johnny-five/wiki/Getting-started-with-Raspberry-Pi-node-red-and-IoT. I looked at some npm packages to play WAV files on raspberry pi, I am familiar with CylonJS. So I followed instructions on how to install CylonJS audio module.. http://cylonjs.com/documentation/platforms/audio/ . you have to install mpg123. CylonJS-Audio only plays mp3, so I had to convert all the WAV files to MP3. I used Lame. . to convert all mp3, I used this command.. . for f in *.wav; do lame -V 1 ""$f"" ""${f%.wav}.mp3""; done. . . Here's the sample code on how I played MP3 in NodeJS. . I connected the RoboSapien dongle to Raspberry Pi audio jack. I played the mp3, and it worked! Woohoo! I actually did High Five RoboSapien..  . Echo Thingy. Connecting Amazon Echo to Amazon IOT. . I couldn't find any sample code out there that connected Amazon Echo to Amazon IOT. Most of the examples are just connecting amazon Echo to a website. That's not going to work. I need to send MQTT messages to Amazon IOT.. At first, I tried going thru their sample app.. https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/developing-an-alexa-skill-as-a-lambda-function . then I modified it to use these schemas. . I added LIST_OF_COMMANDS. Then added Sample Utterances. . Ok, now that I have the commands set up in Alexa Skills Set. I followed the AWS Lambda instructions. I started playing with the  alexa-skills-kit-color-expert sample javascript code. I was able to test the utterances and the intent and receive the command, but how do I send it to Amazon IOT. . alexa-skills-kit-color-expert code and the thing-examples.js. At the end of the day, when I receive an intent, I need to connect to the thingymajigger. but the thingymajigger requires aws-iot-device-sdk library. How do I put things together?. I found out you can upload a zip file of all the stuff you need. OK, I zipped up the js file together with node_modules and certs. Then run it.. I got error left and right, up and down. It's complaining about certificates. I took it as a good sign because It's running index.js, that's a start.. I was stumped, don't know what to do, it's complaining that it can't read the certificates. AWS Lambda can't read a text file, it's a permissions thing. A-ha, so I copied the contents of the file and shove it into a variable.. At first, I wasn't including the BEGIN and END tags to the file, so I was getting frustrated. I looked at RoboSapien, he's dead. Battery's dead. I mean. Need to change batteries.. Then I realized, I need to include the BEGIN Key and END Key.. So I did all that to all the certs. I assigned the contents to a variable, instead of reading it from a file..  . That seemed to work. I used this test message to AWS Lambda. . I got this in the log. The most important thing is it connected to the thingymajigger. Cool! Then I looked at my device shadow, I got the value I expected!. Now What?. Next thing is to make the project in raspberry pi to receive messages from AWS IOT. I just reused the same template just to test if I'm going to receive data from Amazon Echo. . https://github.com/aws/aws-iot-device-sdk-js/blob/master/examples/thing-example.js . Wait for it... Wait for it... then got this message. I got the WALK command. I felt like walking in the clouds. . . That Cylon Thing.. Next stop, combining the thing-example.js code with cylon-audio js sample code.. Here's my idea. When I receive a Delta event, play the corresponding mp3 command, then acknowledge the command by sending ""NONE"" command AWS IOT. . I stored all the mp3 files to RoboSapien subfolder. Then, I created this audioFileName global variable. I detect if audioFileName is blank or not. If it has a filename then play that one. make it check every 500 ms.. . Then when I receive a Delta command, that means somethingy changed, I get the command and assign the audioFileName variable.. To start I just type in the raspberry pi. > node index.js. It listens to Amazon IOT for commands. I can actually update the Shadow, and it would send to all the listeners.. Then I'll say:. Alexa, tell RoboSapien to do the Nae Nae. . Here's the github repository. https://github.com/rlyle78/iot-echo-robosapien. . Let's let him do the Nae Nae again!. Few lessons from this approach:. 1. The IR Sensor must be pointed to RoboSapien. Line of Sight is important.. 2. Sometimes Alexa would timeout. The AWS Lambda is timing out getting connection and sending update to AWS IOT.  I'm not sure why? It works on the first update.... . It is still a work in progress. It's a journey but it's all good. . I enjoy trying to challenge myself how technology pieces can go together. Please add respect if you like these projects and follow me.. . "
"A SparkFun Artemis powered urban quality monitoring system with IoT capability and TensorFlow Lite based machine learning implementation.. Read up about this project on . A SparkFun Artemis powered urban quality monitoring system with IoT capability and TensorFlow Lite based machine learning implementation.. The metro cities all around the world are facing a lot of problem because of the increasing population, which is resulting in an exponential pollution rise, which is a very serious problem and needs immediate attention.. But the problem is that there is no proper monitoring device for these urban environments, so we are unable to get any reliable data. Even if there are devices to monitor the conditions, they are in limited number due to the current cost - to - reliability and accuracy count.. The SparkUQM -  designed specifically for urban environments. Please note that I have designed this device keeping in mind the Indian metro city conditions, as cities like Delhi are one of the most polluted cities in the world when it comes to air pollution. . So, let us get started!. So, the components are already mentioned in the project. But, let us have a look at each of them in brief:. 1) The Spark fun Artemis Contest Kit 1  - This kit contains. 2) Various Seeed Grove Sensors. Note that normal sensors will be just fine. I am using these as I have a lot of them lying around. The sensors I have used are:. 3) Particle Photon - This small WiFi powered development board will be used to add IoT capabilities to our project. This will fetch the sensor data serially and then send it to your desired cloud.. 4) Apart from this, just a USB power bank will be required to power the whole device. That's all!. So, let us get started with the project:. Now, I will show the hardware connections for this project with a image. For more details, just go and have a look at the code in my Git repo. The main file is very well written and with comments for easy understanding.. I am really sorry that I could not create a flow chart of schematic diagram due to the shortage of time. But be sure that I will add all the additional details later for sure.. Now after the Hardware connections are done, we will get all these things into a cardboard enclosure that I created for this project. So, after everything is attached are glued or taped in its place, the final Hardware would look something like this:. Now that this is done, let us move to the software part!. This part is divided into 3 parts, basically because I have developed my code like that. The first part is the normal code part in which I program the device to work with all the interfaced components.. In the part 2, I add machine learning functionality into the project.. In Part 3, I just describe the Particle Photon code. The code is a little complicated as I have used intensive commenting for easy understanding. So, let us start:. This is the basic Arduino IDE Code for the SparkFun Artemis ATP. The code is pretty much self explanatory if you see, so please just go through it. The name of the file is ""final_code.ino"".You can find the code in the Github repo of this project.. Sorry I will add detailed code explanation later for sure. The project shows all the sensor data on various pages created. These are displayed on the OLED screen. The pages are as follows:. Now that the basic code is all done, we can move on to the main part of this project, which is TensorFlow Lite implementation. I saw that there were just some speech and audio related examples given in Arduino TensorFlow Lite Library. But, they were quite complicated to start with and for some reason, I could not get them to work as expected.. Later, I did some tweaking with the parameters of the TensorFlow Micro speech example and it finally worked! So, I had 2 options now:. I figured that adding voice functionality to this project won't do much good in terms of application, so I decided to go with the 2nd option.. Firstly, I just focused on 2 of the simplest algorithms:. 1. Linear Regression. 2. Logistic Regression. But I couldn't get the desired accuracy on my Linear regression model for predicting air quality (eCO2) values based on past values and the features I used were:. To know more about Linear regression in TensorFlow Lite, just go on and follow this tutorial. Believe me, it is great! Thanks to Particle blogs.. To get some reference data, I used the NXP Rapid IoT prototyping kit.. https://blog.particle.io/particle-machine-learning-101/. The same process can be followed for Arduino IDE too.. But the Loss was too much and I had a time constraint, so Instead I decided to go with Logistic Regression and build a simple binary classifier. But do not worry, I will add the Linear regression Model implementation soon.. Now, training a Binary Classifier can be time consuming when we use a large dataset. So, for this project, I just took into consideration the CO2 and TVOC values, and added an additional parameter AQI to generate training data output. It is pretty simple logic, if the value of TVOC and CO2 is greater than a particular value (in my case, I kept it 1000 just for demo), the AQI value will become 1, else zero.. To get some data, I created a demo program to print the desired data in CSV friendly form on serial monitor and left it running for an hour or tow on any Serial console (I used Putty).. Then I stopped it and downloaded that data in CSV format. The final data will ook something like this:. I managed to get 540 data points, which were more than enough for me. After that, I uploaded this data to google colab Logistic Regression Demo, and then trained the classifier. The link to the google colab notebook is:. https://colab.research.google.com/notebooks/mlcc/logistic_regression.ipynb?hl=en. This is the basic example, just change it according to the data you use.. Now, just follow this process to convert the obtained model into.tflite format and finally into a C++ file with values of weights and biases stored in an array.. Once you have a trained model, the next step is to convert that model into something that TensorFlow Lite can work with. TensorFlow proper supports a number of different model file formats, while TensorFlow Lite supports only one, the tflite FlatBuffer format, which is optimized for size and thus perfect for constrained devices.. Once you have a TFLite model, you’ll need to convert it to a C array for use. Many MCU’s (including Particle devices) do not have native filesystem support, which means you’ll need to load your TFLite model into memory in order to use it. The recommended way to do this is to convert your model into a C array and compile it into your project.. On most operating systems, you can do this with the xxd command.. That will yield something that looks like this:. This completes the Machine Learning Part.. Now that everything is set in the SparkFun side of the project, let us move on to the particle photon side, which helps adding IoT capabilities to the project.. The Arduino code sends all the sensor data in JSON Format (using the Arduino JSON Library ) and so we will use the same library to parse this JSON and then we can do anything with this data.. Example: Send it to a database like Firebase so it can be accessed in an Android application. See my earlier project for documentation on this.. This completes our project. Please like if you like this project and follow me for more such content. Thanks to Sparkfun for this wonderful opportunity!.. Adios!. "
"What? Program an Arduino from your Raspberry Pi? It's possible, and super easy! . Read up about this project on . What? Program an Arduino from your Raspberry Pi? It's possible, and super easy! . Can't find the right computer to program your Arduino? Or are you running short on available computers around the house to use?. Well, worry no more, my friends. This will take very little time and will get your Raspberry Pi to program your Arduino. . Connect your Raspberry Pi to a power source and a monitor. Once logged in, navigate to your browser. . Head to this link: https://www.arduino.cc/en/Main/Software. Scroll down a bit and click on ""Linux ARM 32 Bits"" on the right. . You will then be redirected to a ""Contribute"" page. If you want to donate money to Arduino, this is were you'll do that. If you don't want to donate, click ""Just Download"". A dialog box will pop up, asking where you want to save the file. Select Downloads and continue. . Now that the IDE is downloaded, you'll need to install it with Raspbian's Archiver. . Follow these steps to install and begin using the latest version of Arduino IDE:. 1. Go to the Raspbian Icon at the top left corner of the Raspbian desktop. Open the menu, go to Accessories and click Archiver.. 2.Go to Archive ----> Open ---->  arduino-1.8.1-linuxarm.tar.xy. Wait for the red light to stop flashing at the bottom right corner. . 3. Once that's done, go to Action ----> Extract. A dialog box appears. Select ""All Files"" and""Extract files with full path"". It should be set like that as default. Click extract. . 4. Wait for the extraction to be complete, the move to the terminal. Type this:. Once that's done, you can start using the IDE!. When your Raspberry Pi finishes rebooting, open the Raspberry Pi menu on the desktop. There should be a new section called ""Electronics"". In that section, there should be the Arduino IDE! Plug in your Arduino into your Raspberry Pi, open the Arduino IDE. Select the correct port, which should be /dev/tty/USB0. . To test that it works, try coding the classic Blink program attached to this post into the Arduino IDE. It should upload correctly, and it works!. "
"Using a blue laser and phosphorescent paper to illustrate what it means to sketch a sine wave around a circle.. Read up about this project on . Using a blue laser and phosphorescent paper to illustrate what it means to sketch a sine wave around a circle.. Have you ever wondered about how sound editing software can cut or boost the base in a recording?  Or how sound-canceling headphones work?  Or how civil engineers can design buildings and avoid the resonant frequencies of earthquakes?  Well, the answer to all of those questions originates with one man: Joseph Fourier.  Fourier figured out how to mathematically brake a complex wave down into its component sine waves, allowing each to be edited or observed individually.  The general idea (without getting into the calculus behind it) is that you take the wave and wrap it around a circle so that it draws a type of flower.  You then gradually increase the frequency at which you wind the wave around that circle, watching the shapes that the graph draws change.  You do this until you find a frequency that draws something that looks like a heart shape.  When you find that, it means that the frequency at which you are winding the wave around the circle is the same as the frequency of one of the component sine waves in the parent wave you are analyzing.  I decided to make a physical representation of that process of finding the component sine waves.  . . The idea that we (Henry Haggart and I) came up with is to have a rotating circle of phosphorescent paper which you can control the speed of under a linear actuator with a blue laser attached to it.  The idea is that the linear actuator with the laser would trace a sine wave as you altered the speed at which the circle turned to try and find where they matched and you started to draw hearts instead of flowers.  This could be easily achieved by driving two separate stepper motors and using the input from a rotary encoder to change the speed at which the base circle rotates.  The rest of the physical design was relatively rudimentary, as we only needed a way to suspend the laser above the base circle on a custom fabricated linear actuator which we laser cut from acrylic.  . . . Programming this device, while it wasn’t excessively hard, did present some unexpected challenges for me.  Firstly, I had never worked with Arduino and steppers, and so did not think about the mechanics of the setSpeed function.  What the speed does is just add a different delay between steps in the program.  This was a problem for us, as every time the delay changed in the sine wave generator code, it would also change the speed of the base circle.  As it was getting dangerously close to exhibition time, the quick fix was to simply run the two motors off of two different boards.  This was a way to make the code much more readable and (more importantly) debuggable.  Later on, however, I learned about a way to run the two codes together on the same Arduino without having the delay in the sine function effect the delay in the base circle.  . Here is the code snippet that allowed us to do that:  . The millis() function in the Arduino IDE is a timer function, so its value counts at a constant rate no matter the delays that you may have in your code.  What this does is looks for when millis() has counted up a certain increment (value or your base circle speed) and when that condition is met, it takes one step forward with the base stepper motor.. "
"This is a project that aims to build an RGB LED P6 panel based LED Clock using RPi Zero W and Electrodragon interface board.. Read up about this project on . This is a project that aims to build an RGB LED P6 panel based LED Clock using RPi Zero W and Electrodragon interface board.. This project aims to create a RGM matrix based SMART clock using the RGB Matrix interface boards being sold by Electrodragon and the Raspberry Pi Zero W.  . The software being used is Raspbian and the board will be interfaced directly in C. The ultimate goal would be to create an SDK for this board to create multiple apps  for the P10/P6 display and finally create a nice 3d printed case for the same. The SDK will be capable of:. The project will host a number of sensors to which the ""App Modules"" can interface to:. Stay Tuned for more from this project. The repo for this project will be at: https://github.com/narioinc/PiClock . A quick sneak peek at the progress made so far:. . "
"Controlling a robot via WiFi, using Arduino and Blynk application.. Read up about this project on . Controlling a robot via WiFi, using Arduino and Blynk application.. . ARDUINO  + BLYNK + WIFI MODULE = WIFI ROBOT. "
"The Scent-terrific Smart Candle is made of wax, flickers like a real flame, emits scents though a wax warmer, and is controllable by Alexa! . Read up about this project on . The Scent-terrific Smart Candle is made of wax, flickers like a real flame, emits scents though a wax warmer, and is controllable by Alexa! . The Scent-terrific Smart Candle is a smart lighting and aromatherapy system for the home or office. . I love smart lighting. I've got seven wall switches, a smart bulb, and a smart plug (connected to a lamp) in my home. I've even built my own smart lamp.. Unfortunately, I haven't found the same innovation when it comes to other lighting apparatus. I haven't seen a smart night light on the market. I think smart lamps can be better. . Smart candles are the worse; most don't look like candles. They don't smell like candles. They aren't controllable by voice.  . I've been thinking of building a smart candle system for a while; Hackster's ""Alexa and Arduino Smart Home Challenge"" seemed like a good reason to take my ideas and attempt to build something.. One of the interesting aspects of the contest was the notion of taking a idea ""from project to product"". Using that as my guiding principle, I chose components and a final design based on the following factors:. After heavy consideration, I landed on a solution that leveraged an Arduino Pro Mini, ESP8266 (S-12 module), Mongoose OS, and AWS IoT (more details in the appendix).. The main interaction model, using Alexa to provide voice control, is as follows:. Once I landed on a design, I started work on a prototype, with the following requirements:. Flame and Candles. I used yellow LEDs to simulate a flame (leveraging PWM pins to randomly vary the voltage to the LED, which causes the LED to ""flicker""). . I drilled 5/16 in. holes into 2 in. X 4 in. candles and inserted the LEDs inside to simulate a flame burning.. Wax Melter and Temperature Control. I used an electric heating pad and a ceramic ramekin to meet the scent requirements. . A ds18b20 temperature sensor is used to measure the heating pad temperature.  A transistor is used (along with a PWM pin) in order to control the temperature.. Voltage Challenges. The heating pad needs at least 12V at 1.2A to (a) get hot quickly, (b) get hot enough to melt the wax, (c) deal with heat loss between the pad, insulation tiles, and ceramic ramekin. [See linked datasheet for more info]. The Huzzah can only accept 4-6 V. The Pro Mini can, in theory, take up to 12V input, but that stresses the voltage regulator on the device (I blew out a voltage regulator on one of my test devices).. Ultimately, I used a 5V 1.5A voltage regulator (7805) to get a safe input voltage for the microcontrollers. I used a TIP 120 Darlington Transistor to handle the voltage switching for the heating pad (using a PWM pin to get more precise temperature control).. Wiring Diagram. Notes/Comments:. The Smart Candle uses two microcontrollers to provide fuctionality. In order to build your own, you need to configure an ESP8266 to use Mongoose OS and AWS IoT.. Initial Set-up. Option 1 - Create your own AWS account and your own Alexa Skill. Option 2 - Leverage my Alexa skill. To do this, you will need to . Once you have the AWS CLI configured and have downloaded Mongoose OS:. At this point, your ESP8266 is now configured for use with the AWS IoT cloud. This is necessary in order for the candle to interact with Alexa (using my code below).. Notes/Comments:. The Pro Mini controls the functions of the smart candle. Building this is straight forward. . First, solder headers onto the Pro Mini (Sparkfun has a great getting started guide). From there, upload the code to the Pro Mini (check the code section for the Arduino code).. The wiring is documented in the Fritzing diagram. You can wire up to 5 ""candles"" with the code.. I decided to build a three candle holder for my second prototype. . Step 1 - Prepare the Candles. Step 2 - Create the Physical Candle Holder. I used 3D printing to create the candle holder (see section below for STL files):. Notes/Comments:. Step 3 - Final Soldering and Assembly. Step 3.1 - Solder the micro-controllers to a protoboard. Step 3.2 - Attache the heading pad to the base. Step 3.3 - Assemble the remaining components, but do not solder them to the protoboard yet. Step 3.4 - Assemble the LED holders. Step 3.5 - Assemble, then solder the remaining components to the protoboard. The final build, before adding the candles, looked like so:. Step 3.6 - Add the candles and test with the button. Step 3.7 - Test with Alexa. If you are using an account provided my me, then you will be able to control the device through Alexa. Note - See the next section if you plan to build your own Alexa skill.. An overview of building Alexa Smart Home skills can be found here: https://developer.amazon.com/docs/smarthome/understand-the-smart-home-skill-api.html. If this is your first smart home skill, then I suggest you first read the documentation and create a few ""hello world"" skills. Once you're ready, you can use my code to build your own Alexa Skill to control your smart candle.. The Alexa skill responds to the following directives:. Notes/Comments:. I used Login With Amazon for authentication. You can follow the example here: https://developer.amazon.com/docs/smarthome/authenticate-an-alexa-user-account-linking.html. I am in the process of building a ""Device Cloud"" for the Scent-terrific Smart Candle, so my code uses the user token to authenticate the user and retrieve the user_id. . The user_id is then used to either (a) discover devices or (b) confirm the user_id corresponds to the device_id.. If you are replicating this skill, you can skip some of the complexity and hard-code values instead. I've left the code as-is, with comments to where you can either hard-code or access a ""device cloud"" (a DynamoDB table). . Here are a few of the next steps needed to fully realize this project as a product.. Next Prototype (v3). Things to think about:. Path to Minimally Viable Product. Future Thinking. Note: This is a longer explanation of considered options. Added to the appendix for anyone who is interested.. One of the interesting aspects of the contest was the notion of taking a idea ""from project to product"". Using that as my guiding principle, I chose components and a final design based on the following factors:. I ultimately came down to two design ideas:. Option 1: Hub and Spoke. Components:. Pros: . Cons: . Option 2: Direct Wifi Connection to AWS IoT. Components: . Pros: . Cons: . Final Design. I ultimately decided on Option 2, for the following reasons;. "
"This is a quick start guide on using the ESP8266 as an IoT device powered by PubNub. . Read up about this project on . This is a quick start guide on using the ESP8266 as an IoT device powered by PubNub. . This is a basic demonstration of how to use PubNub to handle the communication between an ESP8266 and any other PubNub enabled device. The ESP8266 is a remarkable little piece of hardware, and works perfectly as the controller for an embedded IoT project. Most projects using this module use an external controller like an Arduino to control it using the serial AT commands, but this is unnecessary. The ESP8266 is a programmable 32 bit MCU and can easily work as a standalone device.I have created a basic library demonstrating how to publish and subscribe to a PubNub channel. This channel can also be published or subscribed to from any other PubNub enabled device in the world. This makes setting up a network of IoT sensors or external actuator nodes incredibly simple! The demo shows how to read a button and blink an LED in accordance to data transmitted on the PubNub channel from a remote source.I also demonstrate how to use the PubNub debug console as well as printing debug information over the serial port. A full description of the project including in-depth instructions is available in the source code repository: https://github.com/Kurt-E-Clothier/pubnub-esp8266. As stated, this is a basic demo illustrating what is possible using an ESP8266 with PubNub. The provided code will work; however, it should be modified to best suit a particular application.. . "
"Monitor if the door or the valve gas is open... or if someone opened the cookie jar!. Read up about this project on . Monitor if the door or the valve gas is open... or if someone opened the cookie jar!. the project is simple, a switch connected to the Artik Cloud. . The program running on the genuino MKR1000 check the status of the switch and collect every change for 15 minutes.. The battery must be 700mAh minimum. Algorithm . Every 15 minutes the mkr1000:. There are also another counter I missed in the diagram: failed attempt. This counter is increased everytime the device try to send the data over the cloud and it fails.. I imagined to use the device to monitor:. . All the project part are explained in the following video:. Part of the following tutorial are adapted from the artik.cloud tutorial, here: https://developer.artik.cloud/documentation/tutorials/ . Go to the Developer Dashboard to create a private device type. . Create a manifest for the ""Door Sensor"" device type. . Now a new ""Door Sensor"" Device is available. . Install a recent release of the arduino ide (I used the 1.6.8): www.arduino.org . . Launch the ide.. You now have an IOT device compatible with Artik.Cloud! . Note on Battery:  Battery is optional for the project.  The MKR1000 contains the circuit to charge the battery while it is connected to 5V Micro USB. Once you have finished you can power the project through battery.. I build the Web App adapting the ""Your First Web App"" tutorial on Artik Developer website. . The web app allows to get the last status of the device. I used an hosting (netsons) with support of PHP 5.4 and CURL. . Follow these instructions  to create an application using the Developer Dashboard.  . For this tutorial, select the following: .  <p>Please <a href=""https://accounts.artik.cloud/authorize?response_type=token&client_id=xxxxx"">login</a></p> . Go to http://yourwebsite/door, you should see a page with a login link: click it and log in with your samsung account credential. . Once you complete authentication, you will be redirected to hello.php  . Click ""Get Last Status"" to get the latest message from your device on ARTIK Cloud.  . If your door is closed you should see an image like this: . Rules are a clever way to create a communication between different devices: see this article.. I created a rule to send me an email if at some hours of the day, the device state signal that the door is open. . Done!. You wil receive email like this one below:. Other possible rule for this project: send an email if ""failed"" field is more than 0. . "
"Internet of Things for all! Mozilla WoT gateway based on Raspberry Pi and ESP8266 powered. Try to create your own gateway and device!. Read up about this project on . Internet of Things for all! Mozilla WoT gateway based on Raspberry Pi and ESP8266 powered. Try to create your own gateway and device!. The scope of this project is to “ensure the Internet is a global public resource, open and accessible to all.” The Internet of Things (IoT) is a new era of the Internet. And like the Internet, Mozilla imagines a free protocol for all. Cross-platform, cross country, cross brand.. For this project you must have:. 1 X Raspberry Pi 3 (https://amzn.to/2DmQ8eB). 2 X ESP8266 (https://amzn.to/2AUvC3c). Optional. 1 X Z-Wave dongle adapter (https://amzn.to/2HxZokm). ESP8266-01 Relay board (https://amzn.to/2Ufx7Ao). Optional for Raspberry Pi setup. Mouse. Keyboard. HDMI Monitor. For this project you must have:. Arduino IDE or Arduino Create (https://create.arduino.cc). Mozilla Gateway for Raspberry 3. All the Mozilla Gateway libraries. Today we have a lot of components inside the iot communication. You should  have, for example, an Amazon Alexa gateway and a lot of devices connected with that. But with Mozilla Gateway you can use the same gateway to use Alexa, Google home kit, simple ESP8266 or anything devices you want to ""smartifing"" your home.. The Mozilla Project is an experimental framework with 3 components:. Things GatewayAn implementation of a Web of Things gateway.. Things CloudA collection of IoT cloud services.. Things FrameworkA collection of re-usable software components for building Web Things.. . . The Raspberry Pi Gateway. The core of all the project is a Raspberry Pi 3 Gateway by Mozilla.. It's a really simple step. Mozilla has prepared a Linux distro that install the system on the Raspberry Pi. You can setup the gateway by using your smartphone.. 1. Flash SD Card. Download the pre-built Raspberry Pi OS image from Mozilla and flash it onto an SD card. Download from THIS LINK the Mozilla Gateway distro.. You can use the Raspberry Pi official guide to install the Mozilla Gateway on the SD.. Another possibility is Balena Etcher (https://www.balena.io/etcher/).. Balena Ethcer is a program for Windows Mac and Linux that copy an ISO image on the SD.. 2. Start you Gateway. Now you can start your Mozilla Gateway. After that, you can connect your phone with the gateway by using the Wifi from Raspberry Pi.. Connect your gateway to your wifi network. . After that you must create a tunnel to the Mozilla cloud system. After that you can see your gateway even out from your Local Area Network.. . After this step you receive an email with your Mozilla credential. You must compile the module and...that's it!. . 3. Add devices. Now you can add some devices. You can use Zigbee dongle to connect Zigbee devices, or z-wave dongle for z-wave devices.. 4. Arduino devices. My solution is able to use Arduino compatible devices. I use 2 NODE ESP8266. One of that is used as a receiver. You can connect the board to a relay and command a light for example. The other is an ESP8266 that collect the data from a sensor and send the value to the Gateway. In this, code (https://github.com/masteruan/webthing-arduino/tree/master/examples/esp8266Sensor) I've created a debug test. The ESP8266 send a random number every 3 seconds to the Gateway dashboard.. NodeESP8266 led. This is the link on Github code (https://github.com/masteruan/webthing-arduino/tree/master/examples/LED).. Download the code and put on the Node ESP8266 board.. ESP8266 + Relay shield. I've used also this kind of board. A ESP8266 + relay. You can see my code on Github. You must only charge the firmware on the ESP8266 board and also you can command a relay that works clearly with Mozilla WoT Gateway.. When you add the device you can use like a led device. If you send from Mozilla Gateway ""on"" command the ESP send by the serial port command to the relay shield a serial command to switch on the relay, otherwise the ESP8266 send to the board a switch off command for the relay.. This is the link on Github code (https://github.com/masteruan/webthing-arduino/tree/master/examples/relayEsp8266). NodeESP8266 sensor. You can see the code for the Node ESP8266 sensor.. This is the link on Github code (https://github.com/masteruan/webthing-arduino/tree/master/examples/sensorNodeMCU). You must include some libraries for ESP LED and ESP sensor.. Also for ESP8266-01 Relay you must include. With this code you setup your local network SSID and password. After you create a new ThigDevice instance.. With this code you connect the board to the wifi network.. With this code you send a random number to the gateway every 3 seconds. Now you can test your gateway. Try to connect to the dashboard and switch on/off the Node ESP8266.  . "
Ball fetcher robot made using a Tupperware and a Raspberry Pi Zero. Used OpenCV and Python for ball tracking.. Read up about this project on . Ball fetcher robot made using a Tupperware and a Raspberry Pi Zero. Used OpenCV and Python for ball tracking.. 
"Build a simple and low-power wireless weather station over 6LoWPAN and IPv6, with Zolertia RE-Mote, Ubidots and wunderground. Read up about this project on . Build a simple and low-power wireless weather station over 6LoWPAN and IPv6, with Zolertia RE-Mote, Ubidots and wunderground. As normally all my stories begin, I had a bunch of stuff lying around and (...). At home we wanted to have for some time now more information about the weather, no big deal, normally we just browsed our mobile and wunderground to get feedback about our area, in fact we found this particular PWS (personal weather station) being really close to home.. But then again depending on the day the information seemed a bit off, and wunderground's free developer plan limits the number of requests to 500 per day, and we wanted to be able to exploit the data for other purposes, like to make an app to suggest you to put more clothes on in case of a chilly morning waiting for the bus, make our own weather forecasts, share this information with others to increase the weather information resolution in our neighbourhood, and other excuses like this to get my wife's blessing to work on a weekend.. Truth is I had sensors and a weather meter lying around, and I wanted to test what I could do in a weekend with enough time to work on this.. The main objective is to register my DIY Weather Station as a PWS (personal weather station) in wunderground, and share my weather information with anyone.  The first step and the remainder of this page will detail the PWS implementation and testing, then on a later (and future) project I will elaborate on publishing to wunderground, and improvements done to the Weather Station after weeks of testing.. The following are the components I had at hand, honestly the only thing I would change is the rain gauge, but we will get to that later.. . Zolertia RE-Mote platform. Disclaimer: I work at Zolertia (only to get freebies). As obviously I have some RE-Motes laying around the house, and I wanted to implement the Weather Station to be wireless and with as low maintenance as possible.  Being the RE-Mote an ultra-low power platform and with dual radio, these two requirements were met.. The RE-Mote has a built-in battery charger, so powering the Weather Station over LiPo batteries and recharging using the RE-Mote's USB connector with a common micro-USB cable was an easy option.. At the moment as my Weather Station is to be located on my balcony, next to the living room where my Raspberry Pi is installed, I'm using the 2.4GHz IEEE 802.15.4 radio interface, but in case I would ran out of radio juice then it would be straightforward to just shift to the 868/915MHz radio for a coverage boost.  I'm using the 2JW031 multiband antenna, so no need for me to replace antennas if changing the radio interface (both are driven to the RP-SMA connector). The RE-Mote is ported to Contiki OS, so building the application and porting any missing driver is fairly simple (unless you complicate yourself with fancy stuff as normally I tend to do...). . A sparkfun's Weather Meter. The Weather Meter is composed of three sensors: anemometer, rain gauge and a wind vane.  The implementation of the sensors is quite straightforward: the anemometer and the rain gauge (a tipping bucket) ""ticks"" upon an even, so wiring up to a GPIO and capturing the interrupt is enough.  The wind vane changes its resistor value depending on its angle.  Following the datasheet instructions was easy enough to create the drivers (more about it later).. The Weather Meter has 3 x RJ-11 cables (same as telephones), the short one from the anemometer is to be connected to the wind vane (see below), so you end up with just 2 cables to connect: the rain gauge and the anemometer/wind vane (see below). Instead of powering the sensors with 5V I used 3.3V, this has no significant impact on the performance or values, but only to recalculate the wind vane degrees/voltage relationship as follow:. . . Also it is required to de-bounce the anemometer and rain gauge to prevent false readings.. One note of caution: the rain gauge when assembled and attached to the weather meter pole may produce false readings, as strong winds, vibration or similar causes the tipping bucket to... well... tip, this can be quite annoying as the only option I could think of was to either fix separately from the weather meter, on a flat surface, or use another sensor (like a moisture sensor) to validate the readings.  Below is my attempt to secure the rain gauge using a zip strip, this proved to generate lesser fake readings.. . Atmospheric pressure, Temperature and Humidity sensors. Luckily from a previous project I had a PCB made with the SHT25 and BMP085 I2C-based digital sensors on-board, featuring also 2 RJx11 ports to connect the Weather Meter.  If you are not as lucky as me, you can purchase the sensors from Sparkfun, Seeedstudio or Zolertia (the BMP085/BMP180 and SHT21/SHT25 should do just fine as the code is the same).. If using Seedstudio sensors, be aware the connectors and cables are 2 mm pitch, while Zolertia's sensors and connectors are 2.54mm.  If you notice on the photo, there is also an ambient light sensor (TSL2563), not used in this setup as I'm planning to put all the electronics in an IP65 enclosure.. . LiPo rechargeable battery. I had this battery lying around, good enough for a first test.  Its 4Ah capacity allows over 15 days of continuous operation running at 8mA (my worst case scenario), but this figure is way to conservative as the RE-Mote platform can go as down as 150nA, but I wasn't interested in optimizing for power consumption... yet!. . The IP65 enclosure. When choosing an enclosure there's not to much of a choice, rugged and ugly are the normal choices, specially when diving upon the company storage room to try to find an IP65 enclosure big enough to host all components (specially the LiPo battery).  One option to simplify the enclosure selection would probably be to change the LiPo battery model with a smaller one, but I didn't wanted to spend money on this.. Once I found an enclosure I made a fixture to keep the battery secured, and to place the RE-Mote on top, mostly to avoid jiggling components jumping inside the enclosure, specially in presence of strong winds.  Using a female connector was enough to make an easily removable ""lock"" to remove the RE-Mote if needed.. I drilled a hole at the bottom to pass through the Weather Meter cables (I know this is not IP65-ish but I only cared about being water resistant on the other box faces), and also for the internal temperature and humidity to be roughly the same as the outside of the enclosure.  As the hole was made at the bottom, in case of rain the electronics will not be affected, but I have yet to test if the humidity would not rise high to damage the boards, probably using a moisture absorbing bag should be enough.. . The RE-Mote and Weather Meter pin-out are available in the previous section.  To connect the sensors and the LiPo battery to the RE-Mote just follow the below instructions:. . I used 2 x zip strip to secure the enclosure to the Weather Meter pole, drilling 4 small holes on the back of the enclosure.  I have yet to put some epoxy on this to prevent water from entering the enclosure, or replace the strips with something easy to lock and unlock if required to dismount off the pole.. . I wanted to use IPv6 for this weather station application, so I could run a local network (using an aaaa::/64 prefix) for testing, or a public IPv6 prefix to be able to connect to it remotely from anywhere enabled, or to other IPv6 devices.. At the moment is running on a local network with a Raspberry Pi acting as a Gateway, running an IPv6 UDP server to communicate with the Weather Station on IPv6.. The Weather Station application (Node). I wanted to be able to reuse the Weather Station application as much as possible. For this particular project I'm using UDP over IPv6, but I wanted also to be able to easily switch to MQTT, CoAP, LWM2M or other.. For this implementation I'm using Contiki OS.. I implemented the Weather Station as an application running in a different process, taking care of the sensor initialization and readings separately from other network related processes.  Below is the abstraction done:. The Makefile uses the udp-client.c as the networking application, running the weather-station.c application underneath.. The weather meter (anemometer, rain gauge and wind vane) library is located in weather-meter.c, the SHT25 (temperature and humidity) and BMP085 (atmospheric pressure) sensor libraries are in sht25.c and bmpx8x.c.. Contiki has a sensor interface that allows to initialize and poll the sensors as follow:. Then we have the next data values available, saved directly into a weather_station_t extern structure.. The WEATHER_METER_ANEMOMETER_AVG_X and WEATHER_METER_WIND_VANE_AVG_X are return the value of the anemometer and wind vane averaged every 2 minutes as default.  The default integration period can be changed by adding WEATHER_METER_CONF_AVG_PERIOD to the project-conf.h file with the desired value in seconds.  The WEATHER_METER_ANEMOMETER_AVG averages the wind speed value continuously, not over a given period.  The other values are straightforward to understand (I hope!). In the project-conf.h file we define the GPIOs to use for the Anemometer and Rain Gauge, also the ADC channel to use for the Wind Vane.  Notice we also include the NVIC_INT_GPIO_PORT_C as the interrupt vector, in case we want to use any of the interrupt features of the weather-meter.c driver.. The weather-station.c application can be briefly resumed as:. The Weather Station configuration webserver allows to change run-time operational values of the Weather Station, using browsers like Firefox or Chrome.  The WS is implemented in the httpd-simple.c, below is a screenshot of the WS running on the Raspberry Pi using links.  The URL of the WS is the IPv6 address of the Weather Station and the ws.html page as shown below:. The configuration values are stored in the flash memory to make it persistent in case of a reboot.. The udp-client.c application just configures the UDP IPv6 connection and awaits for a data event from the Weather Station, then sends the data stored in the weather_station_t structure.. . To program the Weather Station just connect the RE-Mote over USB and:. . The Border Router (EDGE node) on the Raspberry Pi. The Border Router creates a virtual interface (similarly to the wlan0 WiFI interface), so packets coming from the 6LoWPAN network are forwarded as IPv6 packets and viceversa.. First program a different RE-Mote as Border Router:. In the Raspberry Pi then enable the IPv6 module.. And connect the RE-Mote programmed as Border Router to any of the Raspberry USB port and do as follow:. This will create a network interface named tun.. Now we can access the Border Router webserver and see if the Weather Station has joined the network as follows:. The software. As mentioned before, an UDP Server runs in the Raspberry Pi, binded to the local IPv4/IPv6 addresses.  The server created the UDP connection then sits and wait for UDP packets to arrive, then does some data formatting to convert from 1-2 digit precision integers to floating point variables.  We also multiply the rain gauge sensor values by 0.294 as we send the number of ticks, instead of millimetres.. In the screenshot above if enabling the print_recv_data function, the content of the message is printed on screen.. To validate the Weather Station data and to ease my testing, the UDP server publish the results to Ubidots.  Besides publishing my own data, I also send data to Ubidots from a nearby PWS (less than 300 metres away) using wunderground's API, and graph the values in the same plot to see how much close/far the readings are from each other, and have a sense of validation regarging I'm obtaining valid sensor data.. From the photo it seems the sensor data is OK, except the atmospheric pressure readings which seems a bit off, but then again I have to check if the altitude is affecting the readings (I live on a 6th floor while the ICERDANY6 PWS says its elevation is 318... but no units!).. To keep everything smooth and running I installed supervisor, to keep the tunslip6 and UDP-Server processes running.. You can follow the results at the link below.  Be aware that this is an active project so there may be times the weather station may be offline, or under testing indoors.. Ubidots weather station dashboard. The weather station has been running for over a week now!. Before moving to the next phase of the project (to be done on a separate post) and register to wunderground, I need to verify the data is OK and ready to be published.. One correction I did was for the wind direction average calculation, as monitoring the data over Ubidots I found some really odd values:. This was due to some incorrect casting upon calculating the values, it is fixed now in the latest Github commit.. There is also something pending to be fixed, related to the enclosure being overheated when facing the sun.  This has two solutions: changing the enclosure for a white one, or paint it white, to avoid the black enclosure from absorbing too much heat.  The other one is to drill more holes to help ventilating the box.. As it is the battery lasts over a week, and takes over 1-2 hours to recharge over the USB cable (thanks to the RE-Mote built-in battery charger).  The weather station stops working when the battery voltage drops to 2.75V approx.  The average current draw is 28.4mA so there's a lot of room for improvement in the next phase of the project: the goal is to achieve an overall of 500-800uA.. . This is the first step towards a bigger project, I have the following items pending on my to do list:. But this will be material for a new follow-up project.. . "
